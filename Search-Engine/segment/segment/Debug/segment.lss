
segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000776  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  00000776  0000080a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000bc  008000bc  00000866  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000866  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000898  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001552  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1c  00000000  00000000  00001f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aef  00000000  00000000  00002a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00003564  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050e  00000000  00000000  00003768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000be1  00000000  00000000  00003c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004857  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3b       	cpi	r26, 0xBC	; 188
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac eb       	ldi	r26, 0xBC	; 188
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3c       	cpi	r26, 0xC0	; 192
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 36 02 	call	0x46c	; 0x46c <main>
  8a:	0c 94 b9 03 	jmp	0x772	; 0x772 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keyPadInit>:
						 {1 ,2 , 3,12 },
						 {14,0,15,13 }
						 };
						 
void keyPadInit(){
		CLR_BIT(DDRD,PIN7);
  92:	81 b3       	in	r24, 0x11	; 17
  94:	8f 77       	andi	r24, 0x7F	; 127
  96:	81 bb       	out	0x11, r24	; 17
		CLR_BIT(DDRD,PIN6);
  98:	81 b3       	in	r24, 0x11	; 17
  9a:	8f 7b       	andi	r24, 0xBF	; 191
  9c:	81 bb       	out	0x11, r24	; 17
		CLR_BIT(DDRD,PIN5);
  9e:	81 b3       	in	r24, 0x11	; 17
  a0:	8f 7d       	andi	r24, 0xDF	; 223
  a2:	81 bb       	out	0x11, r24	; 17
		CLR_BIT(DDRD,PIN3);
  a4:	81 b3       	in	r24, 0x11	; 17
  a6:	87 7f       	andi	r24, 0xF7	; 247
  a8:	81 bb       	out	0x11, r24	; 17
		
		SET_BIT(DDRC,PIN5);
  aa:	84 b3       	in	r24, 0x14	; 20
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	84 bb       	out	0x14, r24	; 20
		SET_BIT(DDRC,PIN4);
  b0:	84 b3       	in	r24, 0x14	; 20
  b2:	80 61       	ori	r24, 0x10	; 16
  b4:	84 bb       	out	0x14, r24	; 20
		SET_BIT(DDRC,PIN3);
  b6:	84 b3       	in	r24, 0x14	; 20
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	84 bb       	out	0x14, r24	; 20
		SET_BIT(DDRC,PIN2);
  bc:	84 b3       	in	r24, 0x14	; 20
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	84 bb       	out	0x14, r24	; 20
		
		SET_BIT(PORTD,PIN7);
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	82 bb       	out	0x12, r24	; 18
		SET_BIT(PORTD,PIN6);
  c8:	82 b3       	in	r24, 0x12	; 18
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	82 bb       	out	0x12, r24	; 18
		SET_BIT(PORTD,PIN5);
  ce:	82 b3       	in	r24, 0x12	; 18
  d0:	80 62       	ori	r24, 0x20	; 32
  d2:	82 bb       	out	0x12, r24	; 18
		SET_BIT(PORTD,PIN3);
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	88 60       	ori	r24, 0x08	; 8
  d8:	82 bb       	out	0x12, r24	; 18
  da:	08 95       	ret

000000dc <keyPadGetValue>:
}

uint8 keyPadGetValue(void){
	uint8 col, row, ans = INVALID_KEYPAD_PRESS;
  dc:	8f ef       	ldi	r24, 0xFF	; 255
	for(row=5; row>=2; row--){
  de:	e5 e0       	ldi	r30, 0x05	; 5
  e0:	62 c0       	rjmp	.+196    	; 0x1a6 <keyPadGetValue+0xca>
		PORTC|=0b00111100;
  e2:	95 b3       	in	r25, 0x15	; 21
  e4:	9c 63       	ori	r25, 0x3C	; 60
  e6:	95 bb       	out	0x15, r25	; 21
		CLR_BIT(PORTC,row);
  e8:	95 b3       	in	r25, 0x15	; 21
  ea:	6e 2f       	mov	r22, r30
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	0e 2e       	mov	r0, r30
  f4:	02 c0       	rjmp	.+4      	; 0xfa <keyPadGetValue+0x1e>
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <keyPadGetValue+0x1a>
  fe:	20 95       	com	r18
 100:	29 23       	and	r18, r25
 102:	25 bb       	out	0x15, r18	; 21
		for(col=7;col>=3;col--){
 104:	97 e0       	ldi	r25, 0x07	; 7
 106:	4b c0       	rjmp	.+150    	; 0x19e <keyPadGetValue+0xc2>
			if(col==4) col--;
 108:	94 30       	cpi	r25, 0x04	; 4
 10a:	09 f4       	brne	.+2      	; 0x10e <keyPadGetValue+0x32>
 10c:	91 50       	subi	r25, 0x01	; 1
			if(GET_BIT(PIND,col)==0){
 10e:	20 b3       	in	r18, 0x10	; 16
 110:	49 2f       	mov	r20, r25
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	09 2e       	mov	r0, r25
 118:	02 c0       	rjmp	.+4      	; 0x11e <keyPadGetValue+0x42>
 11a:	35 95       	asr	r19
 11c:	27 95       	ror	r18
 11e:	0a 94       	dec	r0
 120:	e2 f7       	brpl	.-8      	; 0x11a <keyPadGetValue+0x3e>
 122:	20 fd       	sbrc	r18, 0
 124:	3b c0       	rjmp	.+118    	; 0x19c <keyPadGetValue+0xc0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	32 e5       	ldi	r19, 0x52	; 82
 12a:	f7 e0       	ldi	r31, 0x07	; 7
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	30 40       	sbci	r19, 0x00	; 0
 130:	f0 40       	sbci	r31, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <keyPadGetValue+0x50>
 134:	00 c0       	rjmp	.+0      	; 0x136 <keyPadGetValue+0x5a>
 136:	00 00       	nop
				_delay_ms(150);
				if (GET_BIT(PIND,col)==0)
 138:	20 b3       	in	r18, 0x10	; 16
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	09 2e       	mov	r0, r25
 13e:	02 c0       	rjmp	.+4      	; 0x144 <keyPadGetValue+0x68>
 140:	35 95       	asr	r19
 142:	27 95       	ror	r18
 144:	0a 94       	dec	r0
 146:	e2 f7       	brpl	.-8      	; 0x140 <keyPadGetValue+0x64>
 148:	20 fd       	sbrc	r18, 0
 14a:	28 c0       	rjmp	.+80     	; 0x19c <keyPadGetValue+0xc0>
				{
					if (col==3)
 14c:	93 30       	cpi	r25, 0x03	; 3
 14e:	99 f4       	brne	.+38     	; 0x176 <keyPadGetValue+0x9a>
					{
						ans=arr[5-row][7-col-1];
 150:	85 e0       	ldi	r24, 0x05	; 5
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	86 1b       	sub	r24, r22
 156:	97 0b       	sbc	r25, r23
 158:	26 e0       	ldi	r18, 0x06	; 6
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	24 1b       	sub	r18, r20
 15e:	35 0b       	sbc	r19, r21
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	8c 56       	subi	r24, 0x6C	; 108
 16a:	9f 4f       	sbci	r25, 0xFF	; 255
 16c:	dc 01       	movw	r26, r24
 16e:	a2 0f       	add	r26, r18
 170:	b3 1f       	adc	r27, r19
 172:	8c 91       	ld	r24, X
						break;
 174:	17 c0       	rjmp	.+46     	; 0x1a4 <keyPadGetValue+0xc8>
					}
					else
					{
						ans=arr[5-row][7-col];
 176:	85 e0       	ldi	r24, 0x05	; 5
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	86 1b       	sub	r24, r22
 17c:	97 0b       	sbc	r25, r23
 17e:	27 e0       	ldi	r18, 0x07	; 7
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	24 1b       	sub	r18, r20
 184:	35 0b       	sbc	r19, r21
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	8c 56       	subi	r24, 0x6C	; 108
 190:	9f 4f       	sbci	r25, 0xFF	; 255
 192:	dc 01       	movw	r26, r24
 194:	a2 0f       	add	r26, r18
 196:	b3 1f       	adc	r27, r19
 198:	8c 91       	ld	r24, X
						break;
 19a:	04 c0       	rjmp	.+8      	; 0x1a4 <keyPadGetValue+0xc8>
uint8 keyPadGetValue(void){
	uint8 col, row, ans = INVALID_KEYPAD_PRESS;
	for(row=5; row>=2; row--){
		PORTC|=0b00111100;
		CLR_BIT(PORTC,row);
		for(col=7;col>=3;col--){
 19c:	91 50       	subi	r25, 0x01	; 1
 19e:	93 30       	cpi	r25, 0x03	; 3
 1a0:	08 f0       	brcs	.+2      	; 0x1a4 <keyPadGetValue+0xc8>
 1a2:	b2 cf       	rjmp	.-156    	; 0x108 <keyPadGetValue+0x2c>
		SET_BIT(PORTD,PIN3);
}

uint8 keyPadGetValue(void){
	uint8 col, row, ans = INVALID_KEYPAD_PRESS;
	for(row=5; row>=2; row--){
 1a4:	e1 50       	subi	r30, 0x01	; 1
 1a6:	e2 30       	cpi	r30, 0x02	; 2
 1a8:	08 f0       	brcs	.+2      	; 0x1ac <keyPadGetValue+0xd0>
 1aa:	9b cf       	rjmp	.-202    	; 0xe2 <keyPadGetValue+0x6>
				}
			}
		}
	}
	return ans;
 1ac:	08 95       	ret

000001ae <lcdCommand>:
		break;
		case 3:
		address = col+0x54;
		break;
	}
	lcdCommand(address | 0x80);
 1ae:	9b b3       	in	r25, 0x1b	; 27
 1b0:	97 7f       	andi	r25, 0xF7	; 247
 1b2:	9b bb       	out	0x1b, r25	; 27
 1b4:	98 b3       	in	r25, 0x18	; 24
 1b6:	98 7e       	andi	r25, 0xE8	; 232
 1b8:	98 bb       	out	0x18, r25	; 24
 1ba:	28 2f       	mov	r18, r24
 1bc:	22 95       	swap	r18
 1be:	2f 70       	andi	r18, 0x0F	; 15
 1c0:	92 2f       	mov	r25, r18
 1c2:	98 70       	andi	r25, 0x08	; 8
 1c4:	49 2f       	mov	r20, r25
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	44 0f       	add	r20, r20
 1ca:	55 1f       	adc	r21, r21
 1cc:	27 70       	andi	r18, 0x07	; 7
 1ce:	42 2b       	or	r20, r18
 1d0:	98 b3       	in	r25, 0x18	; 24
 1d2:	49 2b       	or	r20, r25
 1d4:	48 bb       	out	0x18, r20	; 24
 1d6:	9b b3       	in	r25, 0x1b	; 27
 1d8:	94 60       	ori	r25, 0x04	; 4
 1da:	9b bb       	out	0x1b, r25	; 27
 1dc:	95 e0       	ldi	r25, 0x05	; 5
 1de:	9a 95       	dec	r25
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcdCommand+0x30>
 1e2:	00 00       	nop
 1e4:	9b b3       	in	r25, 0x1b	; 27
 1e6:	9b 7f       	andi	r25, 0xFB	; 251
 1e8:	9b bb       	out	0x1b, r25	; 27
 1ea:	ef e3       	ldi	r30, 0x3F	; 63
 1ec:	ff e1       	ldi	r31, 0x1F	; 31
 1ee:	31 97       	sbiw	r30, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcdCommand+0x40>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcdCommand+0x46>
 1f4:	00 00       	nop
 1f6:	98 b3       	in	r25, 0x18	; 24
 1f8:	98 7e       	andi	r25, 0xE8	; 232
 1fa:	98 bb       	out	0x18, r25	; 24
 1fc:	98 2f       	mov	r25, r24
 1fe:	98 70       	andi	r25, 0x08	; 8
 200:	29 2f       	mov	r18, r25
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	87 70       	andi	r24, 0x07	; 7
 20a:	28 2b       	or	r18, r24
 20c:	88 b3       	in	r24, 0x18	; 24
 20e:	28 2b       	or	r18, r24
 210:	28 bb       	out	0x18, r18	; 24
 212:	8b b3       	in	r24, 0x1b	; 27
 214:	84 60       	ori	r24, 0x04	; 4
 216:	8b bb       	out	0x1b, r24	; 27
 218:	f5 e0       	ldi	r31, 0x05	; 5
 21a:	fa 95       	dec	r31
 21c:	f1 f7       	brne	.-4      	; 0x21a <lcdCommand+0x6c>
 21e:	00 00       	nop
 220:	8b b3       	in	r24, 0x1b	; 27
 222:	8b 7f       	andi	r24, 0xFB	; 251
 224:	8b bb       	out	0x1b, r24	; 27
 226:	8f e3       	ldi	r24, 0x3F	; 63
 228:	9f e1       	ldi	r25, 0x1F	; 31
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcdCommand+0x7c>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <lcdCommand+0x82>
 230:	00 00       	nop
 232:	ef e1       	ldi	r30, 0x1F	; 31
 234:	fe e4       	ldi	r31, 0x4E	; 78
 236:	31 97       	sbiw	r30, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <lcdCommand+0x88>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <lcdCommand+0x8e>
 23c:	00 00       	nop
 23e:	08 95       	ret

00000240 <lcdInit>:
 240:	8a b3       	in	r24, 0x1a	; 26
 242:	88 60       	ori	r24, 0x08	; 8
 244:	8a bb       	out	0x1a, r24	; 26
 246:	8a b3       	in	r24, 0x1a	; 26
 248:	84 60       	ori	r24, 0x04	; 4
 24a:	8a bb       	out	0x1a, r24	; 26
 24c:	87 b3       	in	r24, 0x17	; 23
 24e:	81 60       	ori	r24, 0x01	; 1
 250:	87 bb       	out	0x17, r24	; 23
 252:	87 b3       	in	r24, 0x17	; 23
 254:	82 60       	ori	r24, 0x02	; 2
 256:	87 bb       	out	0x17, r24	; 23
 258:	87 b3       	in	r24, 0x17	; 23
 25a:	84 60       	ori	r24, 0x04	; 4
 25c:	87 bb       	out	0x17, r24	; 23
 25e:	87 b3       	in	r24, 0x17	; 23
 260:	80 61       	ori	r24, 0x10	; 16
 262:	87 bb       	out	0x17, r24	; 23
 264:	8f e5       	ldi	r24, 0x5F	; 95
 266:	9a ee       	ldi	r25, 0xEA	; 234
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcdInit+0x28>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcdInit+0x2e>
 26e:	00 00       	nop
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcdCommand>
 276:	88 e2       	ldi	r24, 0x28	; 40
 278:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcdCommand>
 27c:	8c e0       	ldi	r24, 0x0C	; 12
 27e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcdCommand>
 282:	86 e0       	ldi	r24, 0x06	; 6
 284:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcdCommand>
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcdCommand>
 28e:	80 e8       	ldi	r24, 0x80	; 128
 290:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcdCommand>
 294:	08 95       	ret

00000296 <lcdWriteChar>:
 296:	9b b3       	in	r25, 0x1b	; 27
 298:	98 60       	ori	r25, 0x08	; 8
 29a:	9b bb       	out	0x1b, r25	; 27
 29c:	98 b3       	in	r25, 0x18	; 24
 29e:	98 7e       	andi	r25, 0xE8	; 232
 2a0:	98 bb       	out	0x18, r25	; 24
 2a2:	28 2f       	mov	r18, r24
 2a4:	22 95       	swap	r18
 2a6:	2f 70       	andi	r18, 0x0F	; 15
 2a8:	92 2f       	mov	r25, r18
 2aa:	98 70       	andi	r25, 0x08	; 8
 2ac:	49 2f       	mov	r20, r25
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	44 0f       	add	r20, r20
 2b2:	55 1f       	adc	r21, r21
 2b4:	27 70       	andi	r18, 0x07	; 7
 2b6:	42 2b       	or	r20, r18
 2b8:	98 b3       	in	r25, 0x18	; 24
 2ba:	49 2b       	or	r20, r25
 2bc:	48 bb       	out	0x18, r20	; 24
 2be:	9b b3       	in	r25, 0x1b	; 27
 2c0:	94 60       	ori	r25, 0x04	; 4
 2c2:	9b bb       	out	0x1b, r25	; 27
 2c4:	95 e0       	ldi	r25, 0x05	; 5
 2c6:	9a 95       	dec	r25
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <lcdWriteChar+0x30>
 2ca:	00 00       	nop
 2cc:	9b b3       	in	r25, 0x1b	; 27
 2ce:	9b 7f       	andi	r25, 0xFB	; 251
 2d0:	9b bb       	out	0x1b, r25	; 27
 2d2:	ef e8       	ldi	r30, 0x8F	; 143
 2d4:	f1 e0       	ldi	r31, 0x01	; 1
 2d6:	31 97       	sbiw	r30, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <lcdWriteChar+0x40>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <lcdWriteChar+0x46>
 2dc:	00 00       	nop
 2de:	9b b3       	in	r25, 0x1b	; 27
 2e0:	94 60       	ori	r25, 0x04	; 4
 2e2:	9b bb       	out	0x1b, r25	; 27
 2e4:	98 b3       	in	r25, 0x18	; 24
 2e6:	98 7e       	andi	r25, 0xE8	; 232
 2e8:	98 bb       	out	0x18, r25	; 24
 2ea:	98 2f       	mov	r25, r24
 2ec:	98 70       	andi	r25, 0x08	; 8
 2ee:	29 2f       	mov	r18, r25
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	22 0f       	add	r18, r18
 2f4:	33 1f       	adc	r19, r19
 2f6:	87 70       	andi	r24, 0x07	; 7
 2f8:	28 2b       	or	r18, r24
 2fa:	88 b3       	in	r24, 0x18	; 24
 2fc:	28 2b       	or	r18, r24
 2fe:	28 bb       	out	0x18, r18	; 24
 300:	8b b3       	in	r24, 0x1b	; 27
 302:	84 60       	ori	r24, 0x04	; 4
 304:	8b bb       	out	0x1b, r24	; 27
 306:	f5 e0       	ldi	r31, 0x05	; 5
 308:	fa 95       	dec	r31
 30a:	f1 f7       	brne	.-4      	; 0x308 <lcdWriteChar+0x72>
 30c:	00 00       	nop
 30e:	8b b3       	in	r24, 0x1b	; 27
 310:	8b 7f       	andi	r24, 0xFB	; 251
 312:	8b bb       	out	0x1b, r24	; 27
 314:	8f e8       	ldi	r24, 0x8F	; 143
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <lcdWriteChar+0x82>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <lcdWriteChar+0x88>
 31e:	00 00       	nop
 320:	8b b3       	in	r24, 0x1b	; 27
 322:	84 60       	ori	r24, 0x04	; 4
 324:	8b bb       	out	0x1b, r24	; 27
 326:	ef e1       	ldi	r30, 0x1F	; 31
 328:	fe e4       	ldi	r31, 0x4E	; 78
 32a:	31 97       	sbiw	r30, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <lcdWriteChar+0x94>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <lcdWriteChar+0x9a>
 330:	00 00       	nop
 332:	08 95       	ret

00000334 <lcdString>:
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	8c 01       	movw	r16, r24
 33e:	c0 e0       	ldi	r28, 0x00	; 0
 340:	d0 e0       	ldi	r29, 0x00	; 0
 342:	03 c0       	rjmp	.+6      	; 0x34a <lcdString+0x16>
 344:	0e 94 4b 01 	call	0x296	; 0x296 <lcdWriteChar>
 348:	21 96       	adiw	r28, 0x01	; 1
 34a:	f8 01       	movw	r30, r16
 34c:	ec 0f       	add	r30, r28
 34e:	fd 1f       	adc	r31, r29
 350:	80 81       	ld	r24, Z
 352:	81 11       	cpse	r24, r1
 354:	f7 cf       	rjmp	.-18     	; 0x344 <lcdString+0x10>
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	08 95       	ret

00000360 <lcdClear>:
}
void lcdClear(void){
	lcdCommand(0x01);
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcdCommand>
 366:	08 95       	ret

00000368 <LED_INIT>:
 368:	dc 01       	movw	r26, r24
 36a:	ed 91       	ld	r30, X+
 36c:	fc 91       	ld	r31, X
 36e:	11 97       	sbiw	r26, 0x01	; 1
 370:	40 81       	ld	r20, Z
 372:	21 e0       	ldi	r18, 0x01	; 1
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	c9 01       	movw	r24, r18
 378:	14 96       	adiw	r26, 0x04	; 4
 37a:	0c 90       	ld	r0, X
 37c:	02 c0       	rjmp	.+4      	; 0x382 <LED_INIT+0x1a>
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	0a 94       	dec	r0
 384:	e2 f7       	brpl	.-8      	; 0x37e <LED_INIT+0x16>
 386:	84 2b       	or	r24, r20
 388:	80 83       	st	Z, r24
 38a:	08 95       	ret

0000038c <LED_ON>:
 38c:	dc 01       	movw	r26, r24
 38e:	12 96       	adiw	r26, 0x02	; 2
 390:	ed 91       	ld	r30, X+
 392:	fc 91       	ld	r31, X
 394:	13 97       	sbiw	r26, 0x03	; 3
 396:	40 81       	ld	r20, Z
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	c9 01       	movw	r24, r18
 39e:	14 96       	adiw	r26, 0x04	; 4
 3a0:	0c 90       	ld	r0, X
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <LED_ON+0x1c>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	0a 94       	dec	r0
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <LED_ON+0x18>
 3ac:	84 2b       	or	r24, r20
 3ae:	80 83       	st	Z, r24
 3b0:	08 95       	ret

000003b2 <LED_OFF>:
 3b2:	dc 01       	movw	r26, r24
 3b4:	12 96       	adiw	r26, 0x02	; 2
 3b6:	ed 91       	ld	r30, X+
 3b8:	fc 91       	ld	r31, X
 3ba:	13 97       	sbiw	r26, 0x03	; 3
 3bc:	40 81       	ld	r20, Z
 3be:	21 e0       	ldi	r18, 0x01	; 1
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	b9 01       	movw	r22, r18
 3c4:	14 96       	adiw	r26, 0x04	; 4
 3c6:	0c 90       	ld	r0, X
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <LED_OFF+0x1c>
 3ca:	66 0f       	add	r22, r22
 3cc:	77 1f       	adc	r23, r23
 3ce:	0a 94       	dec	r0
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <LED_OFF+0x18>
 3d2:	cb 01       	movw	r24, r22
 3d4:	80 95       	com	r24
 3d6:	84 23       	and	r24, r20
 3d8:	80 83       	st	Z, r24
 3da:	08 95       	ret

000003dc <to_binary>:
	}
}
void to_binary(uint8 num) {
	//static char* str;
	
	int idx = 0;
 3dc:	20 e0       	ldi	r18, 0x00	; 0
 3de:	30 e0       	ldi	r19, 0x00	; 0
	while (idx <= 3) {
 3e0:	0c c0       	rjmp	.+24     	; 0x3fa <to_binary+0x1e>
		binaryStr[idx] = (num % 2 ? '1' : '0');//0100
 3e2:	80 ff       	sbrs	r24, 0
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <to_binary+0xe>
 3e6:	91 e3       	ldi	r25, 0x31	; 49
 3e8:	01 c0       	rjmp	.+2      	; 0x3ec <to_binary+0x10>
 3ea:	90 e3       	ldi	r25, 0x30	; 48
 3ec:	f9 01       	movw	r30, r18
 3ee:	e4 54       	subi	r30, 0x44	; 68
 3f0:	ff 4f       	sbci	r31, 0xFF	; 255
 3f2:	90 83       	st	Z, r25
		num /= 2;
 3f4:	86 95       	lsr	r24
		idx++;
 3f6:	2f 5f       	subi	r18, 0xFF	; 255
 3f8:	3f 4f       	sbci	r19, 0xFF	; 255
}
void to_binary(uint8 num) {
	//static char* str;
	
	int idx = 0;
	while (idx <= 3) {
 3fa:	24 30       	cpi	r18, 0x04	; 4
 3fc:	31 05       	cpc	r19, r1
 3fe:	8c f3       	brlt	.-30     	; 0x3e2 <to_binary+0x6>
		binaryStr[idx] = (num % 2 ? '1' : '0');//0100
		num /= 2;
		idx++;
	}
	
}
 400:	08 95       	ret

00000402 <binary_leds>:
void binary_leds(){
	if(binaryStr[0]=='1')
 402:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__data_end>
 406:	81 33       	cpi	r24, 0x31	; 49
 408:	29 f4       	brne	.+10     	; 0x414 <binary_leds+0x12>
	LED_ON(&GREEN);
 40a:	8f e6       	ldi	r24, 0x6F	; 111
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_ON>
 412:	04 c0       	rjmp	.+8      	; 0x41c <binary_leds+0x1a>
	else
	LED_OFF(&GREEN);
 414:	8f e6       	ldi	r24, 0x6F	; 111
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_OFF>
	if(binaryStr[1]=='1')
 41c:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <__data_end+0x1>
 420:	81 33       	cpi	r24, 0x31	; 49
 422:	29 f4       	brne	.+10     	; 0x42e <binary_leds+0x2c>
	LED_ON(&BLUE);
 424:	8a e6       	ldi	r24, 0x6A	; 106
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_ON>
 42c:	04 c0       	rjmp	.+8      	; 0x436 <binary_leds+0x34>
	else
	LED_OFF(&BLUE);
 42e:	8a e6       	ldi	r24, 0x6A	; 106
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_OFF>
	if(binaryStr[2]=='1')
 436:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <__data_end+0x2>
 43a:	81 33       	cpi	r24, 0x31	; 49
 43c:	29 f4       	brne	.+10     	; 0x448 <binary_leds+0x46>
	LED_ON(&YELLOW);
 43e:	85 e6       	ldi	r24, 0x65	; 101
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_ON>
 446:	04 c0       	rjmp	.+8      	; 0x450 <binary_leds+0x4e>
	else
	LED_OFF(&YELLOW);
 448:	85 e6       	ldi	r24, 0x65	; 101
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_OFF>
	if(binaryStr[3]=='1')
 450:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <__data_end+0x3>
 454:	81 33       	cpi	r24, 0x31	; 49
 456:	29 f4       	brne	.+10     	; 0x462 <binary_leds+0x60>
	LED_ON(&RED);
 458:	80 e6       	ldi	r24, 0x60	; 96
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_ON>
 460:	08 95       	ret
	else
	LED_OFF(&RED);
 462:	80 e6       	ldi	r24, 0x60	; 96
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_OFF>
 46a:	08 95       	ret

0000046c <main>:
char binaryStr[4];
void to_binary(uint8);		//num2binary
void binary_leds(void);		

int main(void)
{
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	cd b7       	in	r28, 0x3d	; 61
 472:	de b7       	in	r29, 0x3e	; 62
 474:	a0 97       	sbiw	r28, 0x20	; 32
 476:	0f b6       	in	r0, 0x3f	; 63
 478:	f8 94       	cli
 47a:	de bf       	out	0x3e, r29	; 62
 47c:	0f be       	out	0x3f, r0	; 63
 47e:	cd bf       	out	0x3d, r28	; 61
	LED_INIT(&GREEN);
 480:	8f e6       	ldi	r24, 0x6F	; 111
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 b4 01 	call	0x368	; 0x368 <LED_INIT>
	LED_INIT(&BLUE);
 488:	8a e6       	ldi	r24, 0x6A	; 106
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 b4 01 	call	0x368	; 0x368 <LED_INIT>
	LED_INIT(&YELLOW);
 490:	85 e6       	ldi	r24, 0x65	; 101
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 b4 01 	call	0x368	; 0x368 <LED_INIT>
	LED_INIT(&RED);
 498:	80 e6       	ldi	r24, 0x60	; 96
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	0e 94 b4 01 	call	0x368	; 0x368 <LED_INIT>
	lcdInit();
 4a0:	0e 94 20 01 	call	0x240	; 0x240 <lcdInit>
	Seven_seg_voidinit();
 4a4:	0e 94 14 03 	call	0x628	; 0x628 <Seven_seg_voidinit>
	keyPadInit();
 4a8:	0e 94 49 00 	call	0x92	; 0x92 <keyPadInit>
	timer0_init();
 4ac:	0e 94 6d 03 	call	0x6da	; 0x6da <timer0_init>
	
	int count = -1,key=-1,sz,operator=0;
	int list[16] = {[0 ... 15]=-1}; 
 4b0:	80 e2       	ldi	r24, 0x20	; 32
 4b2:	e4 e7       	ldi	r30, 0x74	; 116
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	de 01       	movw	r26, r28
 4b8:	11 96       	adiw	r26, 0x01	; 1
 4ba:	01 90       	ld	r0, Z+
 4bc:	0d 92       	st	X+, r0
 4be:	8a 95       	dec	r24
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <main+0x4e>
	long value=0;
	
	lcdString("List: ");
 4c2:	84 ea       	ldi	r24, 0xA4	; 164
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 9a 01 	call	0x334	; 0x334 <lcdString>
	keyPadInit();
	timer0_init();
	
	int count = -1,key=-1,sz,operator=0;
	int list[16] = {[0 ... 15]=-1}; 
	long value=0;
 4ca:	c1 2c       	mov	r12, r1
 4cc:	d1 2c       	mov	r13, r1
 4ce:	76 01       	movw	r14, r12
	lcdInit();
	Seven_seg_voidinit();
	keyPadInit();
	timer0_init();
	
	int count = -1,key=-1,sz,operator=0;
 4d0:	a1 2c       	mov	r10, r1
 4d2:	b1 2c       	mov	r11, r1
 4d4:	0f ef       	ldi	r16, 0xFF	; 255
 4d6:	1f ef       	ldi	r17, 0xFF	; 255
	long value=0;
	
	lcdString("List: ");
	while (1)
	{
		key = keyPadGetValue();
 4d8:	0e 94 6e 00 	call	0xdc	; 0xdc <keyPadGetValue>
		if (key != INVALID_KEYPAD_PRESS)
 4dc:	8f 3f       	cpi	r24, 0xFF	; 255
 4de:	e1 f3       	breq	.-8      	; 0x4d8 <main+0x6c>
		{
			switch (key)
 4e0:	8e 30       	cpi	r24, 0x0E	; 14
 4e2:	e9 f0       	breq	.+58     	; 0x51e <main+0xb2>
 4e4:	8f 30       	cpi	r24, 0x0F	; 15
 4e6:	09 f4       	brne	.+2      	; 0x4ea <main+0x7e>
 4e8:	57 c0       	rjmp	.+174    	; 0x598 <main+0x12c>
 4ea:	8d 30       	cpi	r24, 0x0D	; 13
 4ec:	09 f0       	breq	.+2      	; 0x4f0 <main+0x84>
 4ee:	5f c0       	rjmp	.+190    	; 0x5ae <main+0x142>
			{
				case 13:				// (+) key print comma to separate numbers
					count++;
 4f0:	0f 5f       	subi	r16, 0xFF	; 255
 4f2:	1f 4f       	sbci	r17, 0xFF	; 255
					if(count != 15){	//list not end
 4f4:	0f 30       	cpi	r16, 0x0F	; 15
 4f6:	11 05       	cpc	r17, r1
 4f8:	79 f3       	breq	.-34     	; 0x4d8 <main+0x6c>
						lcdWriteChar(',');
 4fa:	8c e2       	ldi	r24, 0x2C	; 44
 4fc:	0e 94 4b 01 	call	0x296	; 0x296 <lcdWriteChar>
						list[count] = value;
 500:	f8 01       	movw	r30, r16
 502:	ee 0f       	add	r30, r30
 504:	ff 1f       	adc	r31, r31
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	8c 0f       	add	r24, r28
 50c:	9d 1f       	adc	r25, r29
 50e:	e8 0f       	add	r30, r24
 510:	f9 1f       	adc	r31, r25
 512:	d1 82       	std	Z+1, r13	; 0x01
 514:	c0 82       	st	Z, r12
						value=0;
 516:	c1 2c       	mov	r12, r1
 518:	d1 2c       	mov	r13, r1
 51a:	76 01       	movw	r14, r12
 51c:	dd cf       	rjmp	.-70     	; 0x4d8 <main+0x6c>
					}
					break;
				case 14:				// (ON/C) key entering the number to search for
					lcdClear();
 51e:	0e 94 b0 01 	call	0x360	; 0x360 <lcdClear>
					lcdString("Search Number: ");
 522:	8b ea       	ldi	r24, 0xAB	; 171
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 9a 01 	call	0x334	; 0x334 <lcdString>
					operator=1;
					count++;				//append last number
 52a:	0f 5f       	subi	r16, 0xFF	; 255
 52c:	1f 4f       	sbci	r17, 0xFF	; 255
					list[count] = value;
 52e:	f8 01       	movw	r30, r16
 530:	ee 0f       	add	r30, r30
 532:	ff 1f       	adc	r31, r31
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	8c 0f       	add	r24, r28
 53a:	9d 1f       	adc	r25, r29
 53c:	e8 0f       	add	r30, r24
 53e:	f9 1f       	adc	r31, r25
 540:	d1 82       	std	Z+1, r13	; 0x01
 542:	c0 82       	st	Z, r12
					value=0;
 544:	c1 2c       	mov	r12, r1
 546:	d1 2c       	mov	r13, r1
 548:	76 01       	movw	r14, r12
					}
					break;
				case 14:				// (ON/C) key entering the number to search for
					lcdClear();
					lcdString("Search Number: ");
					operator=1;
 54a:	aa 24       	eor	r10, r10
 54c:	a3 94       	inc	r10
 54e:	b1 2c       	mov	r11, r1
					count++;				//append last number
					list[count] = value;
					value=0;
					break;
 550:	c3 cf       	rjmp	.-122    	; 0x4d8 <main+0x6c>
				case 15:				// (=) key start searching 
					sz = sizeof(list) / sizeof(list[0]);
					int lastVAl=-1;
					for (int i=0;i<=sz;i++)
						{
							if(list[i]==value)
 552:	f5 01       	movw	r30, r10
 554:	ee 0f       	add	r30, r30
 556:	ff 1f       	adc	r31, r31
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	8c 0f       	add	r24, r28
 55e:	9d 1f       	adc	r25, r29
 560:	e8 0f       	add	r30, r24
 562:	f9 1f       	adc	r31, r25
 564:	80 81       	ld	r24, Z
 566:	91 81       	ldd	r25, Z+1	; 0x01
 568:	09 2e       	mov	r0, r25
 56a:	00 0c       	add	r0, r0
 56c:	aa 0b       	sbc	r26, r26
 56e:	bb 0b       	sbc	r27, r27
 570:	c8 16       	cp	r12, r24
 572:	d9 06       	cpc	r13, r25
 574:	ea 06       	cpc	r14, r26
 576:	fb 06       	cpc	r15, r27
 578:	59 f4       	brne	.+22     	; 0x590 <main+0x124>
							{
								to_binary(i);	//index2binary for leds
 57a:	8a 2d       	mov	r24, r10
 57c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <to_binary>
								binary_leds();
 580:	0e 94 01 02 	call	0x402	; 0x402 <binary_leds>
								timer0_delay(idx_7seg,i);  //delay 1sec
 584:	6a 2d       	mov	r22, r10
 586:	8e e3       	ldi	r24, 0x3E	; 62
 588:	93 e0       	ldi	r25, 0x03	; 3
 58a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <timer0_delay>
								lastVAl=i;
 58e:	1a 2d       	mov	r17, r10
					value=0;
					break;
				case 15:				// (=) key start searching 
					sz = sizeof(list) / sizeof(list[0]);
					int lastVAl=-1;
					for (int i=0;i<=sz;i++)
 590:	9f ef       	ldi	r25, 0xFF	; 255
 592:	a9 1a       	sub	r10, r25
 594:	b9 0a       	sbc	r11, r25
 596:	03 c0       	rjmp	.+6      	; 0x59e <main+0x132>
	while (1)
	{
		key = keyPadGetValue();
		if (key != INVALID_KEYPAD_PRESS)
		{
			switch (key)
 598:	a1 2c       	mov	r10, r1
 59a:	b1 2c       	mov	r11, r1
 59c:	1f ef       	ldi	r17, 0xFF	; 255
					value=0;
					break;
				case 15:				// (=) key start searching 
					sz = sizeof(list) / sizeof(list[0]);
					int lastVAl=-1;
					for (int i=0;i<=sz;i++)
 59e:	81 e1       	ldi	r24, 0x11	; 17
 5a0:	a8 16       	cp	r10, r24
 5a2:	b1 04       	cpc	r11, r1
 5a4:	b4 f2       	brlt	.-84     	; 0x552 <main+0xe6>
								binary_leds();
								timer0_delay(idx_7seg,i);  //delay 1sec
								lastVAl=i;
							}
						}
						while(1) idx_7seg(lastVAl); // continue showing last index
 5a6:	81 2f       	mov	r24, r17
 5a8:	0e 94 3e 03 	call	0x67c	; 0x67c <idx_7seg>
 5ac:	fc cf       	rjmp	.-8      	; 0x5a6 <main+0x13a>
					break;
				default:				// default wait for entering numbers
					if(key>=0 && key<=9)
 5ae:	8a 30       	cpi	r24, 0x0A	; 10
 5b0:	08 f0       	brcs	.+2      	; 0x5b4 <main+0x148>
 5b2:	92 cf       	rjmp	.-220    	; 0x4d8 <main+0x6c>
					{
						if (count!=16 && operator==0)			//List
 5b4:	00 31       	cpi	r16, 0x10	; 16
 5b6:	11 05       	cpc	r17, r1
 5b8:	e9 f0       	breq	.+58     	; 0x5f4 <main+0x188>
 5ba:	a1 14       	cp	r10, r1
 5bc:	b1 04       	cpc	r11, r1
 5be:	d1 f4       	brne	.+52     	; 0x5f4 <main+0x188>
						{
							value = value * 10 + key;
 5c0:	cc 0c       	add	r12, r12
 5c2:	dd 1c       	adc	r13, r13
 5c4:	ee 1c       	adc	r14, r14
 5c6:	ff 1c       	adc	r15, r15
 5c8:	b7 01       	movw	r22, r14
 5ca:	a6 01       	movw	r20, r12
 5cc:	44 0f       	add	r20, r20
 5ce:	55 1f       	adc	r21, r21
 5d0:	66 1f       	adc	r22, r22
 5d2:	77 1f       	adc	r23, r23
 5d4:	44 0f       	add	r20, r20
 5d6:	55 1f       	adc	r21, r21
 5d8:	66 1f       	adc	r22, r22
 5da:	77 1f       	adc	r23, r23
 5dc:	c4 0e       	add	r12, r20
 5de:	d5 1e       	adc	r13, r21
 5e0:	e6 1e       	adc	r14, r22
 5e2:	f7 1e       	adc	r15, r23
 5e4:	c8 0e       	add	r12, r24
 5e6:	d1 1c       	adc	r13, r1
 5e8:	e1 1c       	adc	r14, r1
 5ea:	f1 1c       	adc	r15, r1
							lcdWriteChar(key+'0');
 5ec:	80 5d       	subi	r24, 0xD0	; 208
 5ee:	0e 94 4b 01 	call	0x296	; 0x296 <lcdWriteChar>
 5f2:	72 cf       	rjmp	.-284    	; 0x4d8 <main+0x6c>
						}
						else							// Search number
						{
							value = value * 10 + key;
 5f4:	cc 0c       	add	r12, r12
 5f6:	dd 1c       	adc	r13, r13
 5f8:	ee 1c       	adc	r14, r14
 5fa:	ff 1c       	adc	r15, r15
 5fc:	b7 01       	movw	r22, r14
 5fe:	a6 01       	movw	r20, r12
 600:	44 0f       	add	r20, r20
 602:	55 1f       	adc	r21, r21
 604:	66 1f       	adc	r22, r22
 606:	77 1f       	adc	r23, r23
 608:	44 0f       	add	r20, r20
 60a:	55 1f       	adc	r21, r21
 60c:	66 1f       	adc	r22, r22
 60e:	77 1f       	adc	r23, r23
 610:	c4 0e       	add	r12, r20
 612:	d5 1e       	adc	r13, r21
 614:	e6 1e       	adc	r14, r22
 616:	f7 1e       	adc	r15, r23
 618:	c8 0e       	add	r12, r24
 61a:	d1 1c       	adc	r13, r1
 61c:	e1 1c       	adc	r14, r1
 61e:	f1 1c       	adc	r15, r1
							lcdWriteChar(key+'0');
 620:	80 5d       	subi	r24, 0xD0	; 208
 622:	0e 94 4b 01 	call	0x296	; 0x296 <lcdWriteChar>
 626:	58 cf       	rjmp	.-336    	; 0x4d8 <main+0x6c>

00000628 <Seven_seg_voidinit>:
#include "7seg_driver.h"


void Seven_seg_voidinit(void)
{
	SET_BIT(DDRA,PIN3);
 628:	8a b3       	in	r24, 0x1a	; 26
 62a:	88 60       	ori	r24, 0x08	; 8
 62c:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,PIN2);
 62e:	8a b3       	in	r24, 0x1a	; 26
 630:	84 60       	ori	r24, 0x04	; 4
 632:	8a bb       	out	0x1a, r24	; 26
	DDRB |= 0b01110111;
 634:	87 b3       	in	r24, 0x17	; 23
 636:	87 67       	ori	r24, 0x77	; 119
 638:	87 bb       	out	0x17, r24	; 23
	//stop all 7seg before start
	SET_BIT(PORTB,PIN6);
 63a:	88 b3       	in	r24, 0x18	; 24
 63c:	80 64       	ori	r24, 0x40	; 64
 63e:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB,PIN5);
 640:	88 b3       	in	r24, 0x18	; 24
 642:	80 62       	ori	r24, 0x20	; 32
 644:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTA,PIN2);
 646:	8b b3       	in	r24, 0x1b	; 27
 648:	84 60       	ori	r24, 0x04	; 4
 64a:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(PORTA,PIN3);
 64c:	8b b3       	in	r24, 0x1b	; 27
 64e:	88 60       	ori	r24, 0x08	; 8
 650:	8b bb       	out	0x1b, r24	; 27
 652:	08 95       	ret

00000654 <Seven_seg_voidDisplay>:
	
}
void Seven_seg_voidDisplay(int num)
{
 654:	9c 01       	movw	r18, r24
	PORTB &=0b11101000;
 656:	98 b3       	in	r25, 0x18	; 24
 658:	98 7e       	andi	r25, 0xE8	; 232
 65a:	98 bb       	out	0x18, r25	; 24
	PORTB |=(((num%10 & 0b00001000)<<1)|(num%10 & 0b00000111));
 65c:	48 b3       	in	r20, 0x18	; 24
 65e:	c9 01       	movw	r24, r18
 660:	6a e0       	ldi	r22, 0x0A	; 10
 662:	70 e0       	ldi	r23, 0x00	; 0
 664:	0e 94 91 03 	call	0x722	; 0x722 <__divmodhi4>
 668:	9c 01       	movw	r18, r24
 66a:	28 70       	andi	r18, 0x08	; 8
 66c:	33 27       	eor	r19, r19
 66e:	22 0f       	add	r18, r18
 670:	33 1f       	adc	r19, r19
 672:	87 70       	andi	r24, 0x07	; 7
 674:	28 2b       	or	r18, r24
 676:	24 2b       	or	r18, r20
 678:	28 bb       	out	0x18, r18	; 24
 67a:	08 95       	ret

0000067c <idx_7seg>:
	
}

void idx_7seg(uint8 num){
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	d8 2f       	mov	r29, r24
	Seven_seg_voidDisplay(num / 10);
 682:	cd ec       	ldi	r28, 0xCD	; 205
 684:	8c 9f       	mul	r24, r28
 686:	c1 2d       	mov	r28, r1
 688:	11 24       	eor	r1, r1
 68a:	c6 95       	lsr	r28
 68c:	c6 95       	lsr	r28
 68e:	c6 95       	lsr	r28
 690:	8c 2f       	mov	r24, r28
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 2a 03 	call	0x654	; 0x654 <Seven_seg_voidDisplay>
 698:	8f e3       	ldi	r24, 0x3F	; 63
 69a:	9f e1       	ldi	r25, 0x1F	; 31
 69c:	01 97       	sbiw	r24, 0x01	; 1
 69e:	f1 f7       	brne	.-4      	; 0x69c <idx_7seg+0x20>
 6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <idx_7seg+0x26>
 6a2:	00 00       	nop
	_delay_ms(2);
	TOGGLE_BIT(PORTB,PIN6);
 6a4:	98 b3       	in	r25, 0x18	; 24
 6a6:	80 e4       	ldi	r24, 0x40	; 64
 6a8:	89 27       	eor	r24, r25
 6aa:	88 bb       	out	0x18, r24	; 24
	// Display the units digit
	Seven_seg_voidDisplay(num % 10);
 6ac:	cc 0f       	add	r28, r28
 6ae:	8c 2f       	mov	r24, r28
 6b0:	88 0f       	add	r24, r24
 6b2:	88 0f       	add	r24, r24
 6b4:	c8 0f       	add	r28, r24
 6b6:	8d 2f       	mov	r24, r29
 6b8:	8c 1b       	sub	r24, r28
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	0e 94 2a 03 	call	0x654	; 0x654 <Seven_seg_voidDisplay>
 6c0:	8f e3       	ldi	r24, 0x3F	; 63
 6c2:	9f e1       	ldi	r25, 0x1F	; 31
 6c4:	01 97       	sbiw	r24, 0x01	; 1
 6c6:	f1 f7       	brne	.-4      	; 0x6c4 <idx_7seg+0x48>
 6c8:	00 c0       	rjmp	.+0      	; 0x6ca <idx_7seg+0x4e>
 6ca:	00 00       	nop
	_delay_ms(2);
	TOGGLE_BIT(PORTB,PIN5);
 6cc:	98 b3       	in	r25, 0x18	; 24
 6ce:	80 e2       	ldi	r24, 0x20	; 32
 6d0:	89 27       	eor	r24, r25
 6d2:	88 bb       	out	0x18, r24	; 24
}
 6d4:	df 91       	pop	r29
 6d6:	cf 91       	pop	r28
 6d8:	08 95       	ret

000006da <timer0_init>:
 6da:	12 be       	out	0x32, r1	; 50
 6dc:	85 e0       	ldi	r24, 0x05	; 5
 6de:	83 bf       	out	0x33, r24	; 51
 6e0:	08 95       	ret

000006e2 <timer0_delay>:
 6e2:	ef 92       	push	r14
 6e4:	ff 92       	push	r15
 6e6:	1f 93       	push	r17
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	7c 01       	movw	r14, r24
 6ee:	16 2f       	mov	r17, r22
 6f0:	c0 e0       	ldi	r28, 0x00	; 0
 6f2:	d0 e0       	ldi	r29, 0x00	; 0
 6f4:	03 c0       	rjmp	.+6      	; 0x6fc <timer0_delay+0x1a>
 6f6:	81 2f       	mov	r24, r17
 6f8:	f7 01       	movw	r30, r14
 6fa:	09 95       	icall
 6fc:	08 b6       	in	r0, 0x38	; 56
 6fe:	00 fe       	sbrs	r0, 0
 700:	fa cf       	rjmp	.-12     	; 0x6f6 <timer0_delay+0x14>
 702:	ce 33       	cpi	r28, 0x3E	; 62
 704:	d1 05       	cpc	r29, r1
 706:	19 f4       	brne	.+6      	; 0x70e <timer0_delay+0x2c>
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	88 bf       	out	0x38, r24	; 56
 70c:	04 c0       	rjmp	.+8      	; 0x716 <timer0_delay+0x34>
 70e:	21 96       	adiw	r28, 0x01	; 1
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	88 bf       	out	0x38, r24	; 56
 714:	f3 cf       	rjmp	.-26     	; 0x6fc <timer0_delay+0x1a>
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	1f 91       	pop	r17
 71c:	ff 90       	pop	r15
 71e:	ef 90       	pop	r14
 720:	08 95       	ret

00000722 <__divmodhi4>:
 722:	97 fb       	bst	r25, 7
 724:	07 2e       	mov	r0, r23
 726:	16 f4       	brtc	.+4      	; 0x72c <__divmodhi4+0xa>
 728:	00 94       	com	r0
 72a:	07 d0       	rcall	.+14     	; 0x73a <__divmodhi4_neg1>
 72c:	77 fd       	sbrc	r23, 7
 72e:	09 d0       	rcall	.+18     	; 0x742 <__divmodhi4_neg2>
 730:	0e 94 a5 03 	call	0x74a	; 0x74a <__udivmodhi4>
 734:	07 fc       	sbrc	r0, 7
 736:	05 d0       	rcall	.+10     	; 0x742 <__divmodhi4_neg2>
 738:	3e f4       	brtc	.+14     	; 0x748 <__divmodhi4_exit>

0000073a <__divmodhi4_neg1>:
 73a:	90 95       	com	r25
 73c:	81 95       	neg	r24
 73e:	9f 4f       	sbci	r25, 0xFF	; 255
 740:	08 95       	ret

00000742 <__divmodhi4_neg2>:
 742:	70 95       	com	r23
 744:	61 95       	neg	r22
 746:	7f 4f       	sbci	r23, 0xFF	; 255

00000748 <__divmodhi4_exit>:
 748:	08 95       	ret

0000074a <__udivmodhi4>:
 74a:	aa 1b       	sub	r26, r26
 74c:	bb 1b       	sub	r27, r27
 74e:	51 e1       	ldi	r21, 0x11	; 17
 750:	07 c0       	rjmp	.+14     	; 0x760 <__udivmodhi4_ep>

00000752 <__udivmodhi4_loop>:
 752:	aa 1f       	adc	r26, r26
 754:	bb 1f       	adc	r27, r27
 756:	a6 17       	cp	r26, r22
 758:	b7 07       	cpc	r27, r23
 75a:	10 f0       	brcs	.+4      	; 0x760 <__udivmodhi4_ep>
 75c:	a6 1b       	sub	r26, r22
 75e:	b7 0b       	sbc	r27, r23

00000760 <__udivmodhi4_ep>:
 760:	88 1f       	adc	r24, r24
 762:	99 1f       	adc	r25, r25
 764:	5a 95       	dec	r21
 766:	a9 f7       	brne	.-22     	; 0x752 <__udivmodhi4_loop>
 768:	80 95       	com	r24
 76a:	90 95       	com	r25
 76c:	bc 01       	movw	r22, r24
 76e:	cd 01       	movw	r24, r26
 770:	08 95       	ret

00000772 <_exit>:
 772:	f8 94       	cli

00000774 <__stop_program>:
 774:	ff cf       	rjmp	.-2      	; 0x774 <__stop_program>
