
console.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000381c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019e  00800060  0000381c  000038b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  008001fe  008001fe  00003a4e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003a4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003a80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000488  00000000  00000000  00003abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007907  00000000  00000000  00003f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001bd5  00000000  00000000  0000b84b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004439  00000000  00000000  0000d420  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a50  00000000  00000000  0001185c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d0e  00000000  00000000  000122ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003915  00000000  00000000  00012fba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004e0  00000000  00000000  000168cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__vector_7>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__vector_10>
      2c:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__vector_11>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	92 15       	cp	r25, r2
      56:	9f 15       	cp	r25, r15
      58:	ab 15       	cp	r26, r11
      5a:	b9 15       	cp	r27, r9
      5c:	c5 15       	cp	r28, r5
      5e:	d0 15       	cp	r29, r0
      60:	dd 15       	cp	r29, r13
      62:	e9 15       	cp	r30, r9
      64:	f5 15       	cp	r31, r5
      66:	00 16       	cp	r0, r16
      68:	7b 17       	cp	r23, r27
      6a:	7e 17       	cp	r23, r30
      6c:	81 17       	cp	r24, r17
      6e:	84 17       	cp	r24, r20
      70:	87 17       	cp	r24, r23
      72:	95 17       	cp	r25, r21
      74:	8a 17       	cp	r24, r26
      76:	8d 17       	cp	r24, r29
      78:	90 17       	cp	r25, r16
      7a:	93 17       	cp	r25, r19

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf e5       	ldi	r28, 0x5F	; 95
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e6       	ldi	r26, 0x60	; 96
      8c:	b0 e0       	ldi	r27, 0x00	; 0
      8e:	ec e1       	ldi	r30, 0x1C	; 28
      90:	f8 e3       	ldi	r31, 0x38	; 56
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	ae 3f       	cpi	r26, 0xFE	; 254
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	22 e0       	ldi	r18, 0x02	; 2
      a0:	ae ef       	ldi	r26, 0xFE	; 254
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	aa 33       	cpi	r26, 0x3A	; 58
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <main>
      b2:	0c 94 0c 1c 	jmp	0x3818	; 0x3818 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <INIT_POSITION3>:
};

/*----------------------THE INITIAL POSITION OF CHARACTERS ------------*/
void INIT_POSITION3()
{
	  CLCD_voidSendSpecialChar(customChar13,0,0,15);
      ba:	2f e0       	ldi	r18, 0x0F	; 15
      bc:	40 e0       	ldi	r20, 0x00	; 0
      be:	60 e0       	ldi	r22, 0x00	; 0
      c0:	88 e7       	ldi	r24, 0x78	; 120
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
	  CLCD_voidSendSpecialChar(customChar23,1,0,0);
      c8:	20 e0       	ldi	r18, 0x00	; 0
      ca:	40 e0       	ldi	r20, 0x00	; 0
      cc:	61 e0       	ldi	r22, 0x01	; 1
      ce:	80 e7       	ldi	r24, 0x70	; 112
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
      d6:	08 95       	ret

000000d8 <move_ychar13>:

}
}
void move_ychar13(u8 KEY_VALUE)
{	
	 		 if(KEY_VALUE==3)
      d8:	83 30       	cpi	r24, 0x03	; 3
      da:	21 f5       	brne	.+72     	; 0x124 <move_ychar13+0x4c>
	 		 {
		 		 y3++;
      dc:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <y3>
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	86 0f       	add	r24, r22
      e4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <y3>
		 		 if (y3>15)
      e8:	80 31       	cpi	r24, 0x10	; 16
      ea:	58 f0       	brcs	.+22     	; 0x102 <move_ychar13+0x2a>
		 		 {
			 		 CLCD_voidGoTOxy(x3,15);
      ec:	6f e0       	ldi	r22, 0x0F	; 15
      ee:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <x3>
      f2:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			 		 CLCD_voidSendData(' ');
      f6:	80 e2       	ldi	r24, 0x20	; 32
      f8:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
			 		 y3=0;
      fc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <y3>
     100:	07 c0       	rjmp	.+14     	; 0x110 <move_ychar13+0x38>
		 		 }
		 		 else{
			 		 CLCD_voidGoTOxy(x3,y3-1);
     102:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <x3>
     106:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
		 		 CLCD_voidSendData(' ');}
     10a:	80 e2       	ldi	r24, 0x20	; 32
     10c:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
		 		 CLCD_voidSendSpecialChar(customChar13,0,x3,y3);
     110:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <y3>
     114:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <x3>
     118:	60 e0       	ldi	r22, 0x00	; 0
     11a:	88 e7       	ldi	r24, 0x78	; 120
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
     122:	08 95       	ret
		 		 
	 		 }
	 		 else if (KEY_VALUE == 0)
     124:	81 11       	cpse	r24, r1
     126:	23 c0       	rjmp	.+70     	; 0x16e <move_ychar13+0x96>

	 		 {

		 		 CLCD_voidGoTOxy(x3, y3);
     128:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <y3>
     12c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <x3>
     130:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>

		 		 CLCD_voidSendData(' ');
     134:	80 e2       	ldi	r24, 0x20	; 32
     136:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>

		 		 

		 		 if (y3 == 0)
     13a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <y3>
     13e:	81 11       	cpse	r24, r1
     140:	04 c0       	rjmp	.+8      	; 0x14a <move_ychar13+0x72>

		 		 {

			 		 y3 = 15;
     142:	8f e0       	ldi	r24, 0x0F	; 15
     144:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <y3>
     148:	03 c0       	rjmp	.+6      	; 0x150 <move_ychar13+0x78>

		 		 else

		 		 {

			 		 y3--;
     14a:	81 50       	subi	r24, 0x01	; 1
     14c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <y3>

		 		 }

		 		 

		 		 CLCD_voidGoTOxy(x3, y3);
     150:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <y3>
     154:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <x3>
     158:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>

		 		 CLCD_voidSendSpecialChar(customChar13, 0, x3, y3);
     15c:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <y3>
     160:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <x3>
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	88 e7       	ldi	r24, 0x78	; 120
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
     16e:	08 95       	ret

00000170 <move_xchar13>:
	  CLCD_voidSendSpecialChar(customChar23,1,0,0);
}

/*----------------------CONTROL MOVEMENT OF X IN RAWS ------------*/
void move_xchar13(u8 delay)
{
     170:	cf 93       	push	r28
     172:	c8 2f       	mov	r28, r24
	move_ychar13( KEY_VALUE);
     174:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <KEY_VALUE>
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	0e 94 6c 00 	call	0xd8	; 0xd8 <move_ychar13>
	//GOING DOWN
	if (KEY_VALUE==2)
     17e:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <KEY_VALUE>
     182:	82 30       	cpi	r24, 0x02	; 2
     184:	21 f5       	brne	.+72     	; 0x1ce <move_xchar13+0x5e>
	{
		x3++ ;
     186:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <x3>
     18a:	91 e0       	ldi	r25, 0x01	; 1
     18c:	98 0f       	add	r25, r24
     18e:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <x3>
		
		if(x3>3)
     192:	94 30       	cpi	r25, 0x04	; 4
     194:	58 f0       	brcs	.+22     	; 0x1ac <move_xchar13+0x3c>
		{
			CLCD_voidGoTOxy(3,y3);
     196:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <y3>
     19a:	83 e0       	ldi	r24, 0x03	; 3
     19c:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			CLCD_voidSendData(' ');
     1a0:	80 e2       	ldi	r24, 0x20	; 32
     1a2:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
			x3=0;
     1a6:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <x3>
     1aa:	07 c0       	rjmp	.+14     	; 0x1ba <move_xchar13+0x4a>
		
		}
		else {
			
			CLCD_voidGoTOxy(x3-1,y3);
     1ac:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <y3>
     1b0:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			CLCD_voidSendData(' ');
     1b4:	80 e2       	ldi	r24, 0x20	; 32
     1b6:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>

		}
		CLCD_voidSendSpecialChar(customChar13,0,x3,y3);
     1ba:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <y3>
     1be:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <x3>
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	88 e7       	ldi	r24, 0x78	; 120
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
     1cc:	25 c0       	rjmp	.+74     	; 0x218 <move_xchar13+0xa8>
	}
	
	//GOING UP
	
	else if (KEY_VALUE == 1)
     1ce:	81 30       	cpi	r24, 0x01	; 1
     1d0:	19 f5       	brne	.+70     	; 0x218 <move_xchar13+0xa8>
	{
		CLCD_voidGoTOxy(x3, y3);
     1d2:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <y3>
     1d6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <x3>
     1da:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
		CLCD_voidSendData(' ');
     1de:	80 e2       	ldi	r24, 0x20	; 32
     1e0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
		if (x3 == 0)
     1e4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <x3>
     1e8:	81 11       	cpse	r24, r1
     1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <move_xchar13+0x84>
		{
			x3 = 3;
     1ec:	83 e0       	ldi	r24, 0x03	; 3
     1ee:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <x3>
     1f2:	03 c0       	rjmp	.+6      	; 0x1fa <move_xchar13+0x8a>
		}
		else
		{
			x3--;
     1f4:	81 50       	subi	r24, 0x01	; 1
     1f6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <x3>
		}
		
		CLCD_voidGoTOxy(x3, y3);
     1fa:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <y3>
     1fe:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <x3>
     202:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
		CLCD_voidSendSpecialChar(customChar13, 0, x3, y3);
     206:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <y3>
     20a:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <x3>
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	88 e7       	ldi	r24, 0x78	; 120
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
	}
	u8 delay_temp =delay+30;
     218:	8e e1       	ldi	r24, 0x1E	; 30
     21a:	8c 0f       	add	r24, r28
	TIMER_Delay_ms(delay_temp);
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 5c 05 	call	0xab8	; 0xab8 <TIMER_Delay_ms>
	//char2 movement 
	// GOING DOWN 
	if (KEY_VALUE == 2)
     222:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <KEY_VALUE>
     226:	82 30       	cpi	r24, 0x02	; 2
     228:	21 f5       	brne	.+72     	; 0x272 <move_xchar13+0x102>
	{
		x23++;
     22a:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <x23>
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	98 0f       	add	r25, r24
     232:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <x23>

		if (x23 > 3)
     236:	94 30       	cpi	r25, 0x04	; 4
     238:	58 f0       	brcs	.+22     	; 0x250 <move_xchar13+0xe0>
		{
			CLCD_voidGoTOxy(3, y23);
     23a:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <__data_end>
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			CLCD_voidSendData(' ');
     244:	80 e2       	ldi	r24, 0x20	; 32
     246:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
			x23 = 0;
     24a:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <x23>
     24e:	07 c0       	rjmp	.+14     	; 0x25e <move_xchar13+0xee>
		}
		else
		{
			CLCD_voidGoTOxy(x23 - 1, y23);
     250:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <__data_end>
     254:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			CLCD_voidSendData(' ');
     258:	80 e2       	ldi	r24, 0x20	; 32
     25a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
		}
		CLCD_voidSendSpecialChar(customChar23, 1, x23, y23);
     25e:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <__data_end>
     262:	40 91 ff 01 	lds	r20, 0x01FF	; 0x8001ff <x23>
     266:	61 e0       	ldi	r22, 0x01	; 1
     268:	80 e7       	ldi	r24, 0x70	; 112
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
     270:	25 c0       	rjmp	.+74     	; 0x2bc <move_xchar13+0x14c>
	}

	// GOING UP
	else if (KEY_VALUE == 1)
     272:	81 30       	cpi	r24, 0x01	; 1
     274:	19 f5       	brne	.+70     	; 0x2bc <move_xchar13+0x14c>
	{
		CLCD_voidGoTOxy(x23, y23);
     276:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <__data_end>
     27a:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <x23>
     27e:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
		CLCD_voidSendData(' ');
     282:	80 e2       	ldi	r24, 0x20	; 32
     284:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
		if (x23 == 0)
     288:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <x23>
     28c:	81 11       	cpse	r24, r1
     28e:	04 c0       	rjmp	.+8      	; 0x298 <move_xchar13+0x128>
		{
			x23 = 3;
     290:	83 e0       	ldi	r24, 0x03	; 3
     292:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <x23>
     296:	03 c0       	rjmp	.+6      	; 0x29e <move_xchar13+0x12e>
		}
		else
		{
			x23--;
     298:	81 50       	subi	r24, 0x01	; 1
     29a:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <x23>
		}

		CLCD_voidGoTOxy(x23, y23);
     29e:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <__data_end>
     2a2:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <x23>
     2a6:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
		CLCD_voidSendSpecialChar(customChar23, 1, x23, y23);
     2aa:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <__data_end>
     2ae:	40 91 ff 01 	lds	r20, 0x01FF	; 0x8001ff <x23>
     2b2:	61 e0       	ldi	r22, 0x01	; 1
     2b4:	80 e7       	ldi	r24, 0x70	; 112
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
	}
	KEY_VALUE = 0;
     2bc:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <KEY_VALUE>
}
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <GAME_OVER3>:
	 		 }
}

void GAME_OVER3()
{ 
	CLCD_ClearDisplay();
     2c4:	0e 94 09 05 	call	0xa12	; 0xa12 <CLCD_ClearDisplay>
	TIMER_Delay_ms(10);
     2c8:	8a e0       	ldi	r24, 0x0A	; 10
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	0e 94 5c 05 	call	0xab8	; 0xab8 <TIMER_Delay_ms>
	CLCD_voidGoTOxy(0,4);
     2d0:	64 e0       	ldi	r22, 0x04	; 4
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidPrintString("GAME OVER");
     2d8:	83 ee       	ldi	r24, 0xE3	; 227
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
	CLCD_voidGoTOxy(1,4);
     2e0:	64 e0       	ldi	r22, 0x04	; 4
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidPrintString("SCORE: ");
     2e8:	8d ee       	ldi	r24, 0xED	; 237
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
	CLCD_voidSendNumber(game_time_seconds);
     2f0:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <game_time_seconds>
     2f4:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <game_time_seconds+0x1>
     2f8:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <game_time_seconds+0x2>
     2fc:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <game_time_seconds+0x3>
     300:	0e 94 a9 04 	call	0x952	; 0x952 <CLCD_voidSendNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     304:	2f eb       	ldi	r18, 0xBF	; 191
     306:	8c e5       	ldi	r24, 0x5C	; 92
     308:	95 e1       	ldi	r25, 0x15	; 21
     30a:	21 50       	subi	r18, 0x01	; 1
     30c:	80 40       	sbci	r24, 0x00	; 0
     30e:	90 40       	sbci	r25, 0x00	; 0
     310:	e1 f7       	brne	.-8      	; 0x30a <GAME_OVER3+0x46>
     312:	00 c0       	rjmp	.+0      	; 0x314 <GAME_OVER3+0x50>
     314:	00 00       	nop
	 _delay_ms(7000);
	 	CLCD_ClearDisplay();
     316:	0e 94 09 05 	call	0xa12	; 0xa12 <CLCD_ClearDisplay>
     31a:	08 95       	ret

0000031c <won3>:


void won3()
{
		
		CLCD_ClearDisplay();
     31c:	0e 94 09 05 	call	0xa12	; 0xa12 <CLCD_ClearDisplay>
		TIMER_Delay_ms(10);
     320:	8a e0       	ldi	r24, 0x0A	; 10
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 5c 05 	call	0xab8	; 0xab8 <TIMER_Delay_ms>
		CLCD_voidGoTOxy(0, 4);
     328:	64 e0       	ldi	r22, 0x04	; 4
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
		CLCD_voidPrintString("YOU won!");
     330:	85 ef       	ldi	r24, 0xF5	; 245
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
		CLCD_voidGoTOxy(1, 4);
     338:	64 e0       	ldi	r22, 0x04	; 4
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
		CLCD_voidPrintString("TIME: ");
     340:	8e ef       	ldi	r24, 0xFE	; 254
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
		CLCD_voidSendNumber(game_time_seconds);
     348:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <game_time_seconds>
     34c:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <game_time_seconds+0x1>
     350:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <game_time_seconds+0x2>
     354:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <game_time_seconds+0x3>
     358:	0e 94 a9 04 	call	0x952	; 0x952 <CLCD_voidSendNumber>
	//	SvenSegments_SendNumber(min);
		CLCD_voidGoTOxy(2, 0);
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	82 e0       	ldi	r24, 0x02	; 2
     360:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
		if (min3>game_time_seconds)
     364:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <min3>
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	a0 e0       	ldi	r26, 0x00	; 0
     36c:	b0 e0       	ldi	r27, 0x00	; 0
     36e:	40 91 09 02 	lds	r20, 0x0209	; 0x800209 <game_time_seconds>
     372:	50 91 0a 02 	lds	r21, 0x020A	; 0x80020a <game_time_seconds+0x1>
     376:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <game_time_seconds+0x2>
     37a:	70 91 0c 02 	lds	r23, 0x020C	; 0x80020c <game_time_seconds+0x3>
     37e:	48 17       	cp	r20, r24
     380:	59 07       	cpc	r21, r25
     382:	6a 07       	cpc	r22, r26
     384:	7b 07       	cpc	r23, r27
     386:	50 f4       	brcc	.+20     	; 0x39c <won3+0x80>
		{
			min3=game_time_seconds;
     388:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <game_time_seconds>
     38c:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <game_time_seconds+0x1>
     390:	a0 91 0b 02 	lds	r26, 0x020B	; 0x80020b <game_time_seconds+0x2>
     394:	b0 91 0c 02 	lds	r27, 0x020C	; 0x80020c <game_time_seconds+0x3>
     398:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <min3>
		}	

		CLCD_voidPrintString("mini score: ");
     39c:	85 e0       	ldi	r24, 0x05	; 5
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
		CLCD_voidSendNumber(min3); 
     3a4:	60 91 81 00 	lds	r22, 0x0081	; 0x800081 <min3>
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 a9 04 	call	0x952	; 0x952 <CLCD_voidSendNumber>
	// Display minimum time
		TIMER_Delay_ms(5000);
     3b2:	88 e8       	ldi	r24, 0x88	; 136
     3b4:	93 e1       	ldi	r25, 0x13	; 19
     3b6:	0e 94 5c 05 	call	0xab8	; 0xab8 <TIMER_Delay_ms>
		CLCD_ClearDisplay();
     3ba:	0e 94 09 05 	call	0xa12	; 0xa12 <CLCD_ClearDisplay>
     3be:	08 95       	ret

000003c0 <BUZZ3>:
}



void BUZZ3() {
	SET_BIT(DDRC, 6);
     3c0:	84 b3       	in	r24, 0x14	; 20
     3c2:	80 64       	ori	r24, 0x40	; 64
     3c4:	84 bb       	out	0x14, r24	; 20
	SET_BIT(PORTC, 6);
     3c6:	85 b3       	in	r24, 0x15	; 21
     3c8:	80 64       	ori	r24, 0x40	; 64
     3ca:	85 bb       	out	0x15, r24	; 21
     3cc:	83 ed       	ldi	r24, 0xD3	; 211
     3ce:	90 e3       	ldi	r25, 0x30	; 48
     3d0:	01 97       	sbiw	r24, 0x01	; 1
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <BUZZ3+0x10>
     3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <BUZZ3+0x16>
     3d6:	00 00       	nop
	_delay_ms(50);
	CLEAR_BIT(PORTC, 6);
     3d8:	85 b3       	in	r24, 0x15	; 21
     3da:	8f 7b       	andi	r24, 0xBF	; 191
     3dc:	85 bb       	out	0x15, r24	; 21
     3de:	08 95       	ret

000003e0 <BUZZ23>:
}

void BUZZ23() {
	SET_BIT(DDRC, 6);
     3e0:	84 b3       	in	r24, 0x14	; 20
     3e2:	80 64       	ori	r24, 0x40	; 64
     3e4:	84 bb       	out	0x14, r24	; 20
	SET_BIT(PORTC,6);
     3e6:	85 b3       	in	r24, 0x15	; 21
     3e8:	80 64       	ori	r24, 0x40	; 64
     3ea:	85 bb       	out	0x15, r24	; 21
     3ec:	2f e3       	ldi	r18, 0x3F	; 63
     3ee:	8d e0       	ldi	r24, 0x0D	; 13
     3f0:	93 e0       	ldi	r25, 0x03	; 3
     3f2:	21 50       	subi	r18, 0x01	; 1
     3f4:	80 40       	sbci	r24, 0x00	; 0
     3f6:	90 40       	sbci	r25, 0x00	; 0
     3f8:	e1 f7       	brne	.-8      	; 0x3f2 <BUZZ23+0x12>
     3fa:	00 c0       	rjmp	.+0      	; 0x3fc <BUZZ23+0x1c>
     3fc:	00 00       	nop
	_delay_ms(1000);
	CLEAR_BIT(PORTC, 6);
     3fe:	85 b3       	in	r24, 0x15	; 21
     400:	8f 7b       	andi	r24, 0xBF	; 191
     402:	85 bb       	out	0x15, r24	; 21
     404:	08 95       	ret

00000406 <point3>:
	}
	KEY_VALUE = 0;
}

u8 point3(u8 copy_x2,u8 delay)
{
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	c8 2f       	mov	r28, r24
     40c:	d6 2f       	mov	r29, r22
	BUZZ3();
     40e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <BUZZ3>
	for ( i = 1; i < 16; i++)
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <i+0x1>
     41a:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <i>
     41e:	8e c0       	rjmp	.+284    	; 0x53c <point3+0x136>
	{
				if(	x23==x3&& y3==y23 )
     420:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <x23>
     424:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <x3>
     428:	98 13       	cpse	r25, r24
     42a:	29 c0       	rjmp	.+82     	; 0x47e <point3+0x78>
     42c:	40 91 80 00 	lds	r20, 0x0080	; 0x800080 <y3>
     430:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <__data_end>
     434:	49 13       	cpse	r20, r25
     436:	23 c0       	rjmp	.+70     	; 0x47e <point3+0x78>
				{BUZZ23();
     438:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <BUZZ23>
					move_xchar13(delay);
     43c:	8d 2f       	mov	r24, r29
     43e:	0e 94 b8 00 	call	0x170	; 0x170 <move_xchar13>
					CLCD_voidGoTOxy(x23,y23);
     442:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <__data_end>
     446:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <x23>
     44a:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
					CLCD_voidSendSpecialChar(customChar33,3,x23,y23);
     44e:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <__data_end>
     452:	40 91 ff 01 	lds	r20, 0x01FF	; 0x8001ff <x23>
     456:	63 e0       	ldi	r22, 0x03	; 3
     458:	88 e6       	ldi	r24, 0x68	; 104
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
					game_over_flag3 = 1;
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <game_over_flag3>
     466:	2f eb       	ldi	r18, 0xBF	; 191
     468:	87 e2       	ldi	r24, 0x27	; 39
     46a:	99 e0       	ldi	r25, 0x09	; 9
     46c:	21 50       	subi	r18, 0x01	; 1
     46e:	80 40       	sbci	r24, 0x00	; 0
     470:	90 40       	sbci	r25, 0x00	; 0
     472:	e1 f7       	brne	.-8      	; 0x46c <point3+0x66>
     474:	00 c0       	rjmp	.+0      	; 0x476 <point3+0x70>
     476:	00 00       	nop
					_delay_ms(3000);
					won3();
     478:	0e 94 8e 01 	call	0x31c	; 0x31c <won3>
					break;
     47c:	67 c0       	rjmp	.+206    	; 0x54c <point3+0x146>
				}
			if (copy_x2 == x3 && i == y3 )
     47e:	8c 13       	cpse	r24, r28
     480:	22 c0       	rjmp	.+68     	; 0x4c6 <point3+0xc0>
     482:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <y3>
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	28 17       	cp	r18, r24
     48a:	39 07       	cpc	r19, r25
     48c:	e1 f4       	brne	.+56     	; 0x4c6 <point3+0xc0>
			{BUZZ23();
     48e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <BUZZ23>
				move_xchar13(delay);
     492:	8d 2f       	mov	r24, r29
     494:	0e 94 b8 00 	call	0x170	; 0x170 <move_xchar13>
				CLCD_voidSendSpecialChar(customChar33,3,x3,y3);
     498:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <y3>
     49c:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <x3>
     4a0:	63 e0       	ldi	r22, 0x03	; 3
     4a2:	88 e6       	ldi	r24, 0x68	; 104
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
				game_over_flag3 = 1;
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <game_over_flag3>
     4b0:	2f eb       	ldi	r18, 0xBF	; 191
     4b2:	87 e2       	ldi	r24, 0x27	; 39
     4b4:	99 e0       	ldi	r25, 0x09	; 9
     4b6:	21 50       	subi	r18, 0x01	; 1
     4b8:	80 40       	sbci	r24, 0x00	; 0
     4ba:	90 40       	sbci	r25, 0x00	; 0
     4bc:	e1 f7       	brne	.-8      	; 0x4b6 <point3+0xb0>
     4be:	00 c0       	rjmp	.+0      	; 0x4c0 <point3+0xba>
     4c0:	00 00       	nop
				_delay_ms(3000);
				GAME_OVER3();
     4c2:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GAME_OVER3>
			}
			
	
		
		if (i != 1)
     4c6:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <i>
     4ca:	70 91 36 02 	lds	r23, 0x0236	; 0x800236 <i+0x1>
     4ce:	61 30       	cpi	r22, 0x01	; 1
     4d0:	71 05       	cpc	r23, r1
     4d2:	f1 f0       	breq	.+60     	; 0x510 <point3+0x10a>
		{
			CLCD_voidGoTOxy(copy_x2, i - 1);
     4d4:	61 50       	subi	r22, 0x01	; 1
     4d6:	8c 2f       	mov	r24, r28
     4d8:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			CLCD_voidSendData(' ');
     4dc:	80 e2       	ldi	r24, 0x20	; 32
     4de:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
			CLCD_voidSendSpecialChar(shot3, 2, copy_x2, i);
     4e2:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <i>
     4e6:	4c 2f       	mov	r20, r28
     4e8:	62 e0       	ldi	r22, 0x02	; 2
     4ea:	80 e6       	ldi	r24, 0x60	; 96
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
		
			// Check for key press and break the loop if a key is pressed
			KEY_VALUE = key();
     4f2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <key>
     4f6:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <KEY_VALUE>
        	if (KEY_VALUE != 0xff){BUZZ3();move_xchar13(delay); }
     4fa:	8f 3f       	cpi	r24, 0xFF	; 255
     4fc:	29 f0       	breq	.+10     	; 0x508 <point3+0x102>
     4fe:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <BUZZ3>
     502:	8d 2f       	mov	r24, r29
     504:	0e 94 b8 00 	call	0x170	; 0x170 <move_xchar13>
			TIMER_Delay_ms(delay);
     508:	8d 2f       	mov	r24, r29
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 5c 05 	call	0xab8	; 0xab8 <TIMER_Delay_ms>
		}
		if (i==15)
     510:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <i>
     514:	70 91 36 02 	lds	r23, 0x0236	; 0x800236 <i+0x1>
     518:	6f 30       	cpi	r22, 0x0F	; 15
     51a:	71 05       	cpc	r23, r1
     51c:	31 f4       	brne	.+12     	; 0x52a <point3+0x124>
		{
			CLCD_voidGoTOxy(copy_x2,i);
     51e:	8c 2f       	mov	r24, r28
     520:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			CLCD_voidSendData(' ');
     524:	80 e2       	ldi	r24, 0x20	; 32
     526:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
}

u8 point3(u8 copy_x2,u8 delay)
{
	BUZZ3();
	for ( i = 1; i < 16; i++)
     52a:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <i>
     52e:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <i+0x1>
     532:	01 96       	adiw	r24, 0x01	; 1
     534:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <i+0x1>
     538:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <i>
     53c:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <i>
     540:	30 91 36 02 	lds	r19, 0x0236	; 0x800236 <i+0x1>
     544:	20 31       	cpi	r18, 0x10	; 16
     546:	31 05       	cpc	r19, r1
     548:	0c f4       	brge	.+2      	; 0x54c <point3+0x146>
     54a:	6a cf       	rjmp	.-300    	; 0x420 <point3+0x1a>
			CLCD_voidGoTOxy(copy_x2,i);
			CLCD_voidSendData(' ');
		}
		
	}
}
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	08 95       	ret

00000552 <game3>:

void game3()
{ 
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
	if(game_End3==0)
     556:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <game_End3>
     55a:	81 11       	cpse	r24, r1
     55c:	68 c0       	rjmp	.+208    	; 0x62e <game3+0xdc>
	{
		
	
	u8 current_score = game_time_seconds;
     55e:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <game_time_seconds>
     562:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <game_time_seconds+0x1>
     566:	a0 91 0b 02 	lds	r26, 0x020B	; 0x80020b <game_time_seconds+0x2>
     56a:	b0 91 0c 02 	lds	r27, 0x020C	; 0x80020c <game_time_seconds+0x3>

	if (current_score > max3)
     56e:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <max3>
     572:	28 17       	cp	r18, r24
     574:	10 f4       	brcc	.+4      	; 0x57a <game3+0x28>
	{
		max3 = current_score;
     576:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <max3>
	}
	if (out_flag3==1)
     57a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <out_flag3>
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	31 f4       	brne	.+12     	; 0x58e <game3+0x3c>
	{
		CLCD_ClearDisplay();
     582:	0e 94 09 05 	call	0xa12	; 0xa12 <CLCD_ClearDisplay>
		game_End3=1;
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <game_End3>
		return 1;
     58c:	50 c0       	rjmp	.+160    	; 0x62e <game3+0xdc>
	}
	if (game_over_flag3 == 1)
     58e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <game_over_flag3>
     592:	81 30       	cpi	r24, 0x01	; 1
     594:	89 f4       	brne	.+34     	; 0x5b8 <game3+0x66>
	{
		game_over_flag3 = 0;
     596:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <game_over_flag3>
		i=1,x3=0,y3=15,x23=0,y23=0;
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <i+0x1>
     5a2:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <i>
     5a6:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <x3>
     5aa:	8f e0       	ldi	r24, 0x0F	; 15
     5ac:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <y3>
     5b0:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <x23>
     5b4:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <__data_end>
		
		// Game over condition is met, exit the game loop
		//return 1;
	}
	 game_time_seconds=0;
     5b8:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <game_time_seconds>
     5bc:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <game_time_seconds+0x1>
     5c0:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <game_time_seconds+0x2>
     5c4:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <game_time_seconds+0x3>
	CLCD_voidGoTOxy(0,0);
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidPrintString("WELCOME,Cow boy");
     5d0:	82 e1       	ldi	r24, 0x12	; 18
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
	CLCD_voidGoTOxy(1,3);
     5d8:	63 e0       	ldi	r22, 0x03	; 3
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidPrintString("1 TO START");
     5e0:	82 e2       	ldi	r24, 0x22	; 34
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
	CLCD_voidGoTOxy(2,3);
     5e8:	63 e0       	ldi	r22, 0x03	; 3
     5ea:	82 e0       	ldi	r24, 0x02	; 2
     5ec:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidPrintString("5 TO Out");
     5f0:	8d e2       	ldi	r24, 0x2D	; 45
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
	u8 KPDVALUE=key();
     5f8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <key>
     5fc:	d8 2f       	mov	r29, r24
	 if (KPDVALUE==0)
     5fe:	81 11       	cpse	r24, r1
     600:	11 c0       	rjmp	.+34     	; 0x624 <game3+0xd2>
	{
		CLCD_ClearDisplay();
     602:	0e 94 09 05 	call	0xa12	; 0xa12 <CLCD_ClearDisplay>
		INIT_POSITION3();
     606:	0e 94 5d 00 	call	0xba	; 0xba <INIT_POSITION3>
		u8 level_up=0;
     60a:	c0 e0       	ldi	r28, 0x00	; 0
		while (1)
		{
			// Check the game_over_flag
			if (game_over_flag3 == 1)
     60c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <game_over_flag3>
     610:	81 30       	cpi	r24, 0x01	; 1
     612:	41 f0       	breq	.+16     	; 0x624 <game3+0xd2>
			{
				// Game over condition is met, exit the game loop
				break;
			}
			point3(x23,100-level_up);
     614:	64 e6       	ldi	r22, 0x64	; 100
     616:	6c 1b       	sub	r22, r28
     618:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <x23>
     61c:	0e 94 03 02 	call	0x406	; 0x406 <point3>
			level_up=level_up+1;
     620:	cf 5f       	subi	r28, 0xFF	; 255
			game_End3==1;
		}
     622:	f4 cf       	rjmp	.-24     	; 0x60c <game3+0xba>
		game_End3==1;	
	}
	 if (KPDVALUE==4)
     624:	d4 30       	cpi	r29, 0x04	; 4
     626:	19 f4       	brne	.+6      	; 0x62e <game3+0xdc>
	 {out_flag3=1;}
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <out_flag3>
	

}
}
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <COW_BOY2>:
}

void COW_BOY2()
{
	
		TIMER1_Init();
     634:	0e 94 4d 05 	call	0xa9a	; 0xa9a <TIMER1_Init>
		TIMER0_Init();
     638:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <TIMER0_Init>
		sei();
     63c:	78 94       	sei
			
		while (game_End3==0)
     63e:	02 c0       	rjmp	.+4      	; 0x644 <COW_BOY2+0x10>
		{

			game3();
     640:	0e 94 a9 02 	call	0x552	; 0x552 <game3>
	
		TIMER1_Init();
		TIMER0_Init();
		sei();
			
		while (game_End3==0)
     644:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <game_End3>
     648:	88 23       	and	r24, r24
     64a:	d1 f3       	breq	.-12     	; 0x640 <COW_BOY2+0xc>
		{

			game3();
		}
}
     64c:	08 95       	ret

0000064e <Buzzer_Enable>:
	DIO_u8SetPinDir(Buzzer_Port,Buzzer_Pin,DIO_PIN_OUT);
}

void Buzzer_Enable(u8 Tone_Type)
{
	switch(Tone_Type)
     64e:	82 30       	cpi	r24, 0x02	; 2
     650:	09 f4       	brne	.+2      	; 0x654 <Buzzer_Enable+0x6>
     652:	59 c0       	rjmp	.+178    	; 0x706 <Buzzer_Enable+0xb8>
     654:	28 f4       	brcc	.+10     	; 0x660 <Buzzer_Enable+0x12>
     656:	88 23       	and	r24, r24
     658:	c1 f0       	breq	.+48     	; 0x68a <Buzzer_Enable+0x3c>
     65a:	81 30       	cpi	r24, 0x01	; 1
     65c:	a9 f1       	breq	.+106    	; 0x6c8 <Buzzer_Enable+0x7a>
     65e:	08 95       	ret
     660:	84 30       	cpi	r24, 0x04	; 4
     662:	09 f4       	brne	.+2      	; 0x666 <Buzzer_Enable+0x18>
     664:	8e c0       	rjmp	.+284    	; 0x782 <Buzzer_Enable+0x134>
     666:	08 f4       	brcc	.+2      	; 0x66a <Buzzer_Enable+0x1c>
     668:	6d c0       	rjmp	.+218    	; 0x744 <Buzzer_Enable+0xf6>
     66a:	85 30       	cpi	r24, 0x05	; 5
     66c:	09 f4       	brne	.+2      	; 0x670 <Buzzer_Enable+0x22>
     66e:	f3 c0       	rjmp	.+486    	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     670:	08 95       	ret
	{
		case 0:
				for(u8 i=0;i<250;i++)
				{
					TOGGLE_BIT(PORTB,PB3);
     672:	28 b3       	in	r18, 0x18	; 24
     674:	88 e0       	ldi	r24, 0x08	; 8
     676:	82 27       	eor	r24, r18
     678:	88 bb       	out	0x18, r24	; 24
     67a:	e7 ee       	ldi	r30, 0xE7	; 231
     67c:	f3 e0       	ldi	r31, 0x03	; 3
     67e:	31 97       	sbiw	r30, 0x01	; 1
     680:	f1 f7       	brne	.-4      	; 0x67e <Buzzer_Enable+0x30>
     682:	00 c0       	rjmp	.+0      	; 0x684 <Buzzer_Enable+0x36>
     684:	00 00       	nop
void Buzzer_Enable(u8 Tone_Type)
{
	switch(Tone_Type)
	{
		case 0:
				for(u8 i=0;i<250;i++)
     686:	9f 5f       	subi	r25, 0xFF	; 255
     688:	01 c0       	rjmp	.+2      	; 0x68c <Buzzer_Enable+0x3e>
	DIO_u8SetPinDir(Buzzer_Port,Buzzer_Pin,DIO_PIN_OUT);
}

void Buzzer_Enable(u8 Tone_Type)
{
	switch(Tone_Type)
     68a:	90 e0       	ldi	r25, 0x00	; 0
	{
		case 0:
				for(u8 i=0;i<250;i++)
     68c:	9a 3f       	cpi	r25, 0xFA	; 250
     68e:	88 f3       	brcs	.-30     	; 0x672 <Buzzer_Enable+0x24>
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0b c0       	rjmp	.+22     	; 0x6aa <Buzzer_Enable+0x5c>
					TOGGLE_BIT(PORTB,PB3);
					_delay_ms(0.5);
				}
				for(u8 i=0;i<250;i++)
				{
					TOGGLE_BIT(PORTB,PB3);
     694:	28 b3       	in	r18, 0x18	; 24
     696:	88 e0       	ldi	r24, 0x08	; 8
     698:	82 27       	eor	r24, r18
     69a:	88 bb       	out	0x18, r24	; 24
     69c:	ef e1       	ldi	r30, 0x1F	; 31
     69e:	f3 e0       	ldi	r31, 0x03	; 3
     6a0:	31 97       	sbiw	r30, 0x01	; 1
     6a2:	f1 f7       	brne	.-4      	; 0x6a0 <Buzzer_Enable+0x52>
     6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <Buzzer_Enable+0x58>
     6a6:	00 00       	nop
				for(u8 i=0;i<250;i++)
				{
					TOGGLE_BIT(PORTB,PB3);
					_delay_ms(0.5);
				}
				for(u8 i=0;i<250;i++)
     6a8:	9f 5f       	subi	r25, 0xFF	; 255
     6aa:	9a 3f       	cpi	r25, 0xFA	; 250
     6ac:	98 f3       	brcs	.-26     	; 0x694 <Buzzer_Enable+0x46>
     6ae:	08 95       	ret
		break;
		
		case 1:
		for(u8 i=0;i<250;i++)
		{
			TOGGLE_BIT(PORTB,PB3);
     6b0:	28 b3       	in	r18, 0x18	; 24
     6b2:	88 e0       	ldi	r24, 0x08	; 8
     6b4:	82 27       	eor	r24, r18
     6b6:	88 bb       	out	0x18, r24	; 24
     6b8:	e7 ee       	ldi	r30, 0xE7	; 231
     6ba:	f3 e0       	ldi	r31, 0x03	; 3
     6bc:	31 97       	sbiw	r30, 0x01	; 1
     6be:	f1 f7       	brne	.-4      	; 0x6bc <Buzzer_Enable+0x6e>
     6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <Buzzer_Enable+0x74>
     6c2:	00 00       	nop
					_delay_ms(0.4);
				}
		break;
		
		case 1:
		for(u8 i=0;i<250;i++)
     6c4:	9f 5f       	subi	r25, 0xFF	; 255
     6c6:	01 c0       	rjmp	.+2      	; 0x6ca <Buzzer_Enable+0x7c>
	DIO_u8SetPinDir(Buzzer_Port,Buzzer_Pin,DIO_PIN_OUT);
}

void Buzzer_Enable(u8 Tone_Type)
{
	switch(Tone_Type)
     6c8:	90 e0       	ldi	r25, 0x00	; 0
					_delay_ms(0.4);
				}
		break;
		
		case 1:
		for(u8 i=0;i<250;i++)
     6ca:	9a 3f       	cpi	r25, 0xFA	; 250
     6cc:	88 f3       	brcs	.-30     	; 0x6b0 <Buzzer_Enable+0x62>
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	0b c0       	rjmp	.+22     	; 0x6e8 <Buzzer_Enable+0x9a>
			TOGGLE_BIT(PORTB,PB3);
			_delay_ms(0.5);
		}
		for(u8 i=0;i<250;i++)
		{
			TOGGLE_BIT(PORTB,PB3);
     6d2:	28 b3       	in	r18, 0x18	; 24
     6d4:	88 e0       	ldi	r24, 0x08	; 8
     6d6:	82 27       	eor	r24, r18
     6d8:	88 bb       	out	0x18, r24	; 24
     6da:	e7 e5       	ldi	r30, 0x57	; 87
     6dc:	f2 e0       	ldi	r31, 0x02	; 2
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	f1 f7       	brne	.-4      	; 0x6de <Buzzer_Enable+0x90>
     6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <Buzzer_Enable+0x96>
     6e4:	00 00       	nop
		for(u8 i=0;i<250;i++)
		{
			TOGGLE_BIT(PORTB,PB3);
			_delay_ms(0.5);
		}
		for(u8 i=0;i<250;i++)
     6e6:	9f 5f       	subi	r25, 0xFF	; 255
     6e8:	9a 3f       	cpi	r25, 0xFA	; 250
     6ea:	98 f3       	brcs	.-26     	; 0x6d2 <Buzzer_Enable+0x84>
     6ec:	08 95       	ret
		break;
		
		case 2:
		for(u8 i=0;i<250;i++)
		{
			TOGGLE_BIT(PORTB,PB3);
     6ee:	28 b3       	in	r18, 0x18	; 24
     6f0:	88 e0       	ldi	r24, 0x08	; 8
     6f2:	82 27       	eor	r24, r18
     6f4:	88 bb       	out	0x18, r24	; 24
     6f6:	e7 ee       	ldi	r30, 0xE7	; 231
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	31 97       	sbiw	r30, 0x01	; 1
     6fc:	f1 f7       	brne	.-4      	; 0x6fa <Buzzer_Enable+0xac>
     6fe:	00 c0       	rjmp	.+0      	; 0x700 <Buzzer_Enable+0xb2>
     700:	00 00       	nop
			_delay_ms(0.3);
		}
		break;
		
		case 2:
		for(u8 i=0;i<250;i++)
     702:	9f 5f       	subi	r25, 0xFF	; 255
     704:	01 c0       	rjmp	.+2      	; 0x708 <Buzzer_Enable+0xba>
	DIO_u8SetPinDir(Buzzer_Port,Buzzer_Pin,DIO_PIN_OUT);
}

void Buzzer_Enable(u8 Tone_Type)
{
	switch(Tone_Type)
     706:	90 e0       	ldi	r25, 0x00	; 0
			_delay_ms(0.3);
		}
		break;
		
		case 2:
		for(u8 i=0;i<250;i++)
     708:	9a 3f       	cpi	r25, 0xFA	; 250
     70a:	88 f3       	brcs	.-30     	; 0x6ee <Buzzer_Enable+0xa0>
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0b c0       	rjmp	.+22     	; 0x726 <Buzzer_Enable+0xd8>
			TOGGLE_BIT(PORTB,PB3);
			_delay_ms(0.5);
		}
		for(u8 i=0;i<250;i++)
		{
			TOGGLE_BIT(PORTB,PB3);
     710:	28 b3       	in	r18, 0x18	; 24
     712:	88 e0       	ldi	r24, 0x08	; 8
     714:	82 27       	eor	r24, r18
     716:	88 bb       	out	0x18, r24	; 24
     718:	ef e8       	ldi	r30, 0x8F	; 143
     71a:	f1 e0       	ldi	r31, 0x01	; 1
     71c:	31 97       	sbiw	r30, 0x01	; 1
     71e:	f1 f7       	brne	.-4      	; 0x71c <Buzzer_Enable+0xce>
     720:	00 c0       	rjmp	.+0      	; 0x722 <Buzzer_Enable+0xd4>
     722:	00 00       	nop
		for(u8 i=0;i<250;i++)
		{
			TOGGLE_BIT(PORTB,PB3);
			_delay_ms(0.5);
		}
		for(u8 i=0;i<250;i++)
     724:	9f 5f       	subi	r25, 0xFF	; 255
     726:	9a 3f       	cpi	r25, 0xFA	; 250
     728:	98 f3       	brcs	.-26     	; 0x710 <Buzzer_Enable+0xc2>
     72a:	08 95       	ret
		break;
		
		case 3:
		for(u8 i=0;i<250;i++)
		{
			TOGGLE_BIT(PORTB,PB3);
     72c:	28 b3       	in	r18, 0x18	; 24
     72e:	88 e0       	ldi	r24, 0x08	; 8
     730:	82 27       	eor	r24, r18
     732:	88 bb       	out	0x18, r24	; 24
     734:	e7 ee       	ldi	r30, 0xE7	; 231
     736:	f3 e0       	ldi	r31, 0x03	; 3
     738:	31 97       	sbiw	r30, 0x01	; 1
     73a:	f1 f7       	brne	.-4      	; 0x738 <Buzzer_Enable+0xea>
     73c:	00 c0       	rjmp	.+0      	; 0x73e <Buzzer_Enable+0xf0>
     73e:	00 00       	nop
			_delay_ms(0.2);
		}
		break;
		
		case 3:
		for(u8 i=0;i<250;i++)
     740:	9f 5f       	subi	r25, 0xFF	; 255
     742:	01 c0       	rjmp	.+2      	; 0x746 <Buzzer_Enable+0xf8>
	DIO_u8SetPinDir(Buzzer_Port,Buzzer_Pin,DIO_PIN_OUT);
}

void Buzzer_Enable(u8 Tone_Type)
{
	switch(Tone_Type)
     744:	90 e0       	ldi	r25, 0x00	; 0
			_delay_ms(0.2);
		}
		break;
		
		case 3:
		for(u8 i=0;i<250;i++)
     746:	9a 3f       	cpi	r25, 0xFA	; 250
     748:	88 f3       	brcs	.-30     	; 0x72c <Buzzer_Enable+0xde>
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0b c0       	rjmp	.+22     	; 0x764 <Buzzer_Enable+0x116>
			TOGGLE_BIT(PORTB,PB3);
			_delay_ms(0.5);
		}
		for(u8 i=0;i<250;i++)
		{
			TOGGLE_BIT(PORTB,PB3);
     74e:	28 b3       	in	r18, 0x18	; 24
     750:	88 e0       	ldi	r24, 0x08	; 8
     752:	82 27       	eor	r24, r18
     754:	88 bb       	out	0x18, r24	; 24
     756:	e7 ec       	ldi	r30, 0xC7	; 199
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	31 97       	sbiw	r30, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <Buzzer_Enable+0x10c>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <Buzzer_Enable+0x112>
     760:	00 00       	nop
		for(u8 i=0;i<250;i++)
		{
			TOGGLE_BIT(PORTB,PB3);
			_delay_ms(0.5);
		}
		for(u8 i=0;i<250;i++)
     762:	9f 5f       	subi	r25, 0xFF	; 255
     764:	9a 3f       	cpi	r25, 0xFA	; 250
     766:	98 f3       	brcs	.-26     	; 0x74e <Buzzer_Enable+0x100>
     768:	08 95       	ret
		break;
				
		case 4:
			for(u8 i=0;i<250;i++)
			{
				TOGGLE_BIT(PORTB,PB3);
     76a:	28 b3       	in	r18, 0x18	; 24
     76c:	88 e0       	ldi	r24, 0x08	; 8
     76e:	82 27       	eor	r24, r18
     770:	88 bb       	out	0x18, r24	; 24
     772:	e7 ee       	ldi	r30, 0xE7	; 231
     774:	f3 e0       	ldi	r31, 0x03	; 3
     776:	31 97       	sbiw	r30, 0x01	; 1
     778:	f1 f7       	brne	.-4      	; 0x776 <Buzzer_Enable+0x128>
     77a:	00 c0       	rjmp	.+0      	; 0x77c <Buzzer_Enable+0x12e>
     77c:	00 00       	nop
			_delay_ms(0.1);
		}
		break;
				
		case 4:
			for(u8 i=0;i<250;i++)
     77e:	9f 5f       	subi	r25, 0xFF	; 255
     780:	01 c0       	rjmp	.+2      	; 0x784 <Buzzer_Enable+0x136>
	DIO_u8SetPinDir(Buzzer_Port,Buzzer_Pin,DIO_PIN_OUT);
}

void Buzzer_Enable(u8 Tone_Type)
{
	switch(Tone_Type)
     782:	90 e0       	ldi	r25, 0x00	; 0
			_delay_ms(0.1);
		}
		break;
				
		case 4:
			for(u8 i=0;i<250;i++)
     784:	9a 3f       	cpi	r25, 0xFA	; 250
     786:	88 f3       	brcs	.-30     	; 0x76a <Buzzer_Enable+0x11c>
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	0b c0       	rjmp	.+22     	; 0x7a2 <Buzzer_Enable+0x154>
				TOGGLE_BIT(PORTB,PB3);
				_delay_ms(0.5);
			}
			for(u8 i=0;i<250;i++)
			{
				TOGGLE_BIT(PORTB,PB3);
     78c:	28 b3       	in	r18, 0x18	; 24
     78e:	88 e0       	ldi	r24, 0x08	; 8
     790:	82 27       	eor	r24, r18
     792:	88 bb       	out	0x18, r24	; 24
     794:	ef e1       	ldi	r30, 0x1F	; 31
     796:	f3 e0       	ldi	r31, 0x03	; 3
     798:	31 97       	sbiw	r30, 0x01	; 1
     79a:	f1 f7       	brne	.-4      	; 0x798 <Buzzer_Enable+0x14a>
     79c:	00 c0       	rjmp	.+0      	; 0x79e <Buzzer_Enable+0x150>
     79e:	00 00       	nop
			for(u8 i=0;i<250;i++)
			{
				TOGGLE_BIT(PORTB,PB3);
				_delay_ms(0.5);
			}
			for(u8 i=0;i<250;i++)
     7a0:	9f 5f       	subi	r25, 0xFF	; 255
     7a2:	9a 3f       	cpi	r25, 0xFA	; 250
     7a4:	98 f3       	brcs	.-26     	; 0x78c <Buzzer_Enable+0x13e>
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	0b c0       	rjmp	.+22     	; 0x7c0 <Buzzer_Enable+0x172>
			}
			
			
			for(u8 i=0;i<250;i++)
			{
				TOGGLE_BIT(PORTB,PB3);
     7aa:	28 b3       	in	r18, 0x18	; 24
     7ac:	88 e0       	ldi	r24, 0x08	; 8
     7ae:	82 27       	eor	r24, r18
     7b0:	88 bb       	out	0x18, r24	; 24
     7b2:	e7 ee       	ldi	r30, 0xE7	; 231
     7b4:	f3 e0       	ldi	r31, 0x03	; 3
     7b6:	31 97       	sbiw	r30, 0x01	; 1
     7b8:	f1 f7       	brne	.-4      	; 0x7b6 <Buzzer_Enable+0x168>
     7ba:	00 c0       	rjmp	.+0      	; 0x7bc <Buzzer_Enable+0x16e>
     7bc:	00 00       	nop
				TOGGLE_BIT(PORTB,PB3);
				_delay_ms(0.4);
			}
			
			
			for(u8 i=0;i<250;i++)
     7be:	9f 5f       	subi	r25, 0xFF	; 255
     7c0:	9a 3f       	cpi	r25, 0xFA	; 250
     7c2:	98 f3       	brcs	.-26     	; 0x7aa <Buzzer_Enable+0x15c>
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0b c0       	rjmp	.+22     	; 0x7de <Buzzer_Enable+0x190>
				TOGGLE_BIT(PORTB,PB3);
				_delay_ms(0.5);
			}
			for(u8 i=0;i<250;i++)
			{
				TOGGLE_BIT(PORTB,PB3);
     7c8:	28 b3       	in	r18, 0x18	; 24
     7ca:	88 e0       	ldi	r24, 0x08	; 8
     7cc:	82 27       	eor	r24, r18
     7ce:	88 bb       	out	0x18, r24	; 24
     7d0:	e7 e5       	ldi	r30, 0x57	; 87
     7d2:	f2 e0       	ldi	r31, 0x02	; 2
     7d4:	31 97       	sbiw	r30, 0x01	; 1
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <Buzzer_Enable+0x186>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <Buzzer_Enable+0x18c>
     7da:	00 00       	nop
			for(u8 i=0;i<250;i++)
			{
				TOGGLE_BIT(PORTB,PB3);
				_delay_ms(0.5);
			}
			for(u8 i=0;i<250;i++)
     7dc:	9f 5f       	subi	r25, 0xFF	; 255
     7de:	9a 3f       	cpi	r25, 0xFA	; 250
     7e0:	98 f3       	brcs	.-26     	; 0x7c8 <Buzzer_Enable+0x17a>
     7e2:	08 95       	ret
		case 5:
			for (int i=0;i<10;i++)// Loser
			{
				for(u8 i=0;i<250;i++)
				{
					TOGGLE_BIT(PORTB,PB3);
     7e4:	28 b3       	in	r18, 0x18	; 24
     7e6:	88 e0       	ldi	r24, 0x08	; 8
     7e8:	82 27       	eor	r24, r18
     7ea:	88 bb       	out	0x18, r24	; 24
     7ec:	ef e1       	ldi	r30, 0x1F	; 31
     7ee:	f3 e0       	ldi	r31, 0x03	; 3
     7f0:	31 97       	sbiw	r30, 0x01	; 1
     7f2:	f1 f7       	brne	.-4      	; 0x7f0 <Buzzer_Enable+0x1a2>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <Buzzer_Enable+0x1a8>
     7f6:	00 00       	nop
		break;
		
		case 5:
			for (int i=0;i<10;i++)// Loser
			{
				for(u8 i=0;i<250;i++)
     7f8:	9f 5f       	subi	r25, 0xFF	; 255
     7fa:	01 c0       	rjmp	.+2      	; 0x7fe <Buzzer_Enable+0x1b0>
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	9a 3f       	cpi	r25, 0xFA	; 250
     800:	88 f3       	brcs	.-30     	; 0x7e4 <Buzzer_Enable+0x196>
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0b c0       	rjmp	.+22     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
					TOGGLE_BIT(PORTB,PB3);
					_delay_ms(0.4);
				}
				for(u8 i=0;i<250;i++)
				{
					TOGGLE_BIT(PORTB,PB3);
     806:	28 b3       	in	r18, 0x18	; 24
     808:	88 e0       	ldi	r24, 0x08	; 8
     80a:	82 27       	eor	r24, r18
     80c:	88 bb       	out	0x18, r24	; 24
     80e:	e7 ec       	ldi	r30, 0xC7	; 199
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	31 97       	sbiw	r30, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     816:	00 c0       	rjmp	.+0      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     818:	00 00       	nop
				for(u8 i=0;i<250;i++)
				{
					TOGGLE_BIT(PORTB,PB3);
					_delay_ms(0.4);
				}
				for(u8 i=0;i<250;i++)
     81a:	9f 5f       	subi	r25, 0xFF	; 255
     81c:	9a 3f       	cpi	r25, 0xFA	; 250
     81e:	98 f3       	brcs	.-26     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0b c0       	rjmp	.+22     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
					TOGGLE_BIT(PORTB,PB3);
					_delay_ms(0.1);
				}
				for(u8 i=0;i<250;i++)
				{
					TOGGLE_BIT(PORTB,PB3);
     824:	28 b3       	in	r18, 0x18	; 24
     826:	88 e0       	ldi	r24, 0x08	; 8
     828:	82 27       	eor	r24, r18
     82a:	88 bb       	out	0x18, r24	; 24
     82c:	ef e1       	ldi	r30, 0x1F	; 31
     82e:	f3 e0       	ldi	r31, 0x03	; 3
     830:	31 97       	sbiw	r30, 0x01	; 1
     832:	f1 f7       	brne	.-4      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     834:	00 c0       	rjmp	.+0      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     836:	00 00       	nop
				for(u8 i=0;i<250;i++)
				{
					TOGGLE_BIT(PORTB,PB3);
					_delay_ms(0.1);
				}
				for(u8 i=0;i<250;i++)
     838:	9f 5f       	subi	r25, 0xFF	; 255
     83a:	9a 3f       	cpi	r25, 0xFA	; 250
     83c:	98 f3       	brcs	.-26     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     83e:	ff e7       	ldi	r31, 0x7F	; 127
     840:	28 e3       	ldi	r18, 0x38	; 56
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	f1 50       	subi	r31, 0x01	; 1
     846:	20 40       	sbci	r18, 0x00	; 0
     848:	80 40       	sbci	r24, 0x00	; 0
     84a:	e1 f7       	brne	.-8      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     84c:	00 c0       	rjmp	.+0      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     84e:	00 00       	nop
				_delay_ms(0.3);
			}
		break;
		
		case 5:
			for (int i=0;i<10;i++)// Loser
     850:	4f 5f       	subi	r20, 0xFF	; 255
     852:	5f 4f       	sbci	r21, 0xFF	; 255
     854:	02 c0       	rjmp	.+4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
	DIO_u8SetPinDir(Buzzer_Port,Buzzer_Pin,DIO_PIN_OUT);
}

void Buzzer_Enable(u8 Tone_Type)
{
	switch(Tone_Type)
     856:	40 e0       	ldi	r20, 0x00	; 0
     858:	50 e0       	ldi	r21, 0x00	; 0
				_delay_ms(0.3);
			}
		break;
		
		case 5:
			for (int i=0;i<10;i++)// Loser
     85a:	4a 30       	cpi	r20, 0x0A	; 10
     85c:	51 05       	cpc	r21, r1
     85e:	74 f2       	brlt	.-100    	; 0x7fc <Buzzer_Enable+0x1ae>
     860:	08 95       	ret

00000862 <CLCD_voidSendCommand>:
#include "CLCD_Interface.h"
#include "BIT_MATH.h"
#include "STD_TYPES.h"
#include <util/delay.h>

void CLCD_voidSendCommand(u8 Copy_u8Command){
     862:	cf 93       	push	r28
     864:	c8 2f       	mov	r28, r24
	//Setting RS to low command
	DIO_u8SetPinValue(CLCD_PORT_CONTROL,CONTROL_RS,DIO_LOW);
     866:	40 e0       	ldi	r20, 0x00	; 0
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_u8SetPinValue>
	//Setting Rw to low for write	
	DIO_u8SetPinValue(CLCD_PORT_CONTROL,CONTROL_RW,DIO_LOW);
     870:	40 e0       	ldi	r20, 0x00	; 0
     872:	61 e0       	ldi	r22, 0x01	; 1
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_u8SetPinValue>
	//Setting Data
	DIO_u8SetPortValue(CLCD_PORT_DATA,Copy_u8Command);
     87a:	6c 2f       	mov	r22, r28
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_u8SetPortValue>
	//Enable and disable pulse
	DIO_u8SetPinValue(CLCD_PORT_CONTROL,CONTROL_E,DIO_HIGH);
     882:	41 e0       	ldi	r20, 0x01	; 1
     884:	62 e0       	ldi	r22, 0x02	; 2
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_u8SetPinValue>
     88c:	83 ef       	ldi	r24, 0xF3	; 243
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	01 97       	sbiw	r24, 0x01	; 1
     892:	f1 f7       	brne	.-4      	; 0x890 <CLCD_voidSendCommand+0x2e>
     894:	00 c0       	rjmp	.+0      	; 0x896 <CLCD_voidSendCommand+0x34>
     896:	00 00       	nop
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_PORT_CONTROL,CONTROL_E,DIO_LOW);
     898:	40 e0       	ldi	r20, 0x00	; 0
     89a:	62 e0       	ldi	r22, 0x02	; 2
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_u8SetPinValue>
  
}
     8a2:	cf 91       	pop	r28
     8a4:	08 95       	ret

000008a6 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data){
     8a6:	cf 93       	push	r28
     8a8:	c8 2f       	mov	r28, r24
	
	//Setting RS to low High Data
	DIO_u8SetPinValue(CLCD_PORT_CONTROL,CONTROL_RS,DIO_HIGH);
     8aa:	41 e0       	ldi	r20, 0x01	; 1
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_u8SetPinValue>
	//Setting Rw to low for write
	DIO_u8SetPinValue(CLCD_PORT_CONTROL,CONTROL_RW,DIO_LOW);
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	61 e0       	ldi	r22, 0x01	; 1
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_u8SetPinValue>
	//Setting Data
	DIO_u8SetPortValue(CLCD_PORT_DATA,Copy_u8Data);
     8be:	6c 2f       	mov	r22, r28
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_u8SetPortValue>
	//Enable and disable pulse
	DIO_u8SetPinValue(CLCD_PORT_CONTROL,CONTROL_E,DIO_HIGH);
     8c6:	41 e0       	ldi	r20, 0x01	; 1
     8c8:	62 e0       	ldi	r22, 0x02	; 2
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_u8SetPinValue>
     8d0:	83 ef       	ldi	r24, 0xF3	; 243
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	01 97       	sbiw	r24, 0x01	; 1
     8d6:	f1 f7       	brne	.-4      	; 0x8d4 <CLCD_voidSendData+0x2e>
     8d8:	00 c0       	rjmp	.+0      	; 0x8da <CLCD_voidSendData+0x34>
     8da:	00 00       	nop
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_PORT_CONTROL,CONTROL_E,DIO_LOW);
     8dc:	40 e0       	ldi	r20, 0x00	; 0
     8de:	62 e0       	ldi	r22, 0x02	; 2
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_u8SetPinValue>
	
}
     8e6:	cf 91       	pop	r28
     8e8:	08 95       	ret

000008ea <CLCD_voidInit>:
     8ea:	81 ef       	ldi	r24, 0xF1	; 241
     8ec:	9b e2       	ldi	r25, 0x2B	; 43
     8ee:	01 97       	sbiw	r24, 0x01	; 1
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <CLCD_voidInit+0x4>
     8f2:	00 c0       	rjmp	.+0      	; 0x8f4 <CLCD_voidInit+0xa>
     8f4:	00 00       	nop

void CLCD_voidInit(void){
	//power on
	_delay_ms(45);
	//Funcation set
	CLCD_voidSendCommand(0b00111000);
     8f6:	88 e3       	ldi	r24, 0x38	; 56
     8f8:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
	//Display ON/OFF control
	CLCD_voidSendCommand(0b00001100);
     8fc:	8c e0       	ldi	r24, 0x0C	; 12
     8fe:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
	//Display Clear
	CLCD_voidSendCommand(1);
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
     908:	08 95       	ret

0000090a <CLCD_voidPrintString>:
}

void CLCD_voidPrintString(u8 Copy_u8String[])
{
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	ec 01       	movw	r28, r24
	u8*i=Copy_u8String;
	while(*i!='\0'){
     910:	03 c0       	rjmp	.+6      	; 0x918 <CLCD_voidPrintString+0xe>
		CLCD_voidSendData(*i);
     912:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
		i++;
     916:	21 96       	adiw	r28, 0x01	; 1
}

void CLCD_voidPrintString(u8 Copy_u8String[])
{
	u8*i=Copy_u8String;
	while(*i!='\0'){
     918:	88 81       	ld	r24, Y
     91a:	81 11       	cpse	r24, r1
     91c:	fa cf       	rjmp	.-12     	; 0x912 <CLCD_voidPrintString+0x8>
		CLCD_voidSendData(*i);
		i++;
	}
}
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <CLCD_voidGoTOxy>:

void CLCD_voidGoTOxy(u8 x,u8 y)
{
	u8 address;
	if (x==0)
     924:	88 23       	and	r24, r24
     926:	79 f0       	breq	.+30     	; 0x946 <CLCD_voidGoTOxy+0x22>
	{
		  address=y;
	}
	else if (x==1)
     928:	81 30       	cpi	r24, 0x01	; 1
     92a:	19 f4       	brne	.+6      	; 0x932 <CLCD_voidGoTOxy+0xe>
	{
		address=y+0x40;
     92c:	90 e4       	ldi	r25, 0x40	; 64
     92e:	96 0f       	add	r25, r22
     930:	0b c0       	rjmp	.+22     	; 0x948 <CLCD_voidGoTOxy+0x24>
	}
	else if (x==2)
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	19 f4       	brne	.+6      	; 0x93c <CLCD_voidGoTOxy+0x18>
	{
		address=y+0x10;
     936:	90 e1       	ldi	r25, 0x10	; 16
     938:	96 0f       	add	r25, r22
     93a:	06 c0       	rjmp	.+12     	; 0x948 <CLCD_voidGoTOxy+0x24>
	}
	else if (x==3)
     93c:	83 30       	cpi	r24, 0x03	; 3
     93e:	21 f4       	brne	.+8      	; 0x948 <CLCD_voidGoTOxy+0x24>
	{
		address=y+0x50;
     940:	90 e5       	ldi	r25, 0x50	; 80
     942:	96 0f       	add	r25, r22
     944:	01 c0       	rjmp	.+2      	; 0x948 <CLCD_voidGoTOxy+0x24>
void CLCD_voidGoTOxy(u8 x,u8 y)
{
	u8 address;
	if (x==0)
	{
		  address=y;
     946:	96 2f       	mov	r25, r22
	}
	else if (x==3)
	{
		address=y+0x50;
	}
	CLCD_voidSendCommand(address|128);
     948:	89 2f       	mov	r24, r25
     94a:	80 68       	ori	r24, 0x80	; 128
     94c:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
     950:	08 95       	ret

00000952 <CLCD_voidSendNumber>:
}

void CLCD_voidSendNumber(s32 number) {
     952:	cf 92       	push	r12
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	2a 97       	sbiw	r28, 0x0a	; 10
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	f8 94       	cli
     96a:	de bf       	out	0x3e, r29	; 62
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	cd bf       	out	0x3d, r28	; 61
     970:	6b 01       	movw	r12, r22
     972:	7c 01       	movw	r14, r24
	{
		u8 list[10];
		
		if (number<0)
     974:	99 23       	and	r25, r25
     976:	5c f4       	brge	.+22     	; 0x98e <CLCD_voidSendNumber+0x3c>
		{
			CLCD_voidSendData('-');
     978:	8d e2       	ldi	r24, 0x2D	; 45
     97a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
			number=-number;
     97e:	f0 94       	com	r15
     980:	e0 94       	com	r14
     982:	d0 94       	com	r13
     984:	c0 94       	com	r12
     986:	c1 1c       	adc	r12, r1
     988:	d1 1c       	adc	r13, r1
     98a:	e1 1c       	adc	r14, r1
     98c:	f1 1c       	adc	r15, r1
		}
		
		if (number==0)
     98e:	c1 14       	cp	r12, r1
     990:	d1 04       	cpc	r13, r1
     992:	e1 04       	cpc	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	19 f4       	brne	.+6      	; 0x99e <CLCD_voidSendNumber+0x4c>
		{
			CLCD_voidSendData('0');
     998:	80 e3       	ldi	r24, 0x30	; 48
     99a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
		address=y+0x50;
	}
	CLCD_voidSendCommand(address|128);
}

void CLCD_voidSendNumber(s32 number) {
     99e:	10 e0       	ldi	r17, 0x00	; 0
     9a0:	15 c0       	rjmp	.+42     	; 0x9cc <CLCD_voidSendNumber+0x7a>
			CLCD_voidSendData('0');
		}
		u8 i=0;
		while(number>0)
		{
			list[i++]=(number%10)+'0';
     9a2:	c7 01       	movw	r24, r14
     9a4:	b6 01       	movw	r22, r12
     9a6:	2a e0       	ldi	r18, 0x0A	; 10
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	40 e0       	ldi	r20, 0x00	; 0
     9ac:	50 e0       	ldi	r21, 0x00	; 0
     9ae:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <__divmodsi4>
     9b2:	e1 e0       	ldi	r30, 0x01	; 1
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	ec 0f       	add	r30, r28
     9b8:	fd 1f       	adc	r31, r29
     9ba:	e1 0f       	add	r30, r17
     9bc:	f1 1d       	adc	r31, r1
     9be:	60 5d       	subi	r22, 0xD0	; 208
     9c0:	60 83       	st	Z, r22
			number/=10;
     9c2:	c2 2e       	mov	r12, r18
     9c4:	d3 2e       	mov	r13, r19
     9c6:	e4 2e       	mov	r14, r20
     9c8:	f5 2e       	mov	r15, r21
			CLCD_voidSendData('0');
		}
		u8 i=0;
		while(number>0)
		{
			list[i++]=(number%10)+'0';
     9ca:	1f 5f       	subi	r17, 0xFF	; 255
		if (number==0)
		{
			CLCD_voidSendData('0');
		}
		u8 i=0;
		while(number>0)
     9cc:	1c 14       	cp	r1, r12
     9ce:	1d 04       	cpc	r1, r13
     9d0:	1e 04       	cpc	r1, r14
     9d2:	1f 04       	cpc	r1, r15
     9d4:	34 f3       	brlt	.-52     	; 0x9a2 <CLCD_voidSendNumber+0x50>
     9d6:	0d c0       	rjmp	.+26     	; 0x9f2 <CLCD_voidSendNumber+0xa0>
			number/=10;
		}
		
		for (u8 k=i;k>0;k--)
		{
			CLCD_voidSendData(list[k-1]);
     9d8:	e1 2f       	mov	r30, r17
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	31 97       	sbiw	r30, 0x01	; 1
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	8c 0f       	add	r24, r28
     9e4:	9d 1f       	adc	r25, r29
     9e6:	e8 0f       	add	r30, r24
     9e8:	f9 1f       	adc	r31, r25
     9ea:	80 81       	ld	r24, Z
     9ec:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
		{
			list[i++]=(number%10)+'0';
			number/=10;
		}
		
		for (u8 k=i;k>0;k--)
     9f0:	11 50       	subi	r17, 0x01	; 1
     9f2:	11 11       	cpse	r17, r1
     9f4:	f1 cf       	rjmp	.-30     	; 0x9d8 <CLCD_voidSendNumber+0x86>
		{
			CLCD_voidSendData(list[k-1]);
		}
	}
}
     9f6:	2a 96       	adiw	r28, 0x0a	; 10
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	f8 94       	cli
     9fc:	de bf       	out	0x3e, r29	; 62
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	cd bf       	out	0x3d, r28	; 61
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	1f 91       	pop	r17
     a08:	ff 90       	pop	r15
     a0a:	ef 90       	pop	r14
     a0c:	df 90       	pop	r13
     a0e:	cf 90       	pop	r12
     a10:	08 95       	ret

00000a12 <CLCD_ClearDisplay>:

void CLCD_ClearDisplay(){
	CLCD_voidSendCommand(0x01);
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
     a18:	08 95       	ret

00000a1a <CLCD_PowerON>:
}
void CLCD_PowerON()
{
	/*SET PORT DATA*/
	DIO_u8SetPortDir(CLCD_PORT_DATA,DIO_PORT_OUT);
     a1a:	6f ef       	ldi	r22, 0xFF	; 255
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	0e 94 2f 0c 	call	0x185e	; 0x185e <DIO_u8SetPortDir>
	/*SET CONTROL PINS*/
	DIO_u8SetPinDir(CLCD_PORT_CONTROL,CONTROL_RS,DIO_PIN_OUT);
     a22:	41 e0       	ldi	r20, 0x01	; 1
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(CLCD_PORT_CONTROL,CONTROL_RW,DIO_PIN_OUT);
     a2c:	41 e0       	ldi	r20, 0x01	; 1
     a2e:	61 e0       	ldi	r22, 0x01	; 1
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(CLCD_PORT_CONTROL,CONTROL_E,DIO_PIN_OUT);
     a36:	41 e0       	ldi	r20, 0x01	; 1
     a38:	62 e0       	ldi	r22, 0x02	; 2
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_u8SetPinDir>
    /*Initialize LCD*/	
	CLCD_voidInit();
     a40:	0e 94 75 04 	call	0x8ea	; 0x8ea <CLCD_voidInit>
     a44:	08 95       	ret

00000a46 <CLCD_voidSendSpecialChar>:
}
void CLCD_voidSendSpecialChar(u8 *copy_u8pattern, u8 copy_u8pattern_num, u8 x, u8 y)
{
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	8c 01       	movw	r16, r24
     a54:	d6 2f       	mov	r29, r22
     a56:	f4 2e       	mov	r15, r20
     a58:	e2 2e       	mov	r14, r18
	u8 address = 0, temp;
	address = copy_u8pattern_num * 8;
     a5a:	86 2f       	mov	r24, r22
     a5c:	88 0f       	add	r24, r24
     a5e:	88 0f       	add	r24, r24
     a60:	88 0f       	add	r24, r24
	CLCD_voidSendCommand(address + 64);
     a62:	80 5c       	subi	r24, 0xC0	; 192
     a64:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
	for (temp = 0; temp < 8; temp++)
     a68:	c0 e0       	ldi	r28, 0x00	; 0
     a6a:	07 c0       	rjmp	.+14     	; 0xa7a <CLCD_voidSendSpecialChar+0x34>
	{
		CLCD_voidSendData(copy_u8pattern[temp]);
     a6c:	f8 01       	movw	r30, r16
     a6e:	ec 0f       	add	r30, r28
     a70:	f1 1d       	adc	r31, r1
     a72:	80 81       	ld	r24, Z
     a74:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
void CLCD_voidSendSpecialChar(u8 *copy_u8pattern, u8 copy_u8pattern_num, u8 x, u8 y)
{
	u8 address = 0, temp;
	address = copy_u8pattern_num * 8;
	CLCD_voidSendCommand(address + 64);
	for (temp = 0; temp < 8; temp++)
     a78:	cf 5f       	subi	r28, 0xFF	; 255
     a7a:	c8 30       	cpi	r28, 0x08	; 8
     a7c:	b8 f3       	brcs	.-18     	; 0xa6c <CLCD_voidSendSpecialChar+0x26>
	{
		CLCD_voidSendData(copy_u8pattern[temp]);
	}
	CLCD_voidGoTOxy(x, y);
     a7e:	6e 2d       	mov	r22, r14
     a80:	8f 2d       	mov	r24, r15
     a82:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidSendData(copy_u8pattern_num);
     a86:	8d 2f       	mov	r24, r29
     a88:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
	
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	ff 90       	pop	r15
     a96:	ef 90       	pop	r14
     a98:	08 95       	ret

00000a9a <TIMER1_Init>:
volatile u8 timer_flag = 0;

void TIMER1_Init()
{
	// Configure Timer1 with 1ms interrupt interval
	TCCR1B |= (1 << WGM12);              // CTC mode
     a9a:	8e b5       	in	r24, 0x2e	; 46
     a9c:	88 60       	ori	r24, 0x08	; 8
     a9e:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 125;                         // Compare value for 1ms at 8MHz clock
     aa0:	8d e7       	ldi	r24, 0x7D	; 125
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	9b bd       	out	0x2b, r25	; 43
     aa6:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1 << OCIE1A);              // Enable compare A interrupt
     aa8:	89 b7       	in	r24, 0x39	; 57
     aaa:	80 61       	ori	r24, 0x10	; 16
     aac:	89 bf       	out	0x39, r24	; 57
	sei();                               // Enable global interrupts
     aae:	78 94       	sei
	TCCR1B |= ((1 << CS10) | (1 << CS11)); // Start the timer with prescaler 64
     ab0:	8e b5       	in	r24, 0x2e	; 46
     ab2:	83 60       	ori	r24, 0x03	; 3
     ab4:	8e bd       	out	0x2e, r24	; 46
     ab6:	08 95       	ret

00000ab8 <TIMER_Delay_ms>:
}

void TIMER_Delay_ms(u16 milliseconds)
{
     ab8:	9c 01       	movw	r18, r24
	timer_flag = 0;                      // Clear the timer flag
     aba:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <timer_flag>
	while (milliseconds > 0)
     abe:	08 c0       	rjmp	.+16     	; 0xad0 <TIMER_Delay_ms+0x18>
	{
		if (timer_flag)
     ac0:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <timer_flag>
     ac4:	99 23       	and	r25, r25
     ac6:	21 f0       	breq	.+8      	; 0xad0 <TIMER_Delay_ms+0x18>
		{
			milliseconds--;               // Decrease the remaining milliseconds
     ac8:	21 50       	subi	r18, 0x01	; 1
     aca:	31 09       	sbc	r19, r1
			timer_flag = 0;               // Reset the timer flag
     acc:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <timer_flag>
}

void TIMER_Delay_ms(u16 milliseconds)
{
	timer_flag = 0;                      // Clear the timer flag
	while (milliseconds > 0)
     ad0:	21 15       	cp	r18, r1
     ad2:	31 05       	cpc	r19, r1
     ad4:	a9 f7       	brne	.-22     	; 0xac0 <TIMER_Delay_ms+0x8>
		{
			milliseconds--;               // Decrease the remaining milliseconds
			timer_flag = 0;               // Reset the timer flag
		}
	}
}
     ad6:	08 95       	ret

00000ad8 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
     ad8:	1f 92       	push	r1
     ada:	0f 92       	push	r0
     adc:	0f b6       	in	r0, 0x3f	; 63
     ade:	0f 92       	push	r0
     ae0:	11 24       	eor	r1, r1
     ae2:	8f 93       	push	r24
	timer_flag = 1;                       // Set the timer flag
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <timer_flag>
}
     aea:	8f 91       	pop	r24
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	0f 90       	pop	r0
     af2:	1f 90       	pop	r1
     af4:	18 95       	reti

00000af6 <TIMER0_Init>:

/********************************	TIMER0	 *********************************/
void TIMER0_Init(void)
{
	//1- Set the Wave Generation mode as normal
	CLEAR_BIT(TCCR0, WGM00);
     af6:	83 b7       	in	r24, 0x33	; 51
     af8:	8f 7b       	andi	r24, 0xBF	; 191
     afa:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0, WGM01);
     afc:	83 b7       	in	r24, 0x33	; 51
     afe:	87 7f       	andi	r24, 0xF7	; 247
     b00:	83 bf       	out	0x33, r24	; 51

	//2- Enable Overflow Interrupt
	SET_BIT(TIMSK, TOIE0);
     b02:	89 b7       	in	r24, 0x39	; 57
     b04:	81 60       	ori	r24, 0x01	; 1
     b06:	89 bf       	out	0x39, r24	; 57

	//3- Set the prescaler 8Mhz / 8 = 1Mhz --> Timer Freq
	CLEAR_BIT(TCCR0, CS00);
     b08:	83 b7       	in	r24, 0x33	; 51
     b0a:	8e 7f       	andi	r24, 0xFE	; 254
     b0c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, CS01);
     b0e:	83 b7       	in	r24, 0x33	; 51
     b10:	82 60       	ori	r24, 0x02	; 2
     b12:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0, CS02);
     b14:	83 b7       	in	r24, 0x33	; 51
     b16:	8b 7f       	andi	r24, 0xFB	; 251
     b18:	83 bf       	out	0x33, r24	; 51
TCNT0 = 192;
     b1a:	80 ec       	ldi	r24, 0xC0	; 192
     b1c:	82 bf       	out	0x32, r24	; 50
     b1e:	08 95       	ret

00000b20 <__vector_11>:
}
void __vector_11(void)
{
     b20:	1f 92       	push	r1
     b22:	0f 92       	push	r0
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	0f 92       	push	r0
     b28:	11 24       	eor	r1, r1
     b2a:	2f 93       	push	r18
     b2c:	3f 93       	push	r19
     b2e:	4f 93       	push	r20
     b30:	5f 93       	push	r21
     b32:	6f 93       	push	r22
     b34:	7f 93       	push	r23
     b36:	8f 93       	push	r24
     b38:	9f 93       	push	r25
     b3a:	af 93       	push	r26
     b3c:	bf 93       	push	r27
     b3e:	ef 93       	push	r30
     b40:	ff 93       	push	r31
	static u16 counter = 0;
	static u8 time=0, i=0;
	counter++;
     b42:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <counter.1676>
     b46:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <counter.1676+0x1>
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <counter.1676+0x1>
     b50:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <counter.1676>

	// Ovf Mode First App : 3906.25 --> Ticks_count
	if (counter == 390)
     b54:	86 38       	cpi	r24, 0x86	; 134
     b56:	91 40       	sbci	r25, 0x01	; 1
     b58:	09 f0       	breq	.+2      	; 0xb5c <__vector_11+0x3c>
     b5a:	43 c0       	rjmp	.+134    	; 0xbe2 <__vector_11+0xc2>
	{
		game_time++;
     b5c:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <game_time>
     b60:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <game_time+0x1>
     b64:	a0 91 0f 02 	lds	r26, 0x020F	; 0x80020f <game_time+0x2>
     b68:	b0 91 10 02 	lds	r27, 0x0210	; 0x800210 <game_time+0x3>
     b6c:	01 96       	adiw	r24, 0x01	; 1
     b6e:	a1 1d       	adc	r26, r1
     b70:	b1 1d       	adc	r27, r1
     b72:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <game_time>
     b76:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <game_time+0x1>
     b7a:	a0 93 0f 02 	sts	0x020F, r26	; 0x80020f <game_time+0x2>
     b7e:	b0 93 10 02 	sts	0x0210, r27	; 0x800210 <game_time+0x3>
		counter = 0;
     b82:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <counter.1676+0x1>
     b86:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <counter.1676>
		TCNT0 = 192;
     b8a:	80 ec       	ldi	r24, 0xC0	; 192
     b8c:	82 bf       	out	0x32, r24	; 50

		// Increment seconds count
		if (game_time % 10 == 0) {
     b8e:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <game_time>
     b92:	70 91 0e 02 	lds	r23, 0x020E	; 0x80020e <game_time+0x1>
     b96:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <game_time+0x2>
     b9a:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <game_time+0x3>
     b9e:	2a e0       	ldi	r18, 0x0A	; 10
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	0e 94 c5 1b 	call	0x378a	; 0x378a <__udivmodsi4>
     baa:	67 2b       	or	r22, r23
     bac:	68 2b       	or	r22, r24
     bae:	69 2b       	or	r22, r25
     bb0:	c1 f4       	brne	.+48     	; 0xbe2 <__vector_11+0xc2>
			time++;
     bb2:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <time.1677>
     bb6:	8f 5f       	subi	r24, 0xFF	; 255
     bb8:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <time.1677>
			game_time_seconds++;
     bbc:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <game_time_seconds>
     bc0:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <game_time_seconds+0x1>
     bc4:	a0 91 0b 02 	lds	r26, 0x020B	; 0x80020b <game_time_seconds+0x2>
     bc8:	b0 91 0c 02 	lds	r27, 0x020C	; 0x80020c <game_time_seconds+0x3>
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	a1 1d       	adc	r26, r1
     bd0:	b1 1d       	adc	r27, r1
     bd2:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <game_time_seconds>
     bd6:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <game_time_seconds+0x1>
     bda:	a0 93 0b 02 	sts	0x020B, r26	; 0x80020b <game_time_seconds+0x2>
     bde:	b0 93 0c 02 	sts	0x020C, r27	; 0x80020c <game_time_seconds+0x3>
		
		}
	}
}
     be2:	ff 91       	pop	r31
     be4:	ef 91       	pop	r30
     be6:	bf 91       	pop	r27
     be8:	af 91       	pop	r26
     bea:	9f 91       	pop	r25
     bec:	8f 91       	pop	r24
     bee:	7f 91       	pop	r23
     bf0:	6f 91       	pop	r22
     bf2:	5f 91       	pop	r21
     bf4:	4f 91       	pop	r20
     bf6:	3f 91       	pop	r19
     bf8:	2f 91       	pop	r18
     bfa:	0f 90       	pop	r0
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	0f 90       	pop	r0
     c00:	1f 90       	pop	r1
     c02:	18 95       	reti

00000c04 <INIT_POSITION>:
	0b00000,
	0b00000
};

void INIT_POSITION() {
	CLCD_voidSendSpecialChar(customChar1, 0, 0, 15);
     c04:	2f e0       	ldi	r18, 0x0F	; 15
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	82 ea       	ldi	r24, 0xA2	; 162
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
	CLCD_voidSendSpecialChar(customChar2, 1, 0, 0);
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	61 e0       	ldi	r22, 0x01	; 1
     c18:	8a e9       	ldi	r24, 0x9A	; 154
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
     c20:	08 95       	ret

00000c22 <move_ychar1>:
		
}
		

void move_ychar1(uint8_t KEY_VALUE) {
	if (KEY_VALUE == 3) {
     c22:	83 30       	cpi	r24, 0x03	; 3
     c24:	21 f5       	brne	.+72     	; 0xc6e <move_ychar1+0x4c>
		y++;
     c26:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <y>
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	86 0f       	add	r24, r22
     c2e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <y>
		if (y > 15) {
     c32:	80 31       	cpi	r24, 0x10	; 16
     c34:	58 f0       	brcs	.+22     	; 0xc4c <move_ychar1+0x2a>
			CLCD_voidGoTOxy(x, 15);
     c36:	6f e0       	ldi	r22, 0x0F	; 15
     c38:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <x>
     c3c:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			CLCD_voidSendData(' ');
     c40:	80 e2       	ldi	r24, 0x20	; 32
     c42:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
			y = 0;
     c46:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <y>
     c4a:	07 c0       	rjmp	.+14     	; 0xc5a <move_ychar1+0x38>
			} else {
			CLCD_voidGoTOxy(x, y - 1);
     c4c:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <x>
     c50:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			CLCD_voidSendData(' ');
     c54:	80 e2       	ldi	r24, 0x20	; 32
     c56:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
		}
		CLCD_voidSendSpecialChar(customChar1, 0, x, y);
     c5a:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <y>
     c5e:	40 91 13 02 	lds	r20, 0x0213	; 0x800213 <x>
     c62:	60 e0       	ldi	r22, 0x00	; 0
     c64:	82 ea       	ldi	r24, 0xA2	; 162
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
     c6c:	08 95       	ret
		} else if (KEY_VALUE == 0) {
     c6e:	81 11       	cpse	r24, r1
     c70:	23 c0       	rjmp	.+70     	; 0xcb8 <move_ychar1+0x96>
		CLCD_voidGoTOxy(x, y);
     c72:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <y>
     c76:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <x>
     c7a:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
		CLCD_voidSendData(' ');
     c7e:	80 e2       	ldi	r24, 0x20	; 32
     c80:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>

		if (y == 0) {
     c84:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <y>
     c88:	81 11       	cpse	r24, r1
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <move_ychar1+0x72>
			y = 15;
     c8c:	8f e0       	ldi	r24, 0x0F	; 15
     c8e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <y>
     c92:	03 c0       	rjmp	.+6      	; 0xc9a <move_ychar1+0x78>
			} else {
			y--;
     c94:	81 50       	subi	r24, 0x01	; 1
     c96:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <y>
		}

		CLCD_voidGoTOxy(x, y);
     c9a:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <y>
     c9e:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <x>
     ca2:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
		CLCD_voidSendSpecialChar(customChar1, 0, x, y);
     ca6:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <y>
     caa:	40 91 13 02 	lds	r20, 0x0213	; 0x800213 <x>
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	82 ea       	ldi	r24, 0xA2	; 162
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
     cb8:	08 95       	ret

00000cba <move_xchar1>:
void INIT_POSITION() {
	CLCD_voidSendSpecialChar(customChar1, 0, 0, 15);
	CLCD_voidSendSpecialChar(customChar2, 1, 0, 0);
}

void move_xchar1(uint8_t delay) {
     cba:	cf 93       	push	r28
     cbc:	c8 2f       	mov	r28, r24
	move_ychar1(KEY_VALUE);
     cbe:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <KEY_VALUE>
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 11 06 	call	0xc22	; 0xc22 <move_ychar1>

	// GOING DOWN
	if (KEY_VALUE == 2) {
     cc8:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <KEY_VALUE>
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	21 f5       	brne	.+72     	; 0xd18 <move_xchar1+0x5e>
		x++;
     cd0:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <x>
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	98 0f       	add	r25, r24
     cd8:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <x>

		if (x > 3) {
     cdc:	94 30       	cpi	r25, 0x04	; 4
     cde:	58 f0       	brcs	.+22     	; 0xcf6 <move_xchar1+0x3c>
			CLCD_voidGoTOxy(3, y);
     ce0:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <y>
     ce4:	83 e0       	ldi	r24, 0x03	; 3
     ce6:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			CLCD_voidSendData(' ');
     cea:	80 e2       	ldi	r24, 0x20	; 32
     cec:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
			x = 0;
     cf0:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <x>
     cf4:	07 c0       	rjmp	.+14     	; 0xd04 <move_xchar1+0x4a>
			} else {
			CLCD_voidGoTOxy(x - 1, y);
     cf6:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <y>
     cfa:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			CLCD_voidSendData(' ');
     cfe:	80 e2       	ldi	r24, 0x20	; 32
     d00:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
		}
		CLCD_voidSendSpecialChar(customChar1, 0, x, y);
     d04:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <y>
     d08:	40 91 13 02 	lds	r20, 0x0213	; 0x800213 <x>
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	82 ea       	ldi	r24, 0xA2	; 162
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
     d16:	25 c0       	rjmp	.+74     	; 0xd62 <move_xchar1+0xa8>
	}

	// GOING UP
	else if (KEY_VALUE == 1) {
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	19 f5       	brne	.+70     	; 0xd62 <move_xchar1+0xa8>
		CLCD_voidGoTOxy(x, y);
     d1c:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <y>
     d20:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <x>
     d24:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
		CLCD_voidSendData(' ');
     d28:	80 e2       	ldi	r24, 0x20	; 32
     d2a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
		if (x == 0) {
     d2e:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <x>
     d32:	81 11       	cpse	r24, r1
     d34:	04 c0       	rjmp	.+8      	; 0xd3e <move_xchar1+0x84>
			x = 3;
     d36:	83 e0       	ldi	r24, 0x03	; 3
     d38:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <x>
     d3c:	03 c0       	rjmp	.+6      	; 0xd44 <move_xchar1+0x8a>
			} else {
			x--;
     d3e:	81 50       	subi	r24, 0x01	; 1
     d40:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <x>
		}

		CLCD_voidGoTOxy(x, y);
     d44:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <y>
     d48:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <x>
     d4c:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
		CLCD_voidSendSpecialChar(customChar1, 0, x, y);
     d50:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <y>
     d54:	40 91 13 02 	lds	r20, 0x0213	; 0x800213 <x>
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	82 ea       	ldi	r24, 0xA2	; 162
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
	}

	uint8_t delay_temp = delay + 30;
     d62:	8e e1       	ldi	r24, 0x1E	; 30
     d64:	8c 0f       	add	r24, r28
	TIMER_Delay_ms(delay_temp);
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 5c 05 	call	0xab8	; 0xab8 <TIMER_Delay_ms>

	// char2 movement
	// GOING DOWN
	if (KEY_VALUE == 2) {
     d6c:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <KEY_VALUE>
     d70:	82 30       	cpi	r24, 0x02	; 2
     d72:	21 f5       	brne	.+72     	; 0xdbc <move_xchar1+0x102>
		x2++;
     d74:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <x2>
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	98 0f       	add	r25, r24
     d7c:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <x2>

		if (x2 > 3) {
     d80:	94 30       	cpi	r25, 0x04	; 4
     d82:	58 f0       	brcs	.+22     	; 0xd9a <move_xchar1+0xe0>
			CLCD_voidGoTOxy(3, y2);
     d84:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <y2>
     d88:	83 e0       	ldi	r24, 0x03	; 3
     d8a:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			CLCD_voidSendData(' ');
     d8e:	80 e2       	ldi	r24, 0x20	; 32
     d90:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
			x2 = 0;
     d94:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <x2>
     d98:	07 c0       	rjmp	.+14     	; 0xda8 <move_xchar1+0xee>
			} else {
			CLCD_voidGoTOxy(x2 - 1, y2);
     d9a:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <y2>
     d9e:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			CLCD_voidSendData(' ');
     da2:	80 e2       	ldi	r24, 0x20	; 32
     da4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
		}
		CLCD_voidSendSpecialChar(customChar2, 1, x2, y2);
     da8:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <y2>
     dac:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <x2>
     db0:	61 e0       	ldi	r22, 0x01	; 1
     db2:	8a e9       	ldi	r24, 0x9A	; 154
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
     dba:	25 c0       	rjmp	.+74     	; 0xe06 <move_xchar1+0x14c>
	}

	// GOING UP
	else if (KEY_VALUE == 1) {
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	19 f5       	brne	.+70     	; 0xe06 <move_xchar1+0x14c>
		CLCD_voidGoTOxy(x2, y2);
     dc0:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <y2>
     dc4:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <x2>
     dc8:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
		CLCD_voidSendData(' ');
     dcc:	80 e2       	ldi	r24, 0x20	; 32
     dce:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
		if (x2 == 0) {
     dd2:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <x2>
     dd6:	81 11       	cpse	r24, r1
     dd8:	04 c0       	rjmp	.+8      	; 0xde2 <move_xchar1+0x128>
			x2 = 3;
     dda:	83 e0       	ldi	r24, 0x03	; 3
     ddc:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <x2>
     de0:	03 c0       	rjmp	.+6      	; 0xde8 <move_xchar1+0x12e>
			} else {
			x2--;
     de2:	81 50       	subi	r24, 0x01	; 1
     de4:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <x2>
		}

		CLCD_voidGoTOxy(x2, y2);
     de8:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <y2>
     dec:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <x2>
     df0:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
		CLCD_voidSendSpecialChar(customChar2, 1, x2, y2);
     df4:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <y2>
     df8:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <x2>
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	8a e9       	ldi	r24, 0x9A	; 154
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
	}

	KEY_VALUE = 0;
     e06:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <KEY_VALUE>
}
     e0a:	cf 91       	pop	r28
     e0c:	08 95       	ret

00000e0e <GAME_OVER>:
		CLCD_voidSendSpecialChar(customChar1, 0, x, y);
	}
}

void GAME_OVER() {
	CLCD_ClearDisplay();
     e0e:	0e 94 09 05 	call	0xa12	; 0xa12 <CLCD_ClearDisplay>
	TIMER_Delay_ms(10);
     e12:	8a e0       	ldi	r24, 0x0A	; 10
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 5c 05 	call	0xab8	; 0xab8 <TIMER_Delay_ms>
	CLCD_voidGoTOxy(0, 4);
     e1a:	64 e0       	ldi	r22, 0x04	; 4
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidPrintString("GAME OVER");
     e22:	83 ee       	ldi	r24, 0xE3	; 227
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
	CLCD_voidGoTOxy(1, 4);
     e2a:	64 e0       	ldi	r22, 0x04	; 4
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidPrintString("TRY again");
     e32:	86 e3       	ldi	r24, 0x36	; 54
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
	TIMER_Delay_ms(2000);
     e3a:	80 ed       	ldi	r24, 0xD0	; 208
     e3c:	97 e0       	ldi	r25, 0x07	; 7
     e3e:	0e 94 5c 05 	call	0xab8	; 0xab8 <TIMER_Delay_ms>
	CLCD_ClearDisplay();
     e42:	0e 94 09 05 	call	0xa12	; 0xa12 <CLCD_ClearDisplay>
     e46:	08 95       	ret

00000e48 <won>:
	}
	
}

void won() {
	if (min>game_time_seconds)
     e48:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <min>
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	a0 e0       	ldi	r26, 0x00	; 0
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	40 91 09 02 	lds	r20, 0x0209	; 0x800209 <game_time_seconds>
     e56:	50 91 0a 02 	lds	r21, 0x020A	; 0x80020a <game_time_seconds+0x1>
     e5a:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <game_time_seconds+0x2>
     e5e:	70 91 0c 02 	lds	r23, 0x020C	; 0x80020c <game_time_seconds+0x3>
     e62:	48 17       	cp	r20, r24
     e64:	59 07       	cpc	r21, r25
     e66:	6a 07       	cpc	r22, r26
     e68:	7b 07       	cpc	r23, r27
     e6a:	50 f4       	brcc	.+20     	; 0xe80 <won+0x38>
	{
		min=game_time_seconds;
     e6c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <game_time_seconds>
     e70:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <game_time_seconds+0x1>
     e74:	a0 91 0b 02 	lds	r26, 0x020B	; 0x80020b <game_time_seconds+0x2>
     e78:	b0 91 0c 02 	lds	r27, 0x020C	; 0x80020c <game_time_seconds+0x3>
     e7c:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <min>
	}
	CLCD_ClearDisplay();
     e80:	0e 94 09 05 	call	0xa12	; 0xa12 <CLCD_ClearDisplay>
	TIMER_Delay_ms(10);
     e84:	8a e0       	ldi	r24, 0x0A	; 10
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 5c 05 	call	0xab8	; 0xab8 <TIMER_Delay_ms>
	CLCD_voidGoTOxy(0, 4);
     e8c:	64 e0       	ldi	r22, 0x04	; 4
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidPrintString("YOU won!");
     e94:	85 ef       	ldi	r24, 0xF5	; 245
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
	CLCD_voidGoTOxy(1, 4);
     e9c:	64 e0       	ldi	r22, 0x04	; 4
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidPrintString("TIME: ");
     ea4:	8e ef       	ldi	r24, 0xFE	; 254
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
	CLCD_voidSendNumber(game_time_seconds);
     eac:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <game_time_seconds>
     eb0:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <game_time_seconds+0x1>
     eb4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <game_time_seconds+0x2>
     eb8:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <game_time_seconds+0x3>
     ebc:	0e 94 a9 04 	call	0x952	; 0x952 <CLCD_voidSendNumber>
	SvenSegments_SendNumber(game_time_seconds);
     ec0:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <game_time_seconds>
     ec4:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <game_time_seconds+0x1>
     ec8:	a0 91 0b 02 	lds	r26, 0x020B	; 0x80020b <game_time_seconds+0x2>
     ecc:	b0 91 0c 02 	lds	r27, 0x020C	; 0x80020c <game_time_seconds+0x3>
     ed0:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <SvenSegments_SendNumber>
	CLCD_voidGoTOxy(2, 0);
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	82 e0       	ldi	r24, 0x02	; 2
     ed8:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidPrintString("mini score: ");
     edc:	85 e0       	ldi	r24, 0x05	; 5
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
	CLCD_voidSendNumber(min); // Display minimum time
     ee4:	60 91 ab 00 	lds	r22, 0x00AB	; 0x8000ab <min>
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 a9 04 	call	0x952	; 0x952 <CLCD_voidSendNumber>
	TIMER_Delay_ms(5000);
     ef2:	88 e8       	ldi	r24, 0x88	; 136
     ef4:	93 e1       	ldi	r25, 0x13	; 19
     ef6:	0e 94 5c 05 	call	0xab8	; 0xab8 <TIMER_Delay_ms>
	CLCD_ClearDisplay();
     efa:	0e 94 09 05 	call	0xa12	; 0xa12 <CLCD_ClearDisplay>
     efe:	08 95       	ret

00000f00 <BUZZ>:
}

void BUZZ() 
{
	SET_BIT(DDRC, 6);
     f00:	84 b3       	in	r24, 0x14	; 20
     f02:	80 64       	ori	r24, 0x40	; 64
     f04:	84 bb       	out	0x14, r24	; 20
	SET_BIT(PORTC, 6);
     f06:	85 b3       	in	r24, 0x15	; 21
     f08:	80 64       	ori	r24, 0x40	; 64
     f0a:	85 bb       	out	0x15, r24	; 21
     f0c:	83 ed       	ldi	r24, 0xD3	; 211
     f0e:	90 e3       	ldi	r25, 0x30	; 48
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	f1 f7       	brne	.-4      	; 0xf10 <BUZZ+0x10>
     f14:	00 c0       	rjmp	.+0      	; 0xf16 <BUZZ+0x16>
     f16:	00 00       	nop
	_delay_ms(50);
	CLEAR_BIT(PORTC, 6);
     f18:	85 b3       	in	r24, 0x15	; 21
     f1a:	8f 7b       	andi	r24, 0xBF	; 191
     f1c:	85 bb       	out	0x15, r24	; 21
     f1e:	08 95       	ret

00000f20 <BUZZ2>:
}

void BUZZ2() 
{
	SET_BIT(DDRC, 6);
     f20:	84 b3       	in	r24, 0x14	; 20
     f22:	80 64       	ori	r24, 0x40	; 64
     f24:	84 bb       	out	0x14, r24	; 20
	SET_BIT(PORTC, 6);
     f26:	85 b3       	in	r24, 0x15	; 21
     f28:	80 64       	ori	r24, 0x40	; 64
     f2a:	85 bb       	out	0x15, r24	; 21
     f2c:	2f e3       	ldi	r18, 0x3F	; 63
     f2e:	8d e0       	ldi	r24, 0x0D	; 13
     f30:	93 e0       	ldi	r25, 0x03	; 3
     f32:	21 50       	subi	r18, 0x01	; 1
     f34:	80 40       	sbci	r24, 0x00	; 0
     f36:	90 40       	sbci	r25, 0x00	; 0
     f38:	e1 f7       	brne	.-8      	; 0xf32 <BUZZ2+0x12>
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <BUZZ2+0x1c>
     f3c:	00 00       	nop
	_delay_ms(1000);
	CLEAR_BIT(PORTC, 6);
     f3e:	85 b3       	in	r24, 0x15	; 21
     f40:	8f 7b       	andi	r24, 0xBF	; 191
     f42:	85 bb       	out	0x15, r24	; 21
     f44:	08 95       	ret

00000f46 <point>:
	}

	KEY_VALUE = 0;
}

void point(uint8_t copy_x2, uint8_t delay) {
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	c8 2f       	mov	r28, r24
     f4c:	d6 2f       	mov	r29, r22
	BUZZ();
     f4e:	0e 94 80 07 	call	0xf00	; 0xf00 <BUZZ>

	// shot2
	for (i = 1; i < 16; i++) {
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <i+0x1>
     f5a:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <i>
     f5e:	00 c1       	rjmp	.+512    	; 0x1160 <point+0x21a>
		if (copy_x2 == x && i == y || x2 == x && y == y2) {
     f60:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <x>
     f64:	8c 13       	cpse	r24, r28
     f66:	06 c0       	rjmp	.+12     	; 0xf74 <point+0x2e>
     f68:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <y>
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	62 17       	cp	r22, r18
     f70:	73 07       	cpc	r23, r19
     f72:	51 f0       	breq	.+20     	; 0xf88 <point+0x42>
     f74:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <x2>
     f78:	89 13       	cpse	r24, r25
     f7a:	23 c0       	rjmp	.+70     	; 0xfc2 <point+0x7c>
     f7c:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <y>
     f80:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <y2>
     f84:	98 13       	cpse	r25, r24
     f86:	1d c0       	rjmp	.+58     	; 0xfc2 <point+0x7c>
			BUZZ2();
     f88:	0e 94 90 07 	call	0xf20	; 0xf20 <BUZZ2>
			move_xchar1(delay);
     f8c:	8d 2f       	mov	r24, r29
     f8e:	0e 94 5d 06 	call	0xcba	; 0xcba <move_xchar1>
			CLCD_voidSendSpecialChar(customChar3, 3, x, y);
     f92:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <y>
     f96:	40 91 13 02 	lds	r20, 0x0213	; 0x800213 <x>
     f9a:	63 e0       	ldi	r22, 0x03	; 3
     f9c:	82 e9       	ldi	r24, 0x92	; 146
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
			game_over_flag = 1;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <game_over_flag>
     faa:	2f eb       	ldi	r18, 0xBF	; 191
     fac:	87 e2       	ldi	r24, 0x27	; 39
     fae:	99 e0       	ldi	r25, 0x09	; 9
     fb0:	21 50       	subi	r18, 0x01	; 1
     fb2:	80 40       	sbci	r24, 0x00	; 0
     fb4:	90 40       	sbci	r25, 0x00	; 0
     fb6:	e1 f7       	brne	.-8      	; 0xfb0 <point+0x6a>
     fb8:	00 c0       	rjmp	.+0      	; 0xfba <point+0x74>
     fba:	00 00       	nop
			_delay_ms(3000);
			GAME_OVER();
     fbc:	0e 94 07 07 	call	0xe0e	; 0xe0e <GAME_OVER>
			break;
     fc0:	d7 c0       	rjmp	.+430    	; 0x1170 <point+0x22a>
		}

		if (i != 1) {
     fc2:	61 30       	cpi	r22, 0x01	; 1
     fc4:	71 05       	cpc	r23, r1
     fc6:	09 f4       	brne	.+2      	; 0xfca <point+0x84>
     fc8:	b5 c0       	rjmp	.+362    	; 0x1134 <point+0x1ee>
			CLCD_voidGoTOxy(copy_x2, i - 1);
     fca:	61 50       	subi	r22, 0x01	; 1
     fcc:	8c 2f       	mov	r24, r28
     fce:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			CLCD_voidSendData(' ');
     fd2:	80 e2       	ldi	r24, 0x20	; 32
     fd4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
			CLCD_voidSendSpecialChar(shot, 2, copy_x2, i);
     fd8:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <i>
     fdc:	4c 2f       	mov	r20, r28
     fde:	62 e0       	ldi	r22, 0x02	; 2
     fe0:	8a e8       	ldi	r24, 0x8A	; 138
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>

			// Check for key press and break the loop if a key is pressed
			KEY_VALUE = key();
     fe8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <key>
     fec:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <KEY_VALUE>
			if (KEY_VALUE != 0xff) {
     ff0:	8f 3f       	cpi	r24, 0xFF	; 255
     ff2:	09 f4       	brne	.+2      	; 0xff6 <point+0xb0>
     ff4:	9b c0       	rjmp	.+310    	; 0x112c <point+0x1e6>
				if (KEY_VALUE != 1 && KEY_VALUE != 3) {
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	09 f4       	brne	.+2      	; 0xffc <point+0xb6>
     ffa:	95 c0       	rjmp	.+298    	; 0x1126 <point+0x1e0>
     ffc:	83 30       	cpi	r24, 0x03	; 3
     ffe:	09 f4       	brne	.+2      	; 0x1002 <point+0xbc>
    1000:	92 c0       	rjmp	.+292    	; 0x1126 <point+0x1e0>
					if (KEY_VALUE == 4) {
    1002:	84 30       	cpi	r24, 0x04	; 4
    1004:	09 f0       	breq	.+2      	; 0x1008 <point+0xc2>
    1006:	83 c0       	rjmp	.+262    	; 0x110e <point+0x1c8>
						BUZZ();
    1008:	0e 94 80 07 	call	0xf00	; 0xf00 <BUZZ>
						for (j = y - 1; j >= 0; j--) {
    100c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <y>
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <j+0x1>
    1018:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <j>
    101c:	70 c0       	rjmp	.+224    	; 0x10fe <point+0x1b8>
							if (x == x2 && j == y2) {
    101e:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <x>
    1022:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <x2>
    1026:	32 13       	cpse	r19, r18
    1028:	22 c0       	rjmp	.+68     	; 0x106e <point+0x128>
    102a:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <y2>
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	82 17       	cp	r24, r18
    1032:	93 07       	cpc	r25, r19
    1034:	e1 f4       	brne	.+56     	; 0x106e <point+0x128>
								BUZZ2();
    1036:	0e 94 90 07 	call	0xf20	; 0xf20 <BUZZ2>
								move_xchar1(delay);
    103a:	8d 2f       	mov	r24, r29
    103c:	0e 94 5d 06 	call	0xcba	; 0xcba <move_xchar1>
								CLCD_voidSendSpecialChar(customChar3, 3, x2, y2);
    1040:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <y2>
    1044:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <x2>
    1048:	63 e0       	ldi	r22, 0x03	; 3
    104a:	82 e9       	ldi	r24, 0x92	; 146
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
								game_over_flag = 1;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <game_over_flag>
    1058:	2f eb       	ldi	r18, 0xBF	; 191
    105a:	87 e2       	ldi	r24, 0x27	; 39
    105c:	99 e0       	ldi	r25, 0x09	; 9
    105e:	21 50       	subi	r18, 0x01	; 1
    1060:	80 40       	sbci	r24, 0x00	; 0
    1062:	90 40       	sbci	r25, 0x00	; 0
    1064:	e1 f7       	brne	.-8      	; 0x105e <point+0x118>
    1066:	00 c0       	rjmp	.+0      	; 0x1068 <point+0x122>
    1068:	00 00       	nop
								_delay_ms(3000);
								won();
    106a:	0e 94 24 07 	call	0xe48	; 0xe48 <won>
							}

							if (j != 14) {
    106e:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <j>
    1072:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <j+0x1>
    1076:	6e 30       	cpi	r22, 0x0E	; 14
    1078:	71 05       	cpc	r23, r1
    107a:	51 f1       	breq	.+84     	; 0x10d0 <point+0x18a>
								CLCD_voidGoTOxy(x, j + 1);
    107c:	6f 5f       	subi	r22, 0xFF	; 255
    107e:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <x>
    1082:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
								CLCD_voidSendData(' ');
    1086:	80 e2       	ldi	r24, 0x20	; 32
    1088:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
								CLCD_voidSendSpecialChar(shot2, 4, x, j);
    108c:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <j>
    1090:	40 91 13 02 	lds	r20, 0x0213	; 0x800213 <x>
    1094:	64 e0       	ldi	r22, 0x04	; 4
    1096:	82 e8       	ldi	r24, 0x82	; 130
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
								// Check for key press and break the loop if a key is pressed
								KEY_VALUE = key();
    109e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <key>
    10a2:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <KEY_VALUE>
								if (KEY_VALUE != 0xff) {
    10a6:	8f 3f       	cpi	r24, 0xFF	; 255
    10a8:	79 f0       	breq	.+30     	; 0x10c8 <point+0x182>
									CLCD_voidGoTOxy(x, j);
    10aa:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <j>
    10ae:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <x>
    10b2:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
									CLCD_voidSendData(' ');
    10b6:	80 e2       	ldi	r24, 0x20	; 32
    10b8:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
									point(x2, 40);
    10bc:	68 e2       	ldi	r22, 0x28	; 40
    10be:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <x2>
    10c2:	0e 94 a3 07 	call	0xf46	; 0xf46 <point>
									break;
    10c6:	28 c0       	rjmp	.+80     	; 0x1118 <point+0x1d2>
								}
								TIMER_Delay_ms(40);
    10c8:	88 e2       	ldi	r24, 0x28	; 40
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 5c 05 	call	0xab8	; 0xab8 <TIMER_Delay_ms>
							}
							if (j == 0) {
    10d0:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <j>
    10d4:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <j+0x1>
    10d8:	61 15       	cp	r22, r1
    10da:	71 05       	cpc	r23, r1
    10dc:	39 f4       	brne	.+14     	; 0x10ec <point+0x1a6>
								CLCD_voidGoTOxy(x, j);
    10de:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <x>
    10e2:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
								CLCD_voidSendData(' ');
    10e6:	80 e2       	ldi	r24, 0x20	; 32
    10e8:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
			KEY_VALUE = key();
			if (KEY_VALUE != 0xff) {
				if (KEY_VALUE != 1 && KEY_VALUE != 3) {
					if (KEY_VALUE == 4) {
						BUZZ();
						for (j = y - 1; j >= 0; j--) {
    10ec:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <j>
    10f0:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <j+0x1>
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <j+0x1>
    10fa:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <j>
    10fe:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <j>
    1102:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <j+0x1>
    1106:	99 23       	and	r25, r25
    1108:	0c f0       	brlt	.+2      	; 0x110c <point+0x1c6>
    110a:	89 cf       	rjmp	.-238    	; 0x101e <point+0xd8>
    110c:	05 c0       	rjmp	.+10     	; 0x1118 <point+0x1d2>
								CLCD_voidGoTOxy(x, j);
								CLCD_voidSendData(' ');
							}
						}
					} else
					CLCD_voidGoTOxy(copy_x2, i);
    110e:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <i>
    1112:	8c 2f       	mov	r24, r28
    1114:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
					CLCD_voidSendData(' ');
    1118:	80 e2       	ldi	r24, 0x20	; 32
    111a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
					move_xchar1(40);
    111e:	88 e2       	ldi	r24, 0x28	; 40
    1120:	0e 94 5d 06 	call	0xcba	; 0xcba <move_xchar1>
					break;
    1124:	25 c0       	rjmp	.+74     	; 0x1170 <point+0x22a>
				} else
				move_ychar1(KEY_VALUE);
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 11 06 	call	0xc22	; 0xc22 <move_ychar1>
			}
			TIMER_Delay_ms(70);
    112c:	86 e4       	ldi	r24, 0x46	; 70
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 5c 05 	call	0xab8	; 0xab8 <TIMER_Delay_ms>
		}
		if (i == 15) {
    1134:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <i>
    1138:	70 91 36 02 	lds	r23, 0x0236	; 0x800236 <i+0x1>
    113c:	6f 30       	cpi	r22, 0x0F	; 15
    113e:	71 05       	cpc	r23, r1
    1140:	31 f4       	brne	.+12     	; 0x114e <point+0x208>
			CLCD_voidGoTOxy(copy_x2, i);
    1142:	8c 2f       	mov	r24, r28
    1144:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			CLCD_voidSendData(' ');
    1148:	80 e2       	ldi	r24, 0x20	; 32
    114a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>

void point(uint8_t copy_x2, uint8_t delay) {
	BUZZ();

	// shot2
	for (i = 1; i < 16; i++) {
    114e:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <i>
    1152:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <i+0x1>
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <i+0x1>
    115c:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <i>
    1160:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <i>
    1164:	70 91 36 02 	lds	r23, 0x0236	; 0x800236 <i+0x1>
    1168:	60 31       	cpi	r22, 0x10	; 16
    116a:	71 05       	cpc	r23, r1
    116c:	0c f4       	brge	.+2      	; 0x1170 <point+0x22a>
    116e:	f8 ce       	rjmp	.-528    	; 0xf60 <point+0x1a>
		if (i == 15) {
			CLCD_voidGoTOxy(copy_x2, i);
			CLCD_voidSendData(' ');
		}
	}
}
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	08 95       	ret

00001176 <pointmid>:
void pointmid(uint8_t copy_x2, uint8_t delay) {
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	c8 2f       	mov	r28, r24
    117c:	d6 2f       	mov	r29, r22
	BUZZ();
    117e:	0e 94 80 07 	call	0xf00	; 0xf00 <BUZZ>

	// shot2
	for (i = 1; i < 16; i++) {
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <i+0x1>
    118a:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <i>
    118e:	00 c1       	rjmp	.+512    	; 0x1390 <pointmid+0x21a>
		if (copy_x2 == x && i == y || x2 == x && y == y2) {
    1190:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <x>
    1194:	8c 13       	cpse	r24, r28
    1196:	06 c0       	rjmp	.+12     	; 0x11a4 <pointmid+0x2e>
    1198:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <y>
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	62 17       	cp	r22, r18
    11a0:	73 07       	cpc	r23, r19
    11a2:	51 f0       	breq	.+20     	; 0x11b8 <pointmid+0x42>
    11a4:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <x2>
    11a8:	89 13       	cpse	r24, r25
    11aa:	23 c0       	rjmp	.+70     	; 0x11f2 <pointmid+0x7c>
    11ac:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <y>
    11b0:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <y2>
    11b4:	98 13       	cpse	r25, r24
    11b6:	1d c0       	rjmp	.+58     	; 0x11f2 <pointmid+0x7c>
			BUZZ2();
    11b8:	0e 94 90 07 	call	0xf20	; 0xf20 <BUZZ2>
			move_xchar1(delay);
    11bc:	8d 2f       	mov	r24, r29
    11be:	0e 94 5d 06 	call	0xcba	; 0xcba <move_xchar1>
			CLCD_voidSendSpecialChar(customChar3, 3, x, y);
    11c2:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <y>
    11c6:	40 91 13 02 	lds	r20, 0x0213	; 0x800213 <x>
    11ca:	63 e0       	ldi	r22, 0x03	; 3
    11cc:	82 e9       	ldi	r24, 0x92	; 146
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
			game_over_flag = 1;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <game_over_flag>
    11da:	2f eb       	ldi	r18, 0xBF	; 191
    11dc:	87 e2       	ldi	r24, 0x27	; 39
    11de:	99 e0       	ldi	r25, 0x09	; 9
    11e0:	21 50       	subi	r18, 0x01	; 1
    11e2:	80 40       	sbci	r24, 0x00	; 0
    11e4:	90 40       	sbci	r25, 0x00	; 0
    11e6:	e1 f7       	brne	.-8      	; 0x11e0 <pointmid+0x6a>
    11e8:	00 c0       	rjmp	.+0      	; 0x11ea <pointmid+0x74>
    11ea:	00 00       	nop
			_delay_ms(3000);
			GAME_OVER();
    11ec:	0e 94 07 07 	call	0xe0e	; 0xe0e <GAME_OVER>
			break;
    11f0:	d7 c0       	rjmp	.+430    	; 0x13a0 <pointmid+0x22a>
		}

		if (i != 1) {
    11f2:	61 30       	cpi	r22, 0x01	; 1
    11f4:	71 05       	cpc	r23, r1
    11f6:	09 f4       	brne	.+2      	; 0x11fa <pointmid+0x84>
    11f8:	b5 c0       	rjmp	.+362    	; 0x1364 <pointmid+0x1ee>
			CLCD_voidGoTOxy(copy_x2, i - 1);
    11fa:	61 50       	subi	r22, 0x01	; 1
    11fc:	8c 2f       	mov	r24, r28
    11fe:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			CLCD_voidSendData(' ');
    1202:	80 e2       	ldi	r24, 0x20	; 32
    1204:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
			CLCD_voidSendSpecialChar(shot, 2, copy_x2, i);
    1208:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <i>
    120c:	4c 2f       	mov	r20, r28
    120e:	62 e0       	ldi	r22, 0x02	; 2
    1210:	8a e8       	ldi	r24, 0x8A	; 138
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>

			// Check for key press and break the loop if a key is pressed
			KEY_VALUE = key();
    1218:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <key>
    121c:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <KEY_VALUE>
			if (KEY_VALUE != 0xff) {
    1220:	8f 3f       	cpi	r24, 0xFF	; 255
    1222:	09 f4       	brne	.+2      	; 0x1226 <pointmid+0xb0>
    1224:	9b c0       	rjmp	.+310    	; 0x135c <pointmid+0x1e6>
				if (KEY_VALUE != 1 && KEY_VALUE != 3) {
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	09 f4       	brne	.+2      	; 0x122c <pointmid+0xb6>
    122a:	95 c0       	rjmp	.+298    	; 0x1356 <pointmid+0x1e0>
    122c:	83 30       	cpi	r24, 0x03	; 3
    122e:	09 f4       	brne	.+2      	; 0x1232 <pointmid+0xbc>
    1230:	92 c0       	rjmp	.+292    	; 0x1356 <pointmid+0x1e0>
					if (KEY_VALUE == 4) {
    1232:	84 30       	cpi	r24, 0x04	; 4
    1234:	09 f0       	breq	.+2      	; 0x1238 <pointmid+0xc2>
    1236:	83 c0       	rjmp	.+262    	; 0x133e <pointmid+0x1c8>
						BUZZ();
    1238:	0e 94 80 07 	call	0xf00	; 0xf00 <BUZZ>
						for (j = y - 1; j >= 0; j--) {
    123c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <y>
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <j+0x1>
    1248:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <j>
    124c:	70 c0       	rjmp	.+224    	; 0x132e <pointmid+0x1b8>
							if (x == x2 && j == y2) {
    124e:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <x>
    1252:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <x2>
    1256:	32 13       	cpse	r19, r18
    1258:	22 c0       	rjmp	.+68     	; 0x129e <pointmid+0x128>
    125a:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <y2>
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	82 17       	cp	r24, r18
    1262:	93 07       	cpc	r25, r19
    1264:	e1 f4       	brne	.+56     	; 0x129e <pointmid+0x128>
								BUZZ2();
    1266:	0e 94 90 07 	call	0xf20	; 0xf20 <BUZZ2>
								move_xchar1(delay);
    126a:	8d 2f       	mov	r24, r29
    126c:	0e 94 5d 06 	call	0xcba	; 0xcba <move_xchar1>
								CLCD_voidSendSpecialChar(customChar3, 3, x2, y2);
    1270:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <y2>
    1274:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <x2>
    1278:	63 e0       	ldi	r22, 0x03	; 3
    127a:	82 e9       	ldi	r24, 0x92	; 146
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
								game_over_flag = 1;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <game_over_flag>
    1288:	2f eb       	ldi	r18, 0xBF	; 191
    128a:	87 e2       	ldi	r24, 0x27	; 39
    128c:	99 e0       	ldi	r25, 0x09	; 9
    128e:	21 50       	subi	r18, 0x01	; 1
    1290:	80 40       	sbci	r24, 0x00	; 0
    1292:	90 40       	sbci	r25, 0x00	; 0
    1294:	e1 f7       	brne	.-8      	; 0x128e <pointmid+0x118>
    1296:	00 c0       	rjmp	.+0      	; 0x1298 <pointmid+0x122>
    1298:	00 00       	nop
								_delay_ms(3000);
								won();
    129a:	0e 94 24 07 	call	0xe48	; 0xe48 <won>
							}

							if (j != 14) {
    129e:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <j>
    12a2:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <j+0x1>
    12a6:	6e 30       	cpi	r22, 0x0E	; 14
    12a8:	71 05       	cpc	r23, r1
    12aa:	51 f1       	breq	.+84     	; 0x1300 <pointmid+0x18a>
								CLCD_voidGoTOxy(x, j + 1);
    12ac:	6f 5f       	subi	r22, 0xFF	; 255
    12ae:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <x>
    12b2:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
								CLCD_voidSendData(' ');
    12b6:	80 e2       	ldi	r24, 0x20	; 32
    12b8:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
								CLCD_voidSendSpecialChar(shot2, 4, x, j);
    12bc:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <j>
    12c0:	40 91 13 02 	lds	r20, 0x0213	; 0x800213 <x>
    12c4:	64 e0       	ldi	r22, 0x04	; 4
    12c6:	82 e8       	ldi	r24, 0x82	; 130
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
								// Check for key press and break the loop if a key is pressed
								KEY_VALUE = key();
    12ce:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <key>
    12d2:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <KEY_VALUE>
								if (KEY_VALUE != 0xff) {
    12d6:	8f 3f       	cpi	r24, 0xFF	; 255
    12d8:	79 f0       	breq	.+30     	; 0x12f8 <pointmid+0x182>
									CLCD_voidGoTOxy(x, j);
    12da:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <j>
    12de:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <x>
    12e2:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
									CLCD_voidSendData(' ');
    12e6:	80 e2       	ldi	r24, 0x20	; 32
    12e8:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
									pointmid(x2, 40);
    12ec:	68 e2       	ldi	r22, 0x28	; 40
    12ee:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <x2>
    12f2:	0e 94 bb 08 	call	0x1176	; 0x1176 <pointmid>
									break;
    12f6:	28 c0       	rjmp	.+80     	; 0x1348 <pointmid+0x1d2>
								}
								TIMER_Delay_ms(50);
    12f8:	82 e3       	ldi	r24, 0x32	; 50
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	0e 94 5c 05 	call	0xab8	; 0xab8 <TIMER_Delay_ms>
							}
							if (j == 0) {
    1300:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <j>
    1304:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <j+0x1>
    1308:	61 15       	cp	r22, r1
    130a:	71 05       	cpc	r23, r1
    130c:	39 f4       	brne	.+14     	; 0x131c <pointmid+0x1a6>
								CLCD_voidGoTOxy(x, j);
    130e:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <x>
    1312:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
								CLCD_voidSendData(' ');
    1316:	80 e2       	ldi	r24, 0x20	; 32
    1318:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
			KEY_VALUE = key();
			if (KEY_VALUE != 0xff) {
				if (KEY_VALUE != 1 && KEY_VALUE != 3) {
					if (KEY_VALUE == 4) {
						BUZZ();
						for (j = y - 1; j >= 0; j--) {
    131c:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <j>
    1320:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <j+0x1>
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <j+0x1>
    132a:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <j>
    132e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <j>
    1332:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <j+0x1>
    1336:	99 23       	and	r25, r25
    1338:	0c f0       	brlt	.+2      	; 0x133c <pointmid+0x1c6>
    133a:	89 cf       	rjmp	.-238    	; 0x124e <pointmid+0xd8>
    133c:	05 c0       	rjmp	.+10     	; 0x1348 <pointmid+0x1d2>
								CLCD_voidGoTOxy(x, j);
								CLCD_voidSendData(' ');
							}
						}
					} else
					CLCD_voidGoTOxy(copy_x2, i);
    133e:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <i>
    1342:	8c 2f       	mov	r24, r28
    1344:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
					CLCD_voidSendData(' ');
    1348:	80 e2       	ldi	r24, 0x20	; 32
    134a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
					move_xchar1(40);
    134e:	88 e2       	ldi	r24, 0x28	; 40
    1350:	0e 94 5d 06 	call	0xcba	; 0xcba <move_xchar1>
					break;
    1354:	25 c0       	rjmp	.+74     	; 0x13a0 <pointmid+0x22a>
				} else
				move_ychar1(KEY_VALUE);
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 11 06 	call	0xc22	; 0xc22 <move_ychar1>
			}
			TIMER_Delay_ms(40);
    135c:	88 e2       	ldi	r24, 0x28	; 40
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	0e 94 5c 05 	call	0xab8	; 0xab8 <TIMER_Delay_ms>
		}
		if (i == 15) {
    1364:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <i>
    1368:	70 91 36 02 	lds	r23, 0x0236	; 0x800236 <i+0x1>
    136c:	6f 30       	cpi	r22, 0x0F	; 15
    136e:	71 05       	cpc	r23, r1
    1370:	31 f4       	brne	.+12     	; 0x137e <pointmid+0x208>
			CLCD_voidGoTOxy(copy_x2, i);
    1372:	8c 2f       	mov	r24, r28
    1374:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			CLCD_voidSendData(' ');
    1378:	80 e2       	ldi	r24, 0x20	; 32
    137a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
}
void pointmid(uint8_t copy_x2, uint8_t delay) {
	BUZZ();

	// shot2
	for (i = 1; i < 16; i++) {
    137e:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <i>
    1382:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <i+0x1>
    1386:	01 96       	adiw	r24, 0x01	; 1
    1388:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <i+0x1>
    138c:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <i>
    1390:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <i>
    1394:	70 91 36 02 	lds	r23, 0x0236	; 0x800236 <i+0x1>
    1398:	60 31       	cpi	r22, 0x10	; 16
    139a:	71 05       	cpc	r23, r1
    139c:	0c f4       	brge	.+2      	; 0x13a0 <pointmid+0x22a>
    139e:	f8 ce       	rjmp	.-528    	; 0x1190 <pointmid+0x1a>
		if (i == 15) {
			CLCD_voidGoTOxy(copy_x2, i);
			CLCD_voidSendData(' ');
		}
	}
}
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	08 95       	ret

000013a6 <pointhard>:
void pointhard(uint8_t copy_x2, uint8_t delay) {
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	c8 2f       	mov	r28, r24
    13ac:	d6 2f       	mov	r29, r22
	BUZZ();
    13ae:	0e 94 80 07 	call	0xf00	; 0xf00 <BUZZ>

	// shot2
	for (i = 1; i < 16; i++) {
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <i+0x1>
    13ba:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <i>
    13be:	00 c1       	rjmp	.+512    	; 0x15c0 <pointhard+0x21a>
		if (copy_x2 == x && i == y || x2 == x && y == y2) {
    13c0:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <x>
    13c4:	8c 13       	cpse	r24, r28
    13c6:	06 c0       	rjmp	.+12     	; 0x13d4 <pointhard+0x2e>
    13c8:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <y>
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	62 17       	cp	r22, r18
    13d0:	73 07       	cpc	r23, r19
    13d2:	51 f0       	breq	.+20     	; 0x13e8 <pointhard+0x42>
    13d4:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <x2>
    13d8:	89 13       	cpse	r24, r25
    13da:	23 c0       	rjmp	.+70     	; 0x1422 <pointhard+0x7c>
    13dc:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <y>
    13e0:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <y2>
    13e4:	98 13       	cpse	r25, r24
    13e6:	1d c0       	rjmp	.+58     	; 0x1422 <pointhard+0x7c>
			BUZZ2();
    13e8:	0e 94 90 07 	call	0xf20	; 0xf20 <BUZZ2>
			move_xchar1(delay);
    13ec:	8d 2f       	mov	r24, r29
    13ee:	0e 94 5d 06 	call	0xcba	; 0xcba <move_xchar1>
			CLCD_voidSendSpecialChar(customChar3, 3, x, y);
    13f2:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <y>
    13f6:	40 91 13 02 	lds	r20, 0x0213	; 0x800213 <x>
    13fa:	63 e0       	ldi	r22, 0x03	; 3
    13fc:	82 e9       	ldi	r24, 0x92	; 146
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
			game_over_flag = 1;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <game_over_flag>
    140a:	2f eb       	ldi	r18, 0xBF	; 191
    140c:	87 e2       	ldi	r24, 0x27	; 39
    140e:	99 e0       	ldi	r25, 0x09	; 9
    1410:	21 50       	subi	r18, 0x01	; 1
    1412:	80 40       	sbci	r24, 0x00	; 0
    1414:	90 40       	sbci	r25, 0x00	; 0
    1416:	e1 f7       	brne	.-8      	; 0x1410 <pointhard+0x6a>
    1418:	00 c0       	rjmp	.+0      	; 0x141a <pointhard+0x74>
    141a:	00 00       	nop
			_delay_ms(3000);
			GAME_OVER();
    141c:	0e 94 07 07 	call	0xe0e	; 0xe0e <GAME_OVER>
			break;
    1420:	d7 c0       	rjmp	.+430    	; 0x15d0 <pointhard+0x22a>
		}

		if (i != 1) {
    1422:	61 30       	cpi	r22, 0x01	; 1
    1424:	71 05       	cpc	r23, r1
    1426:	09 f4       	brne	.+2      	; 0x142a <pointhard+0x84>
    1428:	b5 c0       	rjmp	.+362    	; 0x1594 <pointhard+0x1ee>
			CLCD_voidGoTOxy(copy_x2, i - 1);
    142a:	61 50       	subi	r22, 0x01	; 1
    142c:	8c 2f       	mov	r24, r28
    142e:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			CLCD_voidSendData(' ');
    1432:	80 e2       	ldi	r24, 0x20	; 32
    1434:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
			CLCD_voidSendSpecialChar(shot, 2, copy_x2, i);
    1438:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <i>
    143c:	4c 2f       	mov	r20, r28
    143e:	62 e0       	ldi	r22, 0x02	; 2
    1440:	8a e8       	ldi	r24, 0x8A	; 138
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>

			// Check for key press and break the loop if a key is pressed
			KEY_VALUE = key();
    1448:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <key>
    144c:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <KEY_VALUE>
			if (KEY_VALUE != 0xff) {
    1450:	8f 3f       	cpi	r24, 0xFF	; 255
    1452:	09 f4       	brne	.+2      	; 0x1456 <pointhard+0xb0>
    1454:	9b c0       	rjmp	.+310    	; 0x158c <pointhard+0x1e6>
				if (KEY_VALUE != 1 && KEY_VALUE != 3) {
    1456:	81 30       	cpi	r24, 0x01	; 1
    1458:	09 f4       	brne	.+2      	; 0x145c <pointhard+0xb6>
    145a:	95 c0       	rjmp	.+298    	; 0x1586 <pointhard+0x1e0>
    145c:	83 30       	cpi	r24, 0x03	; 3
    145e:	09 f4       	brne	.+2      	; 0x1462 <pointhard+0xbc>
    1460:	92 c0       	rjmp	.+292    	; 0x1586 <pointhard+0x1e0>
					if (KEY_VALUE == 4) {
    1462:	84 30       	cpi	r24, 0x04	; 4
    1464:	09 f0       	breq	.+2      	; 0x1468 <pointhard+0xc2>
    1466:	83 c0       	rjmp	.+262    	; 0x156e <pointhard+0x1c8>
						BUZZ();
    1468:	0e 94 80 07 	call	0xf00	; 0xf00 <BUZZ>
						for (j = y - 1; j >= 0; j--) {
    146c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <y>
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <j+0x1>
    1478:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <j>
    147c:	70 c0       	rjmp	.+224    	; 0x155e <pointhard+0x1b8>
							if (x == x2 && j == y2) {
    147e:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <x>
    1482:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <x2>
    1486:	32 13       	cpse	r19, r18
    1488:	22 c0       	rjmp	.+68     	; 0x14ce <pointhard+0x128>
    148a:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <y2>
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	82 17       	cp	r24, r18
    1492:	93 07       	cpc	r25, r19
    1494:	e1 f4       	brne	.+56     	; 0x14ce <pointhard+0x128>
								BUZZ2();
    1496:	0e 94 90 07 	call	0xf20	; 0xf20 <BUZZ2>
								move_xchar1(delay);
    149a:	8d 2f       	mov	r24, r29
    149c:	0e 94 5d 06 	call	0xcba	; 0xcba <move_xchar1>
								CLCD_voidSendSpecialChar(customChar3, 3, x2, y2);
    14a0:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <y2>
    14a4:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <x2>
    14a8:	63 e0       	ldi	r22, 0x03	; 3
    14aa:	82 e9       	ldi	r24, 0x92	; 146
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
								game_over_flag = 1;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <game_over_flag>
    14b8:	2f eb       	ldi	r18, 0xBF	; 191
    14ba:	87 e2       	ldi	r24, 0x27	; 39
    14bc:	99 e0       	ldi	r25, 0x09	; 9
    14be:	21 50       	subi	r18, 0x01	; 1
    14c0:	80 40       	sbci	r24, 0x00	; 0
    14c2:	90 40       	sbci	r25, 0x00	; 0
    14c4:	e1 f7       	brne	.-8      	; 0x14be <pointhard+0x118>
    14c6:	00 c0       	rjmp	.+0      	; 0x14c8 <pointhard+0x122>
    14c8:	00 00       	nop
								_delay_ms(3000);
								won();
    14ca:	0e 94 24 07 	call	0xe48	; 0xe48 <won>
							}

							if (j != 14) {
    14ce:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <j>
    14d2:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <j+0x1>
    14d6:	6e 30       	cpi	r22, 0x0E	; 14
    14d8:	71 05       	cpc	r23, r1
    14da:	51 f1       	breq	.+84     	; 0x1530 <pointhard+0x18a>
								CLCD_voidGoTOxy(x, j + 1);
    14dc:	6f 5f       	subi	r22, 0xFF	; 255
    14de:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <x>
    14e2:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
								CLCD_voidSendData(' ');
    14e6:	80 e2       	ldi	r24, 0x20	; 32
    14e8:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
								CLCD_voidSendSpecialChar(shot2, 4, x, j);
    14ec:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <j>
    14f0:	40 91 13 02 	lds	r20, 0x0213	; 0x800213 <x>
    14f4:	64 e0       	ldi	r22, 0x04	; 4
    14f6:	82 e8       	ldi	r24, 0x82	; 130
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>

								// Check for key press and break the loop if a key is pressed
								KEY_VALUE = key();
    14fe:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <key>
    1502:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <KEY_VALUE>
								if (KEY_VALUE != 0xff) {
    1506:	8f 3f       	cpi	r24, 0xFF	; 255
    1508:	79 f0       	breq	.+30     	; 0x1528 <pointhard+0x182>
									CLCD_voidGoTOxy(x, j);
    150a:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <j>
    150e:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <x>
    1512:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
									CLCD_voidSendData(' ');
    1516:	80 e2       	ldi	r24, 0x20	; 32
    1518:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
									point(x2, 40);
    151c:	68 e2       	ldi	r22, 0x28	; 40
    151e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <x2>
    1522:	0e 94 a3 07 	call	0xf46	; 0xf46 <point>
									break;
    1526:	28 c0       	rjmp	.+80     	; 0x1578 <pointhard+0x1d2>
								}
								TIMER_Delay_ms(40);
    1528:	88 e2       	ldi	r24, 0x28	; 40
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 5c 05 	call	0xab8	; 0xab8 <TIMER_Delay_ms>
							}
							if (j == 0) {
    1530:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <j>
    1534:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <j+0x1>
    1538:	61 15       	cp	r22, r1
    153a:	71 05       	cpc	r23, r1
    153c:	39 f4       	brne	.+14     	; 0x154c <pointhard+0x1a6>
								CLCD_voidGoTOxy(x, j);
    153e:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <x>
    1542:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
								CLCD_voidSendData(' ');
    1546:	80 e2       	ldi	r24, 0x20	; 32
    1548:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
			KEY_VALUE = key();
			if (KEY_VALUE != 0xff) {
				if (KEY_VALUE != 1 && KEY_VALUE != 3) {
					if (KEY_VALUE == 4) {
						BUZZ();
						for (j = y - 1; j >= 0; j--) {
    154c:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <j>
    1550:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <j+0x1>
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <j+0x1>
    155a:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <j>
    155e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <j>
    1562:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <j+0x1>
    1566:	99 23       	and	r25, r25
    1568:	0c f0       	brlt	.+2      	; 0x156c <pointhard+0x1c6>
    156a:	89 cf       	rjmp	.-238    	; 0x147e <pointhard+0xd8>
    156c:	05 c0       	rjmp	.+10     	; 0x1578 <pointhard+0x1d2>
								CLCD_voidGoTOxy(x, j);
								CLCD_voidSendData(' ');
							}
						}
					} else
					CLCD_voidGoTOxy(copy_x2, i);
    156e:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <i>
    1572:	8c 2f       	mov	r24, r28
    1574:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
					CLCD_voidSendData(' ');
    1578:	80 e2       	ldi	r24, 0x20	; 32
    157a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
					move_xchar1(40);
    157e:	88 e2       	ldi	r24, 0x28	; 40
    1580:	0e 94 5d 06 	call	0xcba	; 0xcba <move_xchar1>
					break;
    1584:	25 c0       	rjmp	.+74     	; 0x15d0 <pointhard+0x22a>
				} else
				move_ychar1(KEY_VALUE);
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	0e 94 11 06 	call	0xc22	; 0xc22 <move_ychar1>
			}
			TIMER_Delay_ms(39);
    158c:	87 e2       	ldi	r24, 0x27	; 39
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 5c 05 	call	0xab8	; 0xab8 <TIMER_Delay_ms>
		}
		if (i == 15) {
    1594:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <i>
    1598:	70 91 36 02 	lds	r23, 0x0236	; 0x800236 <i+0x1>
    159c:	6f 30       	cpi	r22, 0x0F	; 15
    159e:	71 05       	cpc	r23, r1
    15a0:	31 f4       	brne	.+12     	; 0x15ae <pointhard+0x208>
			CLCD_voidGoTOxy(copy_x2, i);
    15a2:	8c 2f       	mov	r24, r28
    15a4:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			CLCD_voidSendData(' ');
    15a8:	80 e2       	ldi	r24, 0x20	; 32
    15aa:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
}
void pointhard(uint8_t copy_x2, uint8_t delay) {
	BUZZ();

	// shot2
	for (i = 1; i < 16; i++) {
    15ae:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <i>
    15b2:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <i+0x1>
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <i+0x1>
    15bc:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <i>
    15c0:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <i>
    15c4:	70 91 36 02 	lds	r23, 0x0236	; 0x800236 <i+0x1>
    15c8:	60 31       	cpi	r22, 0x10	; 16
    15ca:	71 05       	cpc	r23, r1
    15cc:	0c f4       	brge	.+2      	; 0x15d0 <pointhard+0x22a>
    15ce:	f8 ce       	rjmp	.-528    	; 0x13c0 <pointhard+0x1a>
		if (i == 15) {
			CLCD_voidGoTOxy(copy_x2, i);
			CLCD_voidSendData(' ');
		}
	}
}
    15d0:	df 91       	pop	r29
    15d2:	cf 91       	pop	r28
    15d4:	08 95       	ret

000015d6 <game>:


void game() 
{
	uint8_t current_score = game_time_seconds;
    15d6:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <game_time_seconds>
    15da:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <game_time_seconds+0x1>
    15de:	a0 91 0b 02 	lds	r26, 0x020B	; 0x80020b <game_time_seconds+0x2>
    15e2:	b0 91 0c 02 	lds	r27, 0x020C	; 0x80020c <game_time_seconds+0x3>

	if (out_flag == 1) {
    15e6:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <out_flag>
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	19 f4       	brne	.+6      	; 0x15f4 <game+0x1e>
		CLCD_ClearDisplay();
    15ee:	0e 94 09 05 	call	0xa12	; 0xa12 <CLCD_ClearDisplay>
		return;
    15f2:	08 95       	ret
	}

	if (game_over_flag == 1) {
    15f4:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <game_over_flag>
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	89 f4       	brne	.+34     	; 0x161e <game+0x48>
		game_over_flag = 0;
    15fc:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <game_over_flag>
		i = 1, x = 0, y = 15, x2 = 0, y2 = 0;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <i+0x1>
    1608:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <i>
    160c:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <x>
    1610:	8f e0       	ldi	r24, 0x0F	; 15
    1612:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <y>
    1616:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <x2>
    161a:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <y2>

		// Game over condition is met, exit the game loop
		// return;
	}

	TIMER0_Init();
    161e:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <TIMER0_Init>
	SevenSegments_PowerON();
    1622:	0e 94 38 15 	call	0x2a70	; 0x2a70 <SevenSegments_PowerON>
	game_time_seconds = 0;
    1626:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <game_time_seconds>
    162a:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <game_time_seconds+0x1>
    162e:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <game_time_seconds+0x2>
    1632:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <game_time_seconds+0x3>
	CLCD_voidGoTOxy(0, 0);
    1636:	60 e0       	ldi	r22, 0x00	; 0
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidPrintString("WELCOME, Cowboy");
    163e:	80 e4       	ldi	r24, 0x40	; 64
    1640:	91 e0       	ldi	r25, 0x01	; 1
    1642:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
	CLCD_voidGoTOxy(1, 0);
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidPrintString("1-Easy");
    164e:	80 e5       	ldi	r24, 0x50	; 80
    1650:	91 e0       	ldi	r25, 0x01	; 1
    1652:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
	CLCD_voidGoTOxy(2, 0);
    1656:	60 e0       	ldi	r22, 0x00	; 0
    1658:	82 e0       	ldi	r24, 0x02	; 2
    165a:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidPrintString("2-Med");
    165e:	87 e5       	ldi	r24, 0x57	; 87
    1660:	91 e0       	ldi	r25, 0x01	; 1
    1662:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
	CLCD_voidGoTOxy(3, 0);
    1666:	60 e0       	ldi	r22, 0x00	; 0
    1668:	83 e0       	ldi	r24, 0x03	; 3
    166a:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidPrintString("3-Hard");
    166e:	8d e5       	ldi	r24, 0x5D	; 93
    1670:	91 e0       	ldi	r25, 0x01	; 1
    1672:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
	uint8_t KPDVALUE = key();
    1676:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <key>

	if (KPDVALUE == 0) {
    167a:	81 11       	cpse	r24, r1
    167c:	15 c0       	rjmp	.+42     	; 0x16a8 <game+0xd2>
		TIMER0_Init();
    167e:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <TIMER0_Init>
		CLCD_ClearDisplay();
    1682:	0e 94 09 05 	call	0xa12	; 0xa12 <CLCD_ClearDisplay>
		INIT_POSITION();
    1686:	0e 94 02 06 	call	0xc04	; 0xc04 <INIT_POSITION>
		TIMER0_Init();
    168a:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <TIMER0_Init>
		uint8_t level_up = 0;
		while (1) {
			// Check the game_over_flag
			if (game_over_flag == 1) {
    168e:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <game_over_flag>
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	a1 f1       	breq	.+104    	; 0x16fe <game+0x128>
				// Game over condition is met, exit the game loop
				break;
			}
			point(x2, 40);
    1696:	68 e2       	ldi	r22, 0x28	; 40
    1698:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <x2>
    169c:	0e 94 a3 07 	call	0xf46	; 0xf46 <point>
			// level_up=level_up+10;
				game_End=1;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <game_End>
		}
    16a6:	f3 cf       	rjmp	.-26     	; 0x168e <game+0xb8>
		} else if (KPDVALUE == 1) {
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	a1 f4       	brne	.+40     	; 0x16d4 <game+0xfe>
		TIMER0_Init();
    16ac:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <TIMER0_Init>
		CLCD_ClearDisplay();
    16b0:	0e 94 09 05 	call	0xa12	; 0xa12 <CLCD_ClearDisplay>
		INIT_POSITION();
    16b4:	0e 94 02 06 	call	0xc04	; 0xc04 <INIT_POSITION>
		uint8_t level_up = 0;
		while (1) {
			// Check the game_over_flag
			if (game_over_flag == 1) {
    16b8:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <game_over_flag>
    16bc:	81 30       	cpi	r24, 0x01	; 1
    16be:	31 f0       	breq	.+12     	; 0x16cc <game+0xf6>
				// Game over condition is met, exit the game loop
				break;
			}
			pointmid(x2, 40);
    16c0:	68 e2       	ldi	r22, 0x28	; 40
    16c2:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <x2>
    16c6:	0e 94 bb 08 	call	0x1176	; 0x1176 <pointmid>
			// level_up=level_up+10;
		}
    16ca:	f6 cf       	rjmp	.-20     	; 0x16b8 <game+0xe2>
		game_End=1;
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <game_End>
    16d2:	08 95       	ret
		}
			
		 else if (KPDVALUE == 2) 
    16d4:	82 30       	cpi	r24, 0x02	; 2
    16d6:	99 f4       	brne	.+38     	; 0x16fe <game+0x128>
		 {
		TIMER0_Init();
    16d8:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <TIMER0_Init>
		CLCD_ClearDisplay();
    16dc:	0e 94 09 05 	call	0xa12	; 0xa12 <CLCD_ClearDisplay>
		INIT_POSITION();
    16e0:	0e 94 02 06 	call	0xc04	; 0xc04 <INIT_POSITION>
		uint8_t level_up = 0;
		while (1) {
			// Check the game_over_flag
			if (game_over_flag == 1) {
    16e4:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <game_over_flag>
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	31 f0       	breq	.+12     	; 0x16f8 <game+0x122>
				// Game over condition is met, exit the game loop
				break;
				
			}
			pointhard(x2, 40);
    16ec:	68 e2       	ldi	r22, 0x28	; 40
    16ee:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <x2>
    16f2:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <pointhard>
			// level_up=level_up+10;
		}
    16f6:	f6 cf       	rjmp	.-20     	; 0x16e4 <game+0x10e>
		game_End=1;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <game_End>
    16fe:	08 95       	ret

00001700 <COW_BOY>:
	TIMER_Delay_ms(2000);
	CLCD_ClearDisplay();
}

void COW_BOY() {
	TIMER1_Init();
    1700:	0e 94 4d 05 	call	0xa9a	; 0xa9a <TIMER1_Init>
	TIMER0_Init();
    1704:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <TIMER0_Init>
	sei();
    1708:	78 94       	sei
	
	while(game_End==0)
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <COW_BOY+0x10>
	{
		game();
    170c:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <game>
void COW_BOY() {
	TIMER1_Init();
	TIMER0_Init();
	sei();
	
	while(game_End==0)
    1710:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <game_End>
    1714:	88 23       	and	r24, r24
    1716:	d1 f3       	breq	.-12     	; 0x170c <COW_BOY+0xc>
	{
		game();
		
	}
	
}
    1718:	08 95       	ret

0000171a <DIO_u8SetPortValue>:

		}
	}
return Local_u8ErrorState;

}
    171a:	84 30       	cpi	r24, 0x04	; 4
    171c:	a0 f4       	brcc	.+40     	; 0x1746 <DIO_u8SetPortValue+0x2c>
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	49 f0       	breq	.+18     	; 0x1734 <DIO_u8SetPortValue+0x1a>
    1722:	28 f0       	brcs	.+10     	; 0x172e <DIO_u8SetPortValue+0x14>
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	49 f0       	breq	.+18     	; 0x173a <DIO_u8SetPortValue+0x20>
    1728:	83 30       	cpi	r24, 0x03	; 3
    172a:	51 f0       	breq	.+20     	; 0x1740 <DIO_u8SetPortValue+0x26>
    172c:	0e c0       	rjmp	.+28     	; 0x174a <DIO_u8SetPortValue+0x30>
    172e:	6b bb       	out	0x1b, r22	; 27
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	08 95       	ret
    1734:	68 bb       	out	0x18, r22	; 24
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	08 95       	ret
    173a:	65 bb       	out	0x15, r22	; 21
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	08 95       	ret
    1740:	62 bb       	out	0x12, r22	; 18
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	08 95       	ret
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	08 95       	ret
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	08 95       	ret

0000174e <DIO_u8SetPinValue>:
    174e:	84 30       	cpi	r24, 0x04	; 4
    1750:	08 f0       	brcs	.+2      	; 0x1754 <DIO_u8SetPinValue+0x6>
    1752:	7b c0       	rjmp	.+246    	; 0x184a <DIO_u8SetPinValue+0xfc>
    1754:	68 30       	cpi	r22, 0x08	; 8
    1756:	08 f0       	brcs	.+2      	; 0x175a <DIO_u8SetPinValue+0xc>
    1758:	7a c0       	rjmp	.+244    	; 0x184e <DIO_u8SetPinValue+0x100>
    175a:	41 30       	cpi	r20, 0x01	; 1
    175c:	c1 f5       	brne	.+112    	; 0x17ce <DIO_u8SetPinValue+0x80>
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	91 f0       	breq	.+36     	; 0x1786 <DIO_u8SetPinValue+0x38>
    1762:	28 f0       	brcs	.+10     	; 0x176e <DIO_u8SetPinValue+0x20>
    1764:	82 30       	cpi	r24, 0x02	; 2
    1766:	d9 f0       	breq	.+54     	; 0x179e <DIO_u8SetPinValue+0x50>
    1768:	83 30       	cpi	r24, 0x03	; 3
    176a:	29 f1       	breq	.+74     	; 0x17b6 <DIO_u8SetPinValue+0x68>
    176c:	72 c0       	rjmp	.+228    	; 0x1852 <DIO_u8SetPinValue+0x104>
    176e:	2b b3       	in	r18, 0x1b	; 27
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	02 c0       	rjmp	.+4      	; 0x177a <DIO_u8SetPinValue+0x2c>
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	6a 95       	dec	r22
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <DIO_u8SetPinValue+0x28>
    177e:	82 2b       	or	r24, r18
    1780:	8b bb       	out	0x1b, r24	; 27
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	08 95       	ret
    1786:	28 b3       	in	r18, 0x18	; 24
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <DIO_u8SetPinValue+0x44>
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	6a 95       	dec	r22
    1794:	e2 f7       	brpl	.-8      	; 0x178e <DIO_u8SetPinValue+0x40>
    1796:	82 2b       	or	r24, r18
    1798:	88 bb       	out	0x18, r24	; 24
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	08 95       	ret
    179e:	25 b3       	in	r18, 0x15	; 21
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <DIO_u8SetPinValue+0x5c>
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	6a 95       	dec	r22
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <DIO_u8SetPinValue+0x58>
    17ae:	82 2b       	or	r24, r18
    17b0:	85 bb       	out	0x15, r24	; 21
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	08 95       	ret
    17b6:	22 b3       	in	r18, 0x12	; 18
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <DIO_u8SetPinValue+0x74>
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	6a 95       	dec	r22
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <DIO_u8SetPinValue+0x70>
    17c6:	82 2b       	or	r24, r18
    17c8:	82 bb       	out	0x12, r24	; 18
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	08 95       	ret
    17ce:	41 11       	cpse	r20, r1
    17d0:	42 c0       	rjmp	.+132    	; 0x1856 <DIO_u8SetPinValue+0x108>
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	99 f0       	breq	.+38     	; 0x17fc <DIO_u8SetPinValue+0xae>
    17d6:	28 f0       	brcs	.+10     	; 0x17e2 <DIO_u8SetPinValue+0x94>
    17d8:	82 30       	cpi	r24, 0x02	; 2
    17da:	e9 f0       	breq	.+58     	; 0x1816 <DIO_u8SetPinValue+0xc8>
    17dc:	83 30       	cpi	r24, 0x03	; 3
    17de:	41 f1       	breq	.+80     	; 0x1830 <DIO_u8SetPinValue+0xe2>
    17e0:	3c c0       	rjmp	.+120    	; 0x185a <DIO_u8SetPinValue+0x10c>
    17e2:	2b b3       	in	r18, 0x1b	; 27
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <DIO_u8SetPinValue+0xa0>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	6a 95       	dec	r22
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <DIO_u8SetPinValue+0x9c>
    17f2:	80 95       	com	r24
    17f4:	82 23       	and	r24, r18
    17f6:	8b bb       	out	0x1b, r24	; 27
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	08 95       	ret
    17fc:	28 b3       	in	r18, 0x18	; 24
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <DIO_u8SetPinValue+0xba>
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	6a 95       	dec	r22
    180a:	e2 f7       	brpl	.-8      	; 0x1804 <DIO_u8SetPinValue+0xb6>
    180c:	80 95       	com	r24
    180e:	82 23       	and	r24, r18
    1810:	88 bb       	out	0x18, r24	; 24
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	08 95       	ret
    1816:	25 b3       	in	r18, 0x15	; 21
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <DIO_u8SetPinValue+0xd4>
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	6a 95       	dec	r22
    1824:	e2 f7       	brpl	.-8      	; 0x181e <DIO_u8SetPinValue+0xd0>
    1826:	80 95       	com	r24
    1828:	82 23       	and	r24, r18
    182a:	85 bb       	out	0x15, r24	; 21
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	08 95       	ret
    1830:	22 b3       	in	r18, 0x12	; 18
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	02 c0       	rjmp	.+4      	; 0x183c <DIO_u8SetPinValue+0xee>
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	6a 95       	dec	r22
    183e:	e2 f7       	brpl	.-8      	; 0x1838 <DIO_u8SetPinValue+0xea>
    1840:	80 95       	com	r24
    1842:	82 23       	and	r24, r18
    1844:	82 bb       	out	0x12, r24	; 18
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	08 95       	ret
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	08 95       	ret
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	08 95       	ret
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	08 95       	ret
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	08 95       	ret
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	08 95       	ret

0000185e <DIO_u8SetPortDir>:
    185e:	84 30       	cpi	r24, 0x04	; 4
    1860:	a0 f4       	brcc	.+40     	; 0x188a <DIO_u8SetPortDir+0x2c>
    1862:	81 30       	cpi	r24, 0x01	; 1
    1864:	49 f0       	breq	.+18     	; 0x1878 <DIO_u8SetPortDir+0x1a>
    1866:	28 f0       	brcs	.+10     	; 0x1872 <DIO_u8SetPortDir+0x14>
    1868:	82 30       	cpi	r24, 0x02	; 2
    186a:	49 f0       	breq	.+18     	; 0x187e <DIO_u8SetPortDir+0x20>
    186c:	83 30       	cpi	r24, 0x03	; 3
    186e:	51 f0       	breq	.+20     	; 0x1884 <DIO_u8SetPortDir+0x26>
    1870:	0e c0       	rjmp	.+28     	; 0x188e <DIO_u8SetPortDir+0x30>
    1872:	6a bb       	out	0x1a, r22	; 26
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	08 95       	ret
    1878:	67 bb       	out	0x17, r22	; 23
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	08 95       	ret
    187e:	64 bb       	out	0x14, r22	; 20
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	08 95       	ret
    1884:	61 bb       	out	0x11, r22	; 17
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	08 95       	ret
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	08 95       	ret
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	08 95       	ret

00001892 <DIO_u8SetPinDir>:
    1892:	84 30       	cpi	r24, 0x04	; 4
    1894:	08 f0       	brcs	.+2      	; 0x1898 <DIO_u8SetPinDir+0x6>
    1896:	7b c0       	rjmp	.+246    	; 0x198e <DIO_u8SetPinDir+0xfc>
    1898:	68 30       	cpi	r22, 0x08	; 8
    189a:	08 f0       	brcs	.+2      	; 0x189e <DIO_u8SetPinDir+0xc>
    189c:	7a c0       	rjmp	.+244    	; 0x1992 <DIO_u8SetPinDir+0x100>
    189e:	41 30       	cpi	r20, 0x01	; 1
    18a0:	c1 f5       	brne	.+112    	; 0x1912 <DIO_u8SetPinDir+0x80>
    18a2:	81 30       	cpi	r24, 0x01	; 1
    18a4:	91 f0       	breq	.+36     	; 0x18ca <DIO_u8SetPinDir+0x38>
    18a6:	28 f0       	brcs	.+10     	; 0x18b2 <DIO_u8SetPinDir+0x20>
    18a8:	82 30       	cpi	r24, 0x02	; 2
    18aa:	d9 f0       	breq	.+54     	; 0x18e2 <DIO_u8SetPinDir+0x50>
    18ac:	83 30       	cpi	r24, 0x03	; 3
    18ae:	29 f1       	breq	.+74     	; 0x18fa <DIO_u8SetPinDir+0x68>
    18b0:	72 c0       	rjmp	.+228    	; 0x1996 <DIO_u8SetPinDir+0x104>
    18b2:	2a b3       	in	r18, 0x1a	; 26
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <DIO_u8SetPinDir+0x2c>
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	6a 95       	dec	r22
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <DIO_u8SetPinDir+0x28>
    18c2:	82 2b       	or	r24, r18
    18c4:	8a bb       	out	0x1a, r24	; 26
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	08 95       	ret
    18ca:	27 b3       	in	r18, 0x17	; 23
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <DIO_u8SetPinDir+0x44>
    18d2:	88 0f       	add	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	6a 95       	dec	r22
    18d8:	e2 f7       	brpl	.-8      	; 0x18d2 <DIO_u8SetPinDir+0x40>
    18da:	82 2b       	or	r24, r18
    18dc:	87 bb       	out	0x17, r24	; 23
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	08 95       	ret
    18e2:	24 b3       	in	r18, 0x14	; 20
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <DIO_u8SetPinDir+0x5c>
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	6a 95       	dec	r22
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <DIO_u8SetPinDir+0x58>
    18f2:	82 2b       	or	r24, r18
    18f4:	84 bb       	out	0x14, r24	; 20
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	08 95       	ret
    18fa:	21 b3       	in	r18, 0x11	; 17
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <DIO_u8SetPinDir+0x74>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	6a 95       	dec	r22
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <DIO_u8SetPinDir+0x70>
    190a:	82 2b       	or	r24, r18
    190c:	81 bb       	out	0x11, r24	; 17
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	08 95       	ret
    1912:	41 11       	cpse	r20, r1
    1914:	42 c0       	rjmp	.+132    	; 0x199a <DIO_u8SetPinDir+0x108>
    1916:	81 30       	cpi	r24, 0x01	; 1
    1918:	99 f0       	breq	.+38     	; 0x1940 <DIO_u8SetPinDir+0xae>
    191a:	28 f0       	brcs	.+10     	; 0x1926 <DIO_u8SetPinDir+0x94>
    191c:	82 30       	cpi	r24, 0x02	; 2
    191e:	e9 f0       	breq	.+58     	; 0x195a <DIO_u8SetPinDir+0xc8>
    1920:	83 30       	cpi	r24, 0x03	; 3
    1922:	41 f1       	breq	.+80     	; 0x1974 <DIO_u8SetPinDir+0xe2>
    1924:	3c c0       	rjmp	.+120    	; 0x199e <DIO_u8SetPinDir+0x10c>
    1926:	2a b3       	in	r18, 0x1a	; 26
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <DIO_u8SetPinDir+0xa0>
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	6a 95       	dec	r22
    1934:	e2 f7       	brpl	.-8      	; 0x192e <DIO_u8SetPinDir+0x9c>
    1936:	80 95       	com	r24
    1938:	82 23       	and	r24, r18
    193a:	8a bb       	out	0x1a, r24	; 26
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	08 95       	ret
    1940:	27 b3       	in	r18, 0x17	; 23
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	02 c0       	rjmp	.+4      	; 0x194c <DIO_u8SetPinDir+0xba>
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	6a 95       	dec	r22
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <DIO_u8SetPinDir+0xb6>
    1950:	80 95       	com	r24
    1952:	82 23       	and	r24, r18
    1954:	87 bb       	out	0x17, r24	; 23
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	08 95       	ret
    195a:	24 b3       	in	r18, 0x14	; 20
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <DIO_u8SetPinDir+0xd4>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	6a 95       	dec	r22
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <DIO_u8SetPinDir+0xd0>
    196a:	80 95       	com	r24
    196c:	82 23       	and	r24, r18
    196e:	84 bb       	out	0x14, r24	; 20
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	08 95       	ret
    1974:	21 b3       	in	r18, 0x11	; 17
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <DIO_u8SetPinDir+0xee>
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	6a 95       	dec	r22
    1982:	e2 f7       	brpl	.-8      	; 0x197c <DIO_u8SetPinDir+0xea>
    1984:	80 95       	com	r24
    1986:	82 23       	and	r24, r18
    1988:	81 bb       	out	0x11, r24	; 17
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	08 95       	ret
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	08 95       	ret
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	08 95       	ret
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	08 95       	ret
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	08 95       	ret
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	08 95       	ret

000019a2 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *Copy_u8Value)
{
	u8 Local_u8ErrorState=0;

		 if((Copy_u8Port>DIO_PORTD)||(Copy_u8Port<DIO_PORTA))
    19a2:	84 30       	cpi	r24, 0x04	; 4
    19a4:	d0 f5       	brcc	.+116    	; 0x1a1a <DIO_u8GetPinValue+0x78>
		    {
		 	   Local_u8ErrorState=1;
		 	  return Local_u8ErrorState;
		    }
		 else if ((Copy_u8Pin>DIO_PIN7)||(Copy_u8Pin<DIO_PIN0))
    19a6:	68 30       	cpi	r22, 0x08	; 8
    19a8:	d0 f5       	brcc	.+116    	; 0x1a1e <DIO_u8GetPinValue+0x7c>
			   Local_u8ErrorState=1;
		       return Local_u8ErrorState;
		 }
		 else
		 {
			switch(Copy_u8Port)
    19aa:	81 30       	cpi	r24, 0x01	; 1
    19ac:	91 f0       	breq	.+36     	; 0x19d2 <DIO_u8GetPinValue+0x30>
    19ae:	28 f0       	brcs	.+10     	; 0x19ba <DIO_u8GetPinValue+0x18>
    19b0:	82 30       	cpi	r24, 0x02	; 2
    19b2:	d9 f0       	breq	.+54     	; 0x19ea <DIO_u8GetPinValue+0x48>
    19b4:	83 30       	cpi	r24, 0x03	; 3
    19b6:	29 f1       	breq	.+74     	; 0x1a02 <DIO_u8GetPinValue+0x60>
    19b8:	34 c0       	rjmp	.+104    	; 0x1a22 <DIO_u8GetPinValue+0x80>
			{
			case DIO_PORTA:*Copy_u8Value=GET_BIT(PINA,Copy_u8Pin);break;
    19ba:	89 b3       	in	r24, 0x19	; 25
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <DIO_u8GetPinValue+0x22>
    19c0:	95 95       	asr	r25
    19c2:	87 95       	ror	r24
    19c4:	6a 95       	dec	r22
    19c6:	e2 f7       	brpl	.-8      	; 0x19c0 <DIO_u8GetPinValue+0x1e>
    19c8:	81 70       	andi	r24, 0x01	; 1
    19ca:	fa 01       	movw	r30, r20
    19cc:	80 83       	st	Z, r24
			case DIO_PORTB:*Copy_u8Value=GET_BIT(PINB,Copy_u8Pin);break;
			case DIO_PORTC:*Copy_u8Value=GET_BIT(PINC,Copy_u8Pin);break;
			case DIO_PORTD:*Copy_u8Value=GET_BIT(PIND,Copy_u8Pin);break;
			}
		 }
return Local_u8ErrorState;
    19ce:	80 e0       	ldi	r24, 0x00	; 0
		 }
		 else
		 {
			switch(Copy_u8Port)
			{
			case DIO_PORTA:*Copy_u8Value=GET_BIT(PINA,Copy_u8Pin);break;
    19d0:	08 95       	ret
			case DIO_PORTB:*Copy_u8Value=GET_BIT(PINB,Copy_u8Pin);break;
    19d2:	86 b3       	in	r24, 0x16	; 22
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <DIO_u8GetPinValue+0x3a>
    19d8:	95 95       	asr	r25
    19da:	87 95       	ror	r24
    19dc:	6a 95       	dec	r22
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <DIO_u8GetPinValue+0x36>
    19e0:	81 70       	andi	r24, 0x01	; 1
    19e2:	fa 01       	movw	r30, r20
    19e4:	80 83       	st	Z, r24
			case DIO_PORTC:*Copy_u8Value=GET_BIT(PINC,Copy_u8Pin);break;
			case DIO_PORTD:*Copy_u8Value=GET_BIT(PIND,Copy_u8Pin);break;
			}
		 }
return Local_u8ErrorState;
    19e6:	80 e0       	ldi	r24, 0x00	; 0
		 else
		 {
			switch(Copy_u8Port)
			{
			case DIO_PORTA:*Copy_u8Value=GET_BIT(PINA,Copy_u8Pin);break;
			case DIO_PORTB:*Copy_u8Value=GET_BIT(PINB,Copy_u8Pin);break;
    19e8:	08 95       	ret
			case DIO_PORTC:*Copy_u8Value=GET_BIT(PINC,Copy_u8Pin);break;
    19ea:	83 b3       	in	r24, 0x13	; 19
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <DIO_u8GetPinValue+0x52>
    19f0:	95 95       	asr	r25
    19f2:	87 95       	ror	r24
    19f4:	6a 95       	dec	r22
    19f6:	e2 f7       	brpl	.-8      	; 0x19f0 <DIO_u8GetPinValue+0x4e>
    19f8:	81 70       	andi	r24, 0x01	; 1
    19fa:	fa 01       	movw	r30, r20
    19fc:	80 83       	st	Z, r24
			case DIO_PORTD:*Copy_u8Value=GET_BIT(PIND,Copy_u8Pin);break;
			}
		 }
return Local_u8ErrorState;
    19fe:	80 e0       	ldi	r24, 0x00	; 0
		 {
			switch(Copy_u8Port)
			{
			case DIO_PORTA:*Copy_u8Value=GET_BIT(PINA,Copy_u8Pin);break;
			case DIO_PORTB:*Copy_u8Value=GET_BIT(PINB,Copy_u8Pin);break;
			case DIO_PORTC:*Copy_u8Value=GET_BIT(PINC,Copy_u8Pin);break;
    1a00:	08 95       	ret
			case DIO_PORTD:*Copy_u8Value=GET_BIT(PIND,Copy_u8Pin);break;
    1a02:	80 b3       	in	r24, 0x10	; 16
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <DIO_u8GetPinValue+0x6a>
    1a08:	95 95       	asr	r25
    1a0a:	87 95       	ror	r24
    1a0c:	6a 95       	dec	r22
    1a0e:	e2 f7       	brpl	.-8      	; 0x1a08 <DIO_u8GetPinValue+0x66>
    1a10:	81 70       	andi	r24, 0x01	; 1
    1a12:	fa 01       	movw	r30, r20
    1a14:	80 83       	st	Z, r24
			}
		 }
return Local_u8ErrorState;
    1a16:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
			case DIO_PORTA:*Copy_u8Value=GET_BIT(PINA,Copy_u8Pin);break;
			case DIO_PORTB:*Copy_u8Value=GET_BIT(PINB,Copy_u8Pin);break;
			case DIO_PORTC:*Copy_u8Value=GET_BIT(PINC,Copy_u8Pin);break;
			case DIO_PORTD:*Copy_u8Value=GET_BIT(PIND,Copy_u8Pin);break;
    1a18:	08 95       	ret
	u8 Local_u8ErrorState=0;

		 if((Copy_u8Port>DIO_PORTD)||(Copy_u8Port<DIO_PORTA))
		    {
		 	   Local_u8ErrorState=1;
		 	  return Local_u8ErrorState;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	08 95       	ret
		    }
		 else if ((Copy_u8Pin>DIO_PIN7)||(Copy_u8Pin<DIO_PIN0))
		 {
			   Local_u8ErrorState=1;
		       return Local_u8ErrorState;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	08 95       	ret
			case DIO_PORTB:*Copy_u8Value=GET_BIT(PINB,Copy_u8Pin);break;
			case DIO_PORTC:*Copy_u8Value=GET_BIT(PINC,Copy_u8Pin);break;
			case DIO_PORTD:*Copy_u8Value=GET_BIT(PIND,Copy_u8Pin);break;
			}
		 }
return Local_u8ErrorState;
    1a22:	80 e0       	ldi	r24, 0x00	; 0
}
    1a24:	08 95       	ret

00001a26 <key>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "DIO_INTERFACE.h"
#include "keys.h"
u8 key()
{
    1a26:	ff 92       	push	r15
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	1f 92       	push	r1
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
	u8 state;
	u8 value_pressed=0xff;
	 DIO_u8SetPortDir(DIO_PORTC,0xf0);
    1a36:	60 ef       	ldi	r22, 0xF0	; 240
    1a38:	82 e0       	ldi	r24, 0x02	; 2
    1a3a:	0e 94 2f 0c 	call	0x185e	; 0x185e <DIO_u8SetPortDir>
	 DIO_u8SetPinValue(DIO_PORTC,DIO_PIN0,DIO_HIGH);
    1a3e:	41 e0       	ldi	r20, 0x01	; 1
    1a40:	60 e0       	ldi	r22, 0x00	; 0
    1a42:	82 e0       	ldi	r24, 0x02	; 2
    1a44:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(DIO_PORTC,DIO_PIN1,DIO_HIGH);
    1a48:	41 e0       	ldi	r20, 0x01	; 1
    1a4a:	61 e0       	ldi	r22, 0x01	; 1
    1a4c:	82 e0       	ldi	r24, 0x02	; 2
    1a4e:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_HIGH);
    1a52:	41 e0       	ldi	r20, 0x01	; 1
    1a54:	62 e0       	ldi	r22, 0x02	; 2
    1a56:	82 e0       	ldi	r24, 0x02	; 2
    1a58:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(DIO_PORTC,DIO_PIN3,DIO_HIGH);
    1a5c:	41 e0       	ldi	r20, 0x01	; 1
    1a5e:	63 e0       	ldi	r22, 0x03	; 3
    1a60:	82 e0       	ldi	r24, 0x02	; 2
    1a62:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_u8SetPinValue>
	  DIO_u8SetPinValue(DIO_PORTC,DIO_PIN4,DIO_HIGH);
    1a66:	41 e0       	ldi	r20, 0x01	; 1
    1a68:	64 e0       	ldi	r22, 0x04	; 4
    1a6a:	82 e0       	ldi	r24, 0x02	; 2
    1a6c:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_u8SetPinValue>
	for (int i=0;i<5;i++)
    1a70:	00 e0       	ldi	r16, 0x00	; 0
    1a72:	10 e0       	ldi	r17, 0x00	; 0
    1a74:	19 c0       	rjmp	.+50     	; 0x1aa8 <key+0x82>
	{
		DIO_u8GetPinValue(DIO_PORTC,i,&state);
    1a76:	f0 2e       	mov	r15, r16
    1a78:	ae 01       	movw	r20, r28
    1a7a:	4f 5f       	subi	r20, 0xFF	; 255
    1a7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a7e:	60 2f       	mov	r22, r16
    1a80:	82 e0       	ldi	r24, 0x02	; 2
    1a82:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_u8GetPinValue>
		if (DIO_LOW==state)
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	81 11       	cpse	r24, r1
    1a8a:	0c c0       	rjmp	.+24     	; 0x1aa4 <key+0x7e>
    1a8c:	07 c0       	rjmp	.+14     	; 0x1a9c <key+0x76>
		{
			value_pressed=i;
			
			while(DIO_LOW==state)
			{
				DIO_u8GetPinValue(DIO_PORTC,i,&state);
    1a8e:	ae 01       	movw	r20, r28
    1a90:	4f 5f       	subi	r20, 0xFF	; 255
    1a92:	5f 4f       	sbci	r21, 0xFF	; 255
    1a94:	6f 2d       	mov	r22, r15
    1a96:	82 e0       	ldi	r24, 0x02	; 2
    1a98:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_u8GetPinValue>
		DIO_u8GetPinValue(DIO_PORTC,i,&state);
		if (DIO_LOW==state)
		{
			value_pressed=i;
			
			while(DIO_LOW==state)
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	88 23       	and	r24, r24
    1aa0:	b1 f3       	breq	.-20     	; 0x1a8e <key+0x68>
    1aa2:	07 c0       	rjmp	.+14     	; 0x1ab2 <key+0x8c>
	 DIO_u8SetPinValue(DIO_PORTC,DIO_PIN0,DIO_HIGH);
	 DIO_u8SetPinValue(DIO_PORTC,DIO_PIN1,DIO_HIGH);
	 DIO_u8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_HIGH);
	 DIO_u8SetPinValue(DIO_PORTC,DIO_PIN3,DIO_HIGH);
	  DIO_u8SetPinValue(DIO_PORTC,DIO_PIN4,DIO_HIGH);
	for (int i=0;i<5;i++)
    1aa4:	0f 5f       	subi	r16, 0xFF	; 255
    1aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa8:	05 30       	cpi	r16, 0x05	; 5
    1aaa:	11 05       	cpc	r17, r1
    1aac:	24 f3       	brlt	.-56     	; 0x1a76 <key+0x50>
				DIO_u8GetPinValue(DIO_PORTC,i,&state);
			}
			return value_pressed;
		}
	}
	return 0xff;
    1aae:	ff 24       	eor	r15, r15
    1ab0:	fa 94       	dec	r15
    1ab2:	8f 2d       	mov	r24, r15
    1ab4:	0f 90       	pop	r0
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	ff 90       	pop	r15
    1ac0:	08 95       	ret

00001ac2 <LEDS_PowerON>:
#include "BIT_MATH.h"
#include "Buzzer_Interface.h"

void LEDS_PowerON(u8 pins)
{
	DIO_u8SetPortDir(LEDS_PORT,pins);
    1ac2:	68 2f       	mov	r22, r24
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	0e 94 2f 0c 	call	0x185e	; 0x185e <DIO_u8SetPortDir>
    1aca:	08 95       	ret

00001acc <Toogle_LED>:
void Toogle_LED(u8 led_num)
{
	switch(LEDS_PORT)
	{
		case 0: TOGGLE_BIT(PORTA,led_num);break;
		case 1: TOGGLE_BIT(PORTB,led_num);break;
    1acc:	98 b3       	in	r25, 0x18	; 24
    1ace:	21 e0       	ldi	r18, 0x01	; 1
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <Toogle_LED+0xc>
    1ad4:	22 0f       	add	r18, r18
    1ad6:	33 1f       	adc	r19, r19
    1ad8:	8a 95       	dec	r24
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <Toogle_LED+0x8>
    1adc:	29 27       	eor	r18, r25
    1ade:	28 bb       	out	0x18, r18	; 24
    1ae0:	08 95       	ret

00001ae2 <Flashing_Led>:
		case 3: TOGGLE_BIT(PORTD,led_num);break;
	}
}

void Flashing_Led(u8 led_num)
{
    1ae2:	cf 93       	push	r28
    1ae4:	c8 2f       	mov	r28, r24
    switch(led_num)
    1ae6:	85 30       	cpi	r24, 0x05	; 5
    1ae8:	69 f0       	breq	.+26     	; 0x1b04 <Flashing_Led+0x22>
    1aea:	18 f4       	brcc	.+6      	; 0x1af2 <Flashing_Led+0x10>
    1aec:	84 30       	cpi	r24, 0x04	; 4
    1aee:	31 f0       	breq	.+12     	; 0x1afc <Flashing_Led+0x1a>
    1af0:	14 c0       	rjmp	.+40     	; 0x1b1a <Flashing_Led+0x38>
    1af2:	86 30       	cpi	r24, 0x06	; 6
    1af4:	59 f0       	breq	.+22     	; 0x1b0c <Flashing_Led+0x2a>
    1af6:	87 30       	cpi	r24, 0x07	; 7
    1af8:	69 f0       	breq	.+26     	; 0x1b14 <Flashing_Led+0x32>
    1afa:	0f c0       	rjmp	.+30     	; 0x1b1a <Flashing_Led+0x38>
	{
		case 4:Buzzer_Enable(RED_Tone);break;
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	0e 94 27 03 	call	0x64e	; 0x64e <Buzzer_Enable>
    1b02:	0b c0       	rjmp	.+22     	; 0x1b1a <Flashing_Led+0x38>
		case 5:Buzzer_Enable(Yellow_Tone);break;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	0e 94 27 03 	call	0x64e	; 0x64e <Buzzer_Enable>
    1b0a:	07 c0       	rjmp	.+14     	; 0x1b1a <Flashing_Led+0x38>
		case 6:Buzzer_Enable(Green_Tone);break;
    1b0c:	82 e0       	ldi	r24, 0x02	; 2
    1b0e:	0e 94 27 03 	call	0x64e	; 0x64e <Buzzer_Enable>
    1b12:	03 c0       	rjmp	.+6      	; 0x1b1a <Flashing_Led+0x38>
		case 7:Buzzer_Enable(Blue_Tone);break;
    1b14:	83 e0       	ldi	r24, 0x03	; 3
    1b16:	0e 94 27 03 	call	0x64e	; 0x64e <Buzzer_Enable>
		default:break;
	}
	Toogle_LED(led_num);
    1b1a:	8c 2f       	mov	r24, r28
    1b1c:	0e 94 66 0d 	call	0x1acc	; 0x1acc <Toogle_LED>
    1b20:	2f ef       	ldi	r18, 0xFF	; 255
    1b22:	84 e3       	ldi	r24, 0x34	; 52
    1b24:	9c e0       	ldi	r25, 0x0C	; 12
    1b26:	21 50       	subi	r18, 0x01	; 1
    1b28:	80 40       	sbci	r24, 0x00	; 0
    1b2a:	90 40       	sbci	r25, 0x00	; 0
    1b2c:	e1 f7       	brne	.-8      	; 0x1b26 <Flashing_Led+0x44>
    1b2e:	00 c0       	rjmp	.+0      	; 0x1b30 <Flashing_Led+0x4e>
    1b30:	00 00       	nop
	_delay_ms(500);
	Toogle_LED(led_num);
    1b32:	8c 2f       	mov	r24, r28
    1b34:	0e 94 66 0d 	call	0x1acc	; 0x1acc <Toogle_LED>
    1b38:	2f ef       	ldi	r18, 0xFF	; 255
    1b3a:	84 e3       	ldi	r24, 0x34	; 52
    1b3c:	9c e0       	ldi	r25, 0x0C	; 12
    1b3e:	21 50       	subi	r18, 0x01	; 1
    1b40:	80 40       	sbci	r24, 0x00	; 0
    1b42:	90 40       	sbci	r25, 0x00	; 0
    1b44:	e1 f7       	brne	.-8      	; 0x1b3e <Flashing_Led+0x5c>
    1b46:	00 c0       	rjmp	.+0      	; 0x1b48 <Flashing_Led+0x66>
    1b48:	00 00       	nop
	_delay_ms(500);
}
    1b4a:	cf 91       	pop	r28
    1b4c:	08 95       	ret

00001b4e <Flashing_LedGroup>:
			   _delay_ms(200);
		       TOGGLE_BIT(PORTA,4);TOGGLE_BIT(PORTA,5);TOGGLE_BIT(PORTA,6);TOGGLE_BIT(PORTA,7);
			   _delay_ms(200);
               break;
		case 1: 
		      Buzzer_Enable(Winer);
    1b4e:	84 e0       	ldi	r24, 0x04	; 4
    1b50:	0e 94 27 03 	call	0x64e	; 0x64e <Buzzer_Enable>
			  TOGGLE_BIT(PORTB,4);TOGGLE_BIT(PORTB,5);TOGGLE_BIT(PORTB,6);TOGGLE_BIT(PORTB,7);
    1b54:	88 b3       	in	r24, 0x18	; 24
    1b56:	20 e1       	ldi	r18, 0x10	; 16
    1b58:	82 27       	eor	r24, r18
    1b5a:	88 bb       	out	0x18, r24	; 24
    1b5c:	88 b3       	in	r24, 0x18	; 24
    1b5e:	90 e2       	ldi	r25, 0x20	; 32
    1b60:	89 27       	eor	r24, r25
    1b62:	88 bb       	out	0x18, r24	; 24
    1b64:	38 b3       	in	r19, 0x18	; 24
    1b66:	80 e4       	ldi	r24, 0x40	; 64
    1b68:	38 27       	eor	r19, r24
    1b6a:	38 bb       	out	0x18, r19	; 24
    1b6c:	38 b3       	in	r19, 0x18	; 24
    1b6e:	30 58       	subi	r19, 0x80	; 128
    1b70:	38 bb       	out	0x18, r19	; 24
    1b72:	3f ef       	ldi	r19, 0xFF	; 255
    1b74:	41 ee       	ldi	r20, 0xE1	; 225
    1b76:	54 e0       	ldi	r21, 0x04	; 4
    1b78:	31 50       	subi	r19, 0x01	; 1
    1b7a:	40 40       	sbci	r20, 0x00	; 0
    1b7c:	50 40       	sbci	r21, 0x00	; 0
    1b7e:	e1 f7       	brne	.-8      	; 0x1b78 <Flashing_LedGroup+0x2a>
    1b80:	00 c0       	rjmp	.+0      	; 0x1b82 <Flashing_LedGroup+0x34>
    1b82:	00 00       	nop
			  _delay_ms(200);
			  TOGGLE_BIT(PORTB,4);TOGGLE_BIT(PORTB,5);TOGGLE_BIT(PORTB,6);TOGGLE_BIT(PORTB,7);
    1b84:	38 b3       	in	r19, 0x18	; 24
    1b86:	23 27       	eor	r18, r19
    1b88:	28 bb       	out	0x18, r18	; 24
    1b8a:	28 b3       	in	r18, 0x18	; 24
    1b8c:	92 27       	eor	r25, r18
    1b8e:	98 bb       	out	0x18, r25	; 24
    1b90:	98 b3       	in	r25, 0x18	; 24
    1b92:	89 27       	eor	r24, r25
    1b94:	88 bb       	out	0x18, r24	; 24
    1b96:	88 b3       	in	r24, 0x18	; 24
    1b98:	80 58       	subi	r24, 0x80	; 128
    1b9a:	88 bb       	out	0x18, r24	; 24
    1b9c:	8f ef       	ldi	r24, 0xFF	; 255
    1b9e:	91 ee       	ldi	r25, 0xE1	; 225
    1ba0:	24 e0       	ldi	r18, 0x04	; 4
    1ba2:	81 50       	subi	r24, 0x01	; 1
    1ba4:	90 40       	sbci	r25, 0x00	; 0
    1ba6:	20 40       	sbci	r18, 0x00	; 0
    1ba8:	e1 f7       	brne	.-8      	; 0x1ba2 <Flashing_LedGroup+0x54>
    1baa:	00 c0       	rjmp	.+0      	; 0x1bac <Flashing_LedGroup+0x5e>
    1bac:	00 00       	nop
    1bae:	08 95       	ret

00001bb0 <menu_sound>:
#include <util/delay.h>

void menu_sound() 
{
	
	DDRB |= (1 << PB3);
    1bb0:	87 b3       	in	r24, 0x17	; 23
    1bb2:	88 60       	ori	r24, 0x08	; 8
    1bb4:	87 bb       	out	0x17, r24	; 23
	TCCR0 |= (1 << COM00) | (1 << WGM01);
    1bb6:	83 b7       	in	r24, 0x33	; 51
    1bb8:	88 61       	ori	r24, 0x18	; 24
    1bba:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS01);
    1bbc:	83 b7       	in	r24, 0x33	; 51
    1bbe:	82 60       	ori	r24, 0x02	; 2
    1bc0:	83 bf       	out	0x33, r24	; 51
	OCR0 = 0x7F;
    1bc2:	8f e7       	ldi	r24, 0x7F	; 127
    1bc4:	8c bf       	out	0x3c, r24	; 60
    1bc6:	83 ed       	ldi	r24, 0xD3	; 211
    1bc8:	90 e3       	ldi	r25, 0x30	; 48
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <menu_sound+0x1a>
    1bce:	00 c0       	rjmp	.+0      	; 0x1bd0 <menu_sound+0x20>
    1bd0:	00 00       	nop
	_delay_ms(50);
	TCCR0 &= ~(1 << COM00);
    1bd2:	83 b7       	in	r24, 0x33	; 51
    1bd4:	8f 7e       	andi	r24, 0xEF	; 239
    1bd6:	83 bf       	out	0x33, r24	; 51
    1bd8:	83 ed       	ldi	r24, 0xD3	; 211
    1bda:	90 e3       	ldi	r25, 0x30	; 48
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <menu_sound+0x2c>
    1be0:	00 c0       	rjmp	.+0      	; 0x1be2 <menu_sound+0x32>
    1be2:	00 00       	nop
    1be4:	08 95       	ret

00001be6 <game_select>:
	_delay_ms(50);
}
void game_select()
{
    1be6:	1f 93       	push	r17
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	28 97       	sbiw	r28, 0x08	; 8
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
   extern game_End;
   extern game_End3;
   extern game_End2;
   game_End=0;
    1bfc:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <value.1899>
    1c00:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <game_End>
   game_End2=0;
    1c04:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <press_key>
    1c08:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <game_End2>
   game_End3=0;
    1c0c:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <time.1677>
    1c10:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <game_End3>
	CLCD_PowerON();
    1c14:	0e 94 0d 05 	call	0xa1a	; 0xa1a <CLCD_PowerON>
	CLCD_voidGoTOxy(0,0);
    1c18:	60 e0       	ldi	r22, 0x00	; 0
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidPrintString("1 : Smoin Say");
    1c20:	84 e6       	ldi	r24, 0x64	; 100
    1c22:	91 e0       	ldi	r25, 0x01	; 1
    1c24:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
	CLCD_voidGoTOxy(1,0);
    1c28:	60 e0       	ldi	r22, 0x00	; 0
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidPrintString("2 : Ping Pong");
    1c30:	82 e7       	ldi	r24, 0x72	; 114
    1c32:	91 e0       	ldi	r25, 0x01	; 1
    1c34:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
	CLCD_voidGoTOxy(2,0);
    1c38:	60 e0       	ldi	r22, 0x00	; 0
    1c3a:	82 e0       	ldi	r24, 0x02	; 2
    1c3c:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidPrintString("3 : Catch");
    1c40:	80 e8       	ldi	r24, 0x80	; 128
    1c42:	91 e0       	ldi	r25, 0x01	; 1
    1c44:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
	CLCD_voidGoTOxy(3,0);
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	83 e0       	ldi	r24, 0x03	; 3
    1c4c:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidPrintString("4 : CowBoy");
    1c50:	8a e8       	ldi	r24, 0x8A	; 138
    1c52:	91 e0       	ldi	r25, 0x01	; 1
    1c54:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
	u8 static value=0;
	u8 cursor_x=0;
	u8 cursor_y=0;
	u8 cursor[8]={0x18,0x1C,0x1E,0x1F,0x1F,0x1E,0x1C,0x18};
    1c58:	88 e0       	ldi	r24, 0x08	; 8
    1c5a:	eb ed       	ldi	r30, 0xDB	; 219
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	de 01       	movw	r26, r28
    1c60:	11 96       	adiw	r26, 0x01	; 1
    1c62:	01 90       	ld	r0, Z+
    1c64:	0d 92       	st	X+, r0
    1c66:	8a 95       	dec	r24
    1c68:	e1 f7       	brne	.-8      	; 0x1c62 <game_select+0x7c>
	CLCD_voidSendSpecialChar(cursor,0,0,0);
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	40 e0       	ldi	r20, 0x00	; 0
    1c6e:	60 e0       	ldi	r22, 0x00	; 0
    1c70:	ce 01       	movw	r24, r28
    1c72:	01 96       	adiw	r24, 0x01	; 1
    1c74:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
	CLCD_voidGoTOxy(2,0);
	CLCD_voidPrintString("3 : Catch");
	CLCD_voidGoTOxy(3,0);
	CLCD_voidPrintString("4 : CowBoy");
	u8 static value=0;
	u8 cursor_x=0;
    1c78:	10 e0       	ldi	r17, 0x00	; 0
	u8 cursor_y=0;
	u8 cursor[8]={0x18,0x1C,0x1E,0x1F,0x1F,0x1E,0x1C,0x18};
	CLCD_voidSendSpecialChar(cursor,0,0,0);
	while(value!=shot)
    1c7a:	bb c0       	rjmp	.+374    	; 0x1df2 <game_select+0x20c>
	{
		value=key();
    1c7c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <key>
    1c80:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <value.1899>
		switch(value)
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	21 f0       	breq	.+8      	; 0x1c90 <game_select+0xaa>
    1c88:	82 30       	cpi	r24, 0x02	; 2
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <game_select+0xa8>
    1c8c:	58 c0       	rjmp	.+176    	; 0x1d3e <game_select+0x158>
    1c8e:	b1 c0       	rjmp	.+354    	; 0x1df2 <game_select+0x20c>
		{
			case up:
			if(cursor_x>=1)
    1c90:	11 23       	and	r17, r17
    1c92:	59 f1       	breq	.+86     	; 0x1cea <game_select+0x104>
			{ 
				
				CLCD_voidGoTOxy(0,0);
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
				CLCD_voidPrintString("1 : Smoin Say");
    1c9c:	84 e6       	ldi	r24, 0x64	; 100
    1c9e:	91 e0       	ldi	r25, 0x01	; 1
    1ca0:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
				CLCD_voidGoTOxy(1,0);
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
				CLCD_voidPrintString("2 : Ping Pong");
    1cac:	82 e7       	ldi	r24, 0x72	; 114
    1cae:	91 e0       	ldi	r25, 0x01	; 1
    1cb0:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
				CLCD_voidGoTOxy(2,0);
    1cb4:	60 e0       	ldi	r22, 0x00	; 0
    1cb6:	82 e0       	ldi	r24, 0x02	; 2
    1cb8:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
				CLCD_voidPrintString("3 : Catch");
    1cbc:	80 e8       	ldi	r24, 0x80	; 128
    1cbe:	91 e0       	ldi	r25, 0x01	; 1
    1cc0:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
				CLCD_voidGoTOxy(3,0);
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	83 e0       	ldi	r24, 0x03	; 3
    1cc8:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
				CLCD_voidPrintString("4 : CowBoy");
    1ccc:	8a e8       	ldi	r24, 0x8A	; 138
    1cce:	91 e0       	ldi	r25, 0x01	; 1
    1cd0:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
				menu_sound();
    1cd4:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <menu_sound>
				cursor_x--;
    1cd8:	11 50       	subi	r17, 0x01	; 1
				CLCD_voidSendSpecialChar(cursor,0,cursor_x,cursor_y);
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	41 2f       	mov	r20, r17
    1cde:	60 e0       	ldi	r22, 0x00	; 0
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	01 96       	adiw	r24, 0x01	; 1
    1ce4:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    1ce8:	84 c0       	rjmp	.+264    	; 0x1df2 <game_select+0x20c>
			}
			else
			{
				CLCD_voidGoTOxy(0,0);
    1cea:	60 e0       	ldi	r22, 0x00	; 0
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
				CLCD_voidPrintString("1 : Smoin Say");
    1cf2:	84 e6       	ldi	r24, 0x64	; 100
    1cf4:	91 e0       	ldi	r25, 0x01	; 1
    1cf6:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
				CLCD_voidGoTOxy(1,0);
    1cfa:	60 e0       	ldi	r22, 0x00	; 0
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
				CLCD_voidPrintString("2 : Ping Pong");
    1d02:	82 e7       	ldi	r24, 0x72	; 114
    1d04:	91 e0       	ldi	r25, 0x01	; 1
    1d06:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
				CLCD_voidGoTOxy(2,0);
    1d0a:	60 e0       	ldi	r22, 0x00	; 0
    1d0c:	82 e0       	ldi	r24, 0x02	; 2
    1d0e:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
				CLCD_voidPrintString("3 : Catch");
    1d12:	80 e8       	ldi	r24, 0x80	; 128
    1d14:	91 e0       	ldi	r25, 0x01	; 1
    1d16:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
				CLCD_voidGoTOxy(3,0);
    1d1a:	60 e0       	ldi	r22, 0x00	; 0
    1d1c:	83 e0       	ldi	r24, 0x03	; 3
    1d1e:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
				CLCD_voidPrintString("4 : CowBoy");
    1d22:	8a e8       	ldi	r24, 0x8A	; 138
    1d24:	91 e0       	ldi	r25, 0x01	; 1
    1d26:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
				menu_sound();
    1d2a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <menu_sound>
				CLCD_voidSendSpecialChar(cursor,0,cursor_x,cursor_y);
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	41 2f       	mov	r20, r17
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	ce 01       	movw	r24, r28
    1d36:	01 96       	adiw	r24, 0x01	; 1
    1d38:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    1d3c:	5a c0       	rjmp	.+180    	; 0x1df2 <game_select+0x20c>
			}
			break;
			case down:
			if(cursor_x<=2)
    1d3e:	13 30       	cpi	r17, 0x03	; 3
    1d40:	58 f5       	brcc	.+86     	; 0x1d98 <game_select+0x1b2>
			{
				CLCD_voidGoTOxy(0,0);
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
				CLCD_voidPrintString("1 : Smoin Say");
    1d4a:	84 e6       	ldi	r24, 0x64	; 100
    1d4c:	91 e0       	ldi	r25, 0x01	; 1
    1d4e:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
				CLCD_voidGoTOxy(1,0);
    1d52:	60 e0       	ldi	r22, 0x00	; 0
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
				CLCD_voidPrintString("2 : Ping Pong");
    1d5a:	82 e7       	ldi	r24, 0x72	; 114
    1d5c:	91 e0       	ldi	r25, 0x01	; 1
    1d5e:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
				CLCD_voidGoTOxy(2,0);
    1d62:	60 e0       	ldi	r22, 0x00	; 0
    1d64:	82 e0       	ldi	r24, 0x02	; 2
    1d66:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
				CLCD_voidPrintString("3 : Catch");
    1d6a:	80 e8       	ldi	r24, 0x80	; 128
    1d6c:	91 e0       	ldi	r25, 0x01	; 1
    1d6e:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
				CLCD_voidGoTOxy(3,0);
    1d72:	60 e0       	ldi	r22, 0x00	; 0
    1d74:	83 e0       	ldi	r24, 0x03	; 3
    1d76:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
				CLCD_voidPrintString("4 : CowBoy");
    1d7a:	8a e8       	ldi	r24, 0x8A	; 138
    1d7c:	91 e0       	ldi	r25, 0x01	; 1
    1d7e:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
				 menu_sound();
    1d82:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <menu_sound>
				cursor_x++;
    1d86:	1f 5f       	subi	r17, 0xFF	; 255
				CLCD_voidSendSpecialChar(cursor,0,cursor_x,cursor_y);
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	41 2f       	mov	r20, r17
    1d8c:	60 e0       	ldi	r22, 0x00	; 0
    1d8e:	ce 01       	movw	r24, r28
    1d90:	01 96       	adiw	r24, 0x01	; 1
    1d92:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    1d96:	2d c0       	rjmp	.+90     	; 0x1df2 <game_select+0x20c>
			}
			else
			{
				CLCD_voidSendCommand(1);
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
				cursor_x++;
    1d9e:	1f 5f       	subi	r17, 0xFF	; 255
				CLCD_voidGoTOxy(0,0);
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
		     	CLCD_voidPrintString("2 : Ping Pong");
    1da8:	82 e7       	ldi	r24, 0x72	; 114
    1daa:	91 e0       	ldi	r25, 0x01	; 1
    1dac:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
				CLCD_voidGoTOxy(1,0);
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
				CLCD_voidPrintString("3 : Catch");
    1db8:	80 e8       	ldi	r24, 0x80	; 128
    1dba:	91 e0       	ldi	r25, 0x01	; 1
    1dbc:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
				CLCD_voidGoTOxy(2,0);
    1dc0:	60 e0       	ldi	r22, 0x00	; 0
    1dc2:	82 e0       	ldi	r24, 0x02	; 2
    1dc4:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
				CLCD_voidPrintString("4 : CowBoy");
    1dc8:	8a e8       	ldi	r24, 0x8A	; 138
    1dca:	91 e0       	ldi	r25, 0x01	; 1
    1dcc:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
				CLCD_voidGoTOxy(3,0);
    1dd0:	60 e0       	ldi	r22, 0x00	; 0
    1dd2:	83 e0       	ldi	r24, 0x03	; 3
    1dd4:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
				CLCD_voidPrintString("5 : Snake");
    1dd8:	85 e9       	ldi	r24, 0x95	; 149
    1dda:	91 e0       	ldi	r25, 0x01	; 1
    1ddc:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
				menu_sound();
    1de0:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <menu_sound>
				CLCD_voidSendSpecialChar(cursor,0,3,0);
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	43 e0       	ldi	r20, 0x03	; 3
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	ce 01       	movw	r24, r28
    1dec:	01 96       	adiw	r24, 0x01	; 1
    1dee:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
	u8 static value=0;
	u8 cursor_x=0;
	u8 cursor_y=0;
	u8 cursor[8]={0x18,0x1C,0x1E,0x1F,0x1F,0x1E,0x1C,0x18};
	CLCD_voidSendSpecialChar(cursor,0,0,0);
	while(value!=shot)
    1df2:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <value.1899>
    1df6:	84 30       	cpi	r24, 0x04	; 4
    1df8:	09 f0       	breq	.+2      	; 0x1dfc <game_select+0x216>
    1dfa:	40 cf       	rjmp	.-384    	; 0x1c7c <game_select+0x96>
			break;
			
		}
		
	}
	value=0;
    1dfc:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <value.1899>
	switch(cursor_x)
    1e00:	11 30       	cpi	r17, 0x01	; 1
    1e02:	99 f0       	breq	.+38     	; 0x1e2a <game_select+0x244>
    1e04:	28 f0       	brcs	.+10     	; 0x1e10 <game_select+0x22a>
    1e06:	12 30       	cpi	r17, 0x02	; 2
    1e08:	c1 f0       	breq	.+48     	; 0x1e3a <game_select+0x254>
    1e0a:	13 30       	cpi	r17, 0x03	; 3
    1e0c:	f1 f0       	breq	.+60     	; 0x1e4a <game_select+0x264>
    1e0e:	25 c0       	rjmp	.+74     	; 0x1e5a <game_select+0x274>
	{
		case 0:
		menu_sound(); 
    1e10:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <menu_sound>
		CLCD_voidSendCommand(1);
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
	    LEDS_PowerON(0xff);
    1e1a:	8f ef       	ldi	r24, 0xFF	; 255
    1e1c:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <LEDS_PowerON>
		SevenSegments_PowerON();
    1e20:	0e 94 38 15 	call	0x2a70	; 0x2a70 <SevenSegments_PowerON>
		Game();
    1e24:	0e 94 a0 18 	call	0x3140	; 0x3140 <Game>
		break;
    1e28:	21 c0       	rjmp	.+66     	; 0x1e6c <game_select+0x286>
		case 1:
		menu_sound(); 
    1e2a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <menu_sound>
		CLCD_voidSendCommand(1);
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
		ping_pong();
    1e34:	0e 94 42 10 	call	0x2084	; 0x2084 <ping_pong>
		break;
    1e38:	19 c0       	rjmp	.+50     	; 0x1e6c <game_select+0x286>
		case 2:
		menu_sound(); 
    1e3a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <menu_sound>
		CLCD_voidSendCommand(1);
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
		COW_BOY2();
    1e44:	0e 94 1a 03 	call	0x634	; 0x634 <COW_BOY2>
		
		break;
    1e48:	11 c0       	rjmp	.+34     	; 0x1e6c <game_select+0x286>
		case 3:
		menu_sound();
    1e4a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <menu_sound>
		CLCD_voidSendCommand(1);
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
		COW_BOY();
    1e54:	0e 94 80 0b 	call	0x1700	; 0x1700 <COW_BOY>
		
		break;
    1e58:	09 c0       	rjmp	.+18     	; 0x1e6c <game_select+0x286>
		default:
		if(cursor_x>=4)
    1e5a:	14 30       	cpi	r17, 0x04	; 4
    1e5c:	38 f0       	brcs	.+14     	; 0x1e6c <game_select+0x286>
		{
			menu_sound();
    1e5e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <menu_sound>
			CLCD_voidSendCommand(1);
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
			snake();
    1e68:	0e 94 78 19 	call	0x32f0	; 0x32f0 <snake>
		}
		
	}
	
}
    1e6c:	28 96       	adiw	r28, 0x08	; 8
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	df 91       	pop	r29
    1e7a:	cf 91       	pop	r28
    1e7c:	1f 91       	pop	r17
    1e7e:	08 95       	ret

00001e80 <main>:
int main(void)
{  
	
	while(1)
	{
      game_select();
    1e80:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <game_select>
    1e84:	fd cf       	rjmp	.-6      	; 0x1e80 <main>

00001e86 <BUZZ1>:
		
		else
		{
			CLCD_voidSendSpecialChar(erase,3,x2,y2);
			y2=y2-1;
			CLCD_voidSendSpecialChar(player2,1,x2,y2);
    1e86:	84 b3       	in	r24, 0x14	; 20
    1e88:	80 64       	ori	r24, 0x40	; 64
    1e8a:	84 bb       	out	0x14, r24	; 20
    1e8c:	85 b3       	in	r24, 0x15	; 21
    1e8e:	80 64       	ori	r24, 0x40	; 64
    1e90:	85 bb       	out	0x15, r24	; 21
    1e92:	83 ed       	ldi	r24, 0xD3	; 211
    1e94:	90 e3       	ldi	r25, 0x30	; 48
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <BUZZ1+0x10>
    1e9a:	00 c0       	rjmp	.+0      	; 0x1e9c <BUZZ1+0x16>
    1e9c:	00 00       	nop
    1e9e:	85 b3       	in	r24, 0x15	; 21
    1ea0:	8f 7b       	andi	r24, 0xBF	; 191
    1ea2:	85 bb       	out	0x15, r24	; 21
    1ea4:	08 95       	ret

00001ea6 <BUZZ21>:
    1ea6:	84 b3       	in	r24, 0x14	; 20
    1ea8:	80 64       	ori	r24, 0x40	; 64
    1eaa:	84 bb       	out	0x14, r24	; 20
    1eac:	85 b3       	in	r24, 0x15	; 21
    1eae:	80 64       	ori	r24, 0x40	; 64
    1eb0:	85 bb       	out	0x15, r24	; 21
    1eb2:	2f e3       	ldi	r18, 0x3F	; 63
    1eb4:	8d e0       	ldi	r24, 0x0D	; 13
    1eb6:	93 e0       	ldi	r25, 0x03	; 3
    1eb8:	21 50       	subi	r18, 0x01	; 1
    1eba:	80 40       	sbci	r24, 0x00	; 0
    1ebc:	90 40       	sbci	r25, 0x00	; 0
    1ebe:	e1 f7       	brne	.-8      	; 0x1eb8 <BUZZ21+0x12>
    1ec0:	00 c0       	rjmp	.+0      	; 0x1ec2 <BUZZ21+0x1c>
    1ec2:	00 00       	nop
    1ec4:	85 b3       	in	r24, 0x15	; 21
    1ec6:	8f 7b       	andi	r24, 0xBF	; 191
    1ec8:	85 bb       	out	0x15, r24	; 21
    1eca:	08 95       	ret

00001ecc <player2_movecc>:
    return min + (r / buckets);
}
*/
void player2_movecc()
{
	if (game_End2==0)
    1ecc:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    1ed0:	81 11       	cpse	r24, r1
    1ed2:	22 c0       	rjmp	.+68     	; 0x1f18 <player2_movecc+0x4c>
	{
	
	CLCD_voidSendSpecialChar(erase,3,x2,y2);
    1ed4:	20 91 c7 00 	lds	r18, 0x00C7	; 0x8000c7 <y2>
    1ed8:	40 91 c8 00 	lds	r20, 0x00C8	; 0x8000c8 <x2>
    1edc:	63 e0       	ldi	r22, 0x03	; 3
    1ede:	88 e1       	ldi	r24, 0x18	; 24
    1ee0:	92 e0       	ldi	r25, 0x02	; 2
    1ee2:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
	/*
       x2=random_x_y(0, 3);
	   y2=random_x_y(15, 15);
*/
	if(x2<=2)
    1ee6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <x2>
    1eea:	83 30       	cpi	r24, 0x03	; 3
    1eec:	38 f4       	brcc	.+14     	; 0x1efc <player2_movecc+0x30>
	{
		x2=x2+1;
    1eee:	8f 5f       	subi	r24, 0xFF	; 255
    1ef0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <x2>
		y2=15;
    1ef4:	8f e0       	ldi	r24, 0x0F	; 15
    1ef6:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <y2>
    1efa:	05 c0       	rjmp	.+10     	; 0x1f06 <player2_movecc+0x3a>
	}
	else
	{
		y2=15;
    1efc:	8f e0       	ldi	r24, 0x0F	; 15
    1efe:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <y2>
		x2=0;	
    1f02:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <x2>
	}
	CLCD_voidSendSpecialChar(player2,1,x2,y2);
    1f06:	20 91 c7 00 	lds	r18, 0x00C7	; 0x8000c7 <y2>
    1f0a:	40 91 c8 00 	lds	r20, 0x00C8	; 0x8000c8 <x2>
    1f0e:	61 e0       	ldi	r22, 0x01	; 1
    1f10:	8d ea       	ldi	r24, 0xAD	; 173
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    1f18:	08 95       	ret

00001f1a <player1_move>:
}
}
void player1_move()
{
	if (game_End2==0)
    1f1a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    1f1e:	81 11       	cpse	r24, r1
    1f20:	8e c0       	rjmp	.+284    	; 0x203e <player1_move+0x124>
	{
	
	 press_key=key();
    1f22:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <key>
    1f26:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <press_key>
	 switch(press_key)
    1f2a:	81 30       	cpi	r24, 0x01	; 1
    1f2c:	49 f1       	breq	.+82     	; 0x1f80 <player1_move+0x66>
    1f2e:	38 f0       	brcs	.+14     	; 0x1f3e <player1_move+0x24>
    1f30:	82 30       	cpi	r24, 0x02	; 2
    1f32:	09 f4       	brne	.+2      	; 0x1f36 <player1_move+0x1c>
    1f34:	40 c0       	rjmp	.+128    	; 0x1fb6 <player1_move+0x9c>
    1f36:	83 30       	cpi	r24, 0x03	; 3
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <player1_move+0x22>
    1f3a:	57 c0       	rjmp	.+174    	; 0x1fea <player1_move+0xd0>
    1f3c:	08 95       	ret
	 {
		 case left:
		 player2_movecc();
    1f3e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
		
		 if(y1<1)
    1f42:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <y1>
    1f46:	21 11       	cpse	r18, r1
    1f48:	07 c0       	rjmp	.+14     	; 0x1f58 <player1_move+0x3e>
		 {
			 CLCD_voidSendSpecialChar(player1,0,1,0);
    1f4a:	41 e0       	ldi	r20, 0x01	; 1
    1f4c:	60 e0       	ldi	r22, 0x00	; 0
    1f4e:	85 eb       	ldi	r24, 0xB5	; 181
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    1f56:	08 95       	ret
			 
		 }
		 
		 else
		 {
			 CLCD_voidSendSpecialChar(erase,3,x1,y1);
    1f58:	40 91 c9 00 	lds	r20, 0x00C9	; 0x8000c9 <x1>
    1f5c:	63 e0       	ldi	r22, 0x03	; 3
    1f5e:	88 e1       	ldi	r24, 0x18	; 24
    1f60:	92 e0       	ldi	r25, 0x02	; 2
    1f62:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
			 y1=y1-1;
    1f66:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <y1>
    1f6a:	21 50       	subi	r18, 0x01	; 1
    1f6c:	20 93 24 02 	sts	0x0224, r18	; 0x800224 <y1>
			 CLCD_voidSendSpecialChar(player1,0,x1,y1);
    1f70:	40 91 c9 00 	lds	r20, 0x00C9	; 0x8000c9 <x1>
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	85 eb       	ldi	r24, 0xB5	; 181
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    1f7e:	08 95       	ret
		 }
		 
		 break;
		 case up:
		 player2_movecc();
    1f80:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
		 
		 if(x1>=1)
    1f84:	40 91 c9 00 	lds	r20, 0x00C9	; 0x8000c9 <x1>
    1f88:	44 23       	and	r20, r20
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <player1_move+0x74>
    1f8c:	58 c0       	rjmp	.+176    	; 0x203e <player1_move+0x124>
		 {
			 CLCD_voidSendSpecialChar(erase,3,x1,y1);
    1f8e:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <y1>
    1f92:	63 e0       	ldi	r22, 0x03	; 3
    1f94:	88 e1       	ldi	r24, 0x18	; 24
    1f96:	92 e0       	ldi	r25, 0x02	; 2
    1f98:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
			 x1=x1-1;
    1f9c:	40 91 c9 00 	lds	r20, 0x00C9	; 0x8000c9 <x1>
    1fa0:	41 50       	subi	r20, 0x01	; 1
    1fa2:	40 93 c9 00 	sts	0x00C9, r20	; 0x8000c9 <x1>
			 CLCD_voidSendSpecialChar(player1,0,x1,y1);
    1fa6:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <y1>
    1faa:	60 e0       	ldi	r22, 0x00	; 0
    1fac:	85 eb       	ldi	r24, 0xB5	; 181
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    1fb4:	08 95       	ret
			 
		 }
		 
		 break;
		 case down:
		 player2_movecc();
    1fb6:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
		
		 if(x1<3)
    1fba:	40 91 c9 00 	lds	r20, 0x00C9	; 0x8000c9 <x1>
    1fbe:	43 30       	cpi	r20, 0x03	; 3
    1fc0:	f0 f5       	brcc	.+124    	; 0x203e <player1_move+0x124>
		 {
			 CLCD_voidSendSpecialChar(erase,3,x1,y1);
    1fc2:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <y1>
    1fc6:	63 e0       	ldi	r22, 0x03	; 3
    1fc8:	88 e1       	ldi	r24, 0x18	; 24
    1fca:	92 e0       	ldi	r25, 0x02	; 2
    1fcc:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
			 x1=x1+1;
    1fd0:	40 91 c9 00 	lds	r20, 0x00C9	; 0x8000c9 <x1>
    1fd4:	4f 5f       	subi	r20, 0xFF	; 255
    1fd6:	40 93 c9 00 	sts	0x00C9, r20	; 0x8000c9 <x1>
			 CLCD_voidSendSpecialChar(player1,0,x1,y1);
    1fda:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <y1>
    1fde:	60 e0       	ldi	r22, 0x00	; 0
    1fe0:	85 eb       	ldi	r24, 0xB5	; 181
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    1fe8:	08 95       	ret
		 {
			 
		 }
		 break;
		 case right:
		 player2_movecc();
    1fea:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
		
		 if(y1>=7)
    1fee:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <y1>
    1ff2:	27 30       	cpi	r18, 0x07	; 7
    1ff4:	88 f0       	brcs	.+34     	; 0x2018 <player1_move+0xfe>
		 {
			 CLCD_voidSendSpecialChar(erase,3,x1,y1);
    1ff6:	40 91 c9 00 	lds	r20, 0x00C9	; 0x8000c9 <x1>
    1ffa:	63 e0       	ldi	r22, 0x03	; 3
    1ffc:	88 e1       	ldi	r24, 0x18	; 24
    1ffe:	92 e0       	ldi	r25, 0x02	; 2
    2000:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
			 CLCD_voidSendSpecialChar(player1,0,1,0);
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	41 e0       	ldi	r20, 0x01	; 1
    2008:	60 e0       	ldi	r22, 0x00	; 0
    200a:	85 eb       	ldi	r24, 0xB5	; 181
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
			 y1=0;
    2012:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <y1>
    2016:	08 95       	ret
		 }
		
		 else
		 {
			 CLCD_voidSendSpecialChar(erase,3,x1,y1);
    2018:	40 91 c9 00 	lds	r20, 0x00C9	; 0x8000c9 <x1>
    201c:	63 e0       	ldi	r22, 0x03	; 3
    201e:	88 e1       	ldi	r24, 0x18	; 24
    2020:	92 e0       	ldi	r25, 0x02	; 2
    2022:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
			 y1=y1+1;
    2026:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <y1>
    202a:	2f 5f       	subi	r18, 0xFF	; 255
    202c:	20 93 24 02 	sts	0x0224, r18	; 0x800224 <y1>
			 CLCD_voidSendSpecialChar(player1,0,x1,y1);
    2030:	40 91 c9 00 	lds	r20, 0x00C9	; 0x8000c9 <x1>
    2034:	60 e0       	ldi	r22, 0x00	; 0
    2036:	85 eb       	ldi	r24, 0xB5	; 181
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    203e:	08 95       	ret

00002040 <ball>:
}
}
void ball()
{
	
	if(game_End2==0)
    2040:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    2044:	81 11       	cpse	r24, r1
    2046:	1d c0       	rjmp	.+58     	; 0x2082 <ball+0x42>
	{
			if(temp<=2)
    2048:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <temp>
    204c:	83 30       	cpi	r24, 0x03	; 3
    204e:	48 f4       	brcc	.+18     	; 0x2062 <ball+0x22>
			{
				ball_posit[0]=temp+1;
    2050:	8f 5f       	subi	r24, 0xFF	; 255
    2052:	ed eb       	ldi	r30, 0xBD	; 189
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 83       	st	Z, r24
				ball_posit[1]=1;
    2058:	91 e0       	ldi	r25, 0x01	; 1
    205a:	91 83       	std	Z+1, r25	; 0x01
				temp =ball_posit[0];
    205c:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <temp>
    2060:	07 c0       	rjmp	.+14     	; 0x2070 <ball+0x30>
			}
			else
			{
				ball_posit[1]=1;
    2062:	ed eb       	ldi	r30, 0xBD	; 189
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	81 83       	std	Z+1, r24	; 0x01
				ball_posit[0]=0;
    206a:	10 82       	st	Z, r1
				temp =ball_posit[0];
    206c:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <temp>
			}
				CLCD_voidSendSpecialChar(Ball,4,ball_posit[0],ball_posit[1]);
    2070:	ed eb       	ldi	r30, 0xBD	; 189
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	21 81       	ldd	r18, Z+1	; 0x01
    2076:	40 81       	ld	r20, Z
    2078:	64 e0       	ldi	r22, 0x04	; 4
    207a:	8f eb       	ldi	r24, 0xBF	; 191
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    2082:	08 95       	ret

00002084 <ping_pong>:
	  return 0;
 }
 }
void ping_pong()
{
	if (game_End2==0)
    2084:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    2088:	81 11       	cpse	r24, r1
    208a:	28 c0       	rjmp	.+80     	; 0x20dc <ping_pong+0x58>
	{
	
		CLCD_voidSendSpecialChar(player1,0,x1,y1);
    208c:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <y1>
    2090:	40 91 c9 00 	lds	r20, 0x00C9	; 0x8000c9 <x1>
    2094:	60 e0       	ldi	r22, 0x00	; 0
    2096:	85 eb       	ldi	r24, 0xB5	; 181
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
		CLCD_voidSendSpecialChar(player2,1,x2,y2);
    209e:	20 91 c7 00 	lds	r18, 0x00C7	; 0x8000c7 <y2>
    20a2:	40 91 c8 00 	lds	r20, 0x00C8	; 0x8000c8 <x2>
    20a6:	61 e0       	ldi	r22, 0x01	; 1
    20a8:	8d ea       	ldi	r24, 0xAD	; 173
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
		ball();
    20b0:	0e 94 20 10 	call	0x2040	; 0x2040 <ball>
    20b4:	2f e3       	ldi	r18, 0x3F	; 63
    20b6:	82 e4       	ldi	r24, 0x42	; 66
    20b8:	9f e0       	ldi	r25, 0x0F	; 15
    20ba:	21 50       	subi	r18, 0x01	; 1
    20bc:	80 40       	sbci	r24, 0x00	; 0
    20be:	90 40       	sbci	r25, 0x00	; 0
    20c0:	e1 f7       	brne	.-8      	; 0x20ba <ping_pong+0x36>
    20c2:	00 c0       	rjmp	.+0      	; 0x20c4 <ping_pong+0x40>
    20c4:	00 00       	nop
    20c6:	06 c0       	rjmp	.+12     	; 0x20d4 <ping_pong+0x50>
		_delay_ms(5000);
		while(game_End2==0)
		{
			 player1_move();
    20c8:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <player1_move>
			 ball_move_player1();
    20cc:	0e 94 61 11 	call	0x22c2	; 0x22c2 <ball_move_player1>
			 ball_move_player2();
    20d0:	0e 94 3c 13 	call	0x2678	; 0x2678 <ball_move_player2>
	
		CLCD_voidSendSpecialChar(player1,0,x1,y1);
		CLCD_voidSendSpecialChar(player2,1,x2,y2);
		ball();
		_delay_ms(5000);
		while(game_End2==0)
    20d4:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    20d8:	88 23       	and	r24, r24
    20da:	b1 f3       	breq	.-20     	; 0x20c8 <ping_pong+0x44>
    20dc:	08 95       	ret

000020de <check_goal>:

void check_goal()
{
	
	
	if(game_End2==0)
    20de:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    20e2:	81 11       	cpse	r24, r1
    20e4:	ed c0       	rjmp	.+474    	; 0x22c0 <check_goal+0x1e2>
	{
		
	
	if(ball_posit[1]>=15)
    20e6:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <ball_posit+0x1>
    20ea:	8f 30       	cpi	r24, 0x0F	; 15
    20ec:	08 f4       	brcc	.+2      	; 0x20f0 <check_goal+0x12>
    20ee:	72 c0       	rjmp	.+228    	; 0x21d4 <check_goal+0xf6>
	{
		result1++;
    20f0:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <result1>
    20f4:	8f 5f       	subi	r24, 0xFF	; 255
    20f6:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <result1>
		CLCD_voidSendCommand(1);
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
		 CLCD_voidGoTOxy(1,6);
    2100:	66 e0       	ldi	r22, 0x06	; 6
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
		CLCD_voidPrintString("GOAL!!");
    2108:	8f e9       	ldi	r24, 0x9F	; 159
    210a:	91 e0       	ldi	r25, 0x01	; 1
    210c:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
		 BUZZ21();
    2110:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <BUZZ21>
    2114:	2f e3       	ldi	r18, 0x3F	; 63
    2116:	82 e4       	ldi	r24, 0x42	; 66
    2118:	9f e0       	ldi	r25, 0x0F	; 15
    211a:	21 50       	subi	r18, 0x01	; 1
    211c:	80 40       	sbci	r24, 0x00	; 0
    211e:	90 40       	sbci	r25, 0x00	; 0
    2120:	e1 f7       	brne	.-8      	; 0x211a <check_goal+0x3c>
    2122:	00 c0       	rjmp	.+0      	; 0x2124 <check_goal+0x46>
    2124:	00 00       	nop
		_delay_ms(5000);
		CLCD_voidSendCommand(1);
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
		 CLCD_voidGoTOxy(1,6);
    212c:	66 e0       	ldi	r22, 0x06	; 6
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
		CLCD_voidPrintString("GOAL!!");
    2134:	8f e9       	ldi	r24, 0x9F	; 159
    2136:	91 e0       	ldi	r25, 0x01	; 1
    2138:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
    213c:	2f e3       	ldi	r18, 0x3F	; 63
    213e:	82 e4       	ldi	r24, 0x42	; 66
    2140:	9f e0       	ldi	r25, 0x0F	; 15
    2142:	21 50       	subi	r18, 0x01	; 1
    2144:	80 40       	sbci	r24, 0x00	; 0
    2146:	90 40       	sbci	r25, 0x00	; 0
    2148:	e1 f7       	brne	.-8      	; 0x2142 <check_goal+0x64>
    214a:	00 c0       	rjmp	.+0      	; 0x214c <check_goal+0x6e>
    214c:	00 00       	nop
		
		_delay_ms(5000);
		CLCD_voidSendCommand(1);
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
		
		 if(result1==3)
    2154:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <result1>
    2158:	83 30       	cpi	r24, 0x03	; 3
    215a:	b1 f5       	brne	.+108    	; 0x21c8 <check_goal+0xea>
		 {
			 CLCD_voidSendCommand(1);
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
			 CLCD_voidGoTOxy(1,6);
    2162:	66 e0       	ldi	r22, 0x06	; 6
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			 CLCD_voidPrintString("P1 WIN!!");
    216a:	86 ea       	ldi	r24, 0xA6	; 166
    216c:	91 e0       	ldi	r25, 0x01	; 1
    216e:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
			 BUZZ21();
    2172:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <BUZZ21>
    2176:	2f e3       	ldi	r18, 0x3F	; 63
    2178:	82 e4       	ldi	r24, 0x42	; 66
    217a:	9f e0       	ldi	r25, 0x0F	; 15
    217c:	21 50       	subi	r18, 0x01	; 1
    217e:	80 40       	sbci	r24, 0x00	; 0
    2180:	90 40       	sbci	r25, 0x00	; 0
    2182:	e1 f7       	brne	.-8      	; 0x217c <check_goal+0x9e>
    2184:	00 c0       	rjmp	.+0      	; 0x2186 <check_goal+0xa8>
    2186:	00 00       	nop
			 _delay_ms(5000);
			 CLCD_voidSendCommand(1);
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
			 CLCD_voidGoTOxy(1,6);
    218e:	66 e0       	ldi	r22, 0x06	; 6
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			 CLCD_voidPrintString("P1 WIN!!");
    2196:	86 ea       	ldi	r24, 0xA6	; 166
    2198:	91 e0       	ldi	r25, 0x01	; 1
    219a:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
			  BUZZ21();
    219e:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <BUZZ21>
    21a2:	2f e3       	ldi	r18, 0x3F	; 63
    21a4:	82 e4       	ldi	r24, 0x42	; 66
    21a6:	9f e0       	ldi	r25, 0x0F	; 15
    21a8:	21 50       	subi	r18, 0x01	; 1
    21aa:	80 40       	sbci	r24, 0x00	; 0
    21ac:	90 40       	sbci	r25, 0x00	; 0
    21ae:	e1 f7       	brne	.-8      	; 0x21a8 <check_goal+0xca>
    21b0:	00 c0       	rjmp	.+0      	; 0x21b2 <check_goal+0xd4>
    21b2:	00 00       	nop
			 _delay_ms(5000);
			 CLCD_voidSendCommand(1);
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
			  result2=result1=0;
    21ba:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <result1>
    21be:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <result2>
			  game_End2=1;
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <game_End2>
	       }
	  	if (game_End2==0)
    21c8:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    21cc:	81 11       	cpse	r24, r1
    21ce:	02 c0       	rjmp	.+4      	; 0x21d4 <check_goal+0xf6>
	  	{
		  	ping_pong();
    21d0:	0e 94 42 10 	call	0x2084	; 0x2084 <ping_pong>
	  	}
	}
 if(ball_posit[1]<=0)
    21d4:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <ball_posit+0x1>
    21d8:	81 11       	cpse	r24, r1
    21da:	72 c0       	rjmp	.+228    	; 0x22c0 <check_goal+0x1e2>
	{
		result2++;
    21dc:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <result2>
    21e0:	8f 5f       	subi	r24, 0xFF	; 255
    21e2:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <result2>
		CLCD_voidSendCommand(1);
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
	 CLCD_voidGoTOxy(1,6);
    21ec:	66 e0       	ldi	r22, 0x06	; 6
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
		CLCD_voidPrintString("GOAL!!");
    21f4:	8f e9       	ldi	r24, 0x9F	; 159
    21f6:	91 e0       	ldi	r25, 0x01	; 1
    21f8:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
		 BUZZ21();
    21fc:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <BUZZ21>
    2200:	2f e3       	ldi	r18, 0x3F	; 63
    2202:	82 e4       	ldi	r24, 0x42	; 66
    2204:	9f e0       	ldi	r25, 0x0F	; 15
    2206:	21 50       	subi	r18, 0x01	; 1
    2208:	80 40       	sbci	r24, 0x00	; 0
    220a:	90 40       	sbci	r25, 0x00	; 0
    220c:	e1 f7       	brne	.-8      	; 0x2206 <check_goal+0x128>
    220e:	00 c0       	rjmp	.+0      	; 0x2210 <check_goal+0x132>
    2210:	00 00       	nop
		_delay_ms(5000);
		CLCD_voidSendCommand(1);
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
		 CLCD_voidGoTOxy(1,6);
    2218:	66 e0       	ldi	r22, 0x06	; 6
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
		CLCD_voidPrintString("GOAL!!");
    2220:	8f e9       	ldi	r24, 0x9F	; 159
    2222:	91 e0       	ldi	r25, 0x01	; 1
    2224:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
    2228:	2f e3       	ldi	r18, 0x3F	; 63
    222a:	82 e4       	ldi	r24, 0x42	; 66
    222c:	9f e0       	ldi	r25, 0x0F	; 15
    222e:	21 50       	subi	r18, 0x01	; 1
    2230:	80 40       	sbci	r24, 0x00	; 0
    2232:	90 40       	sbci	r25, 0x00	; 0
    2234:	e1 f7       	brne	.-8      	; 0x222e <check_goal+0x150>
    2236:	00 c0       	rjmp	.+0      	; 0x2238 <check_goal+0x15a>
    2238:	00 00       	nop
		
		_delay_ms(5000);
		CLCD_voidSendCommand(1);
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
		if(result2==3)
    2240:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <result2>
    2244:	83 30       	cpi	r24, 0x03	; 3
    2246:	b1 f5       	brne	.+108    	; 0x22b4 <check_goal+0x1d6>
		{
			
			CLCD_voidSendCommand(1);
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
			 CLCD_voidGoTOxy(1,6);
    224e:	66 e0       	ldi	r22, 0x06	; 6
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			CLCD_voidPrintString("P2 WIN!!");
    2256:	8f ea       	ldi	r24, 0xAF	; 175
    2258:	91 e0       	ldi	r25, 0x01	; 1
    225a:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
			 BUZZ2();
    225e:	0e 94 90 07 	call	0xf20	; 0xf20 <BUZZ2>
    2262:	2f e3       	ldi	r18, 0x3F	; 63
    2264:	82 e4       	ldi	r24, 0x42	; 66
    2266:	9f e0       	ldi	r25, 0x0F	; 15
    2268:	21 50       	subi	r18, 0x01	; 1
    226a:	80 40       	sbci	r24, 0x00	; 0
    226c:	90 40       	sbci	r25, 0x00	; 0
    226e:	e1 f7       	brne	.-8      	; 0x2268 <check_goal+0x18a>
    2270:	00 c0       	rjmp	.+0      	; 0x2272 <check_goal+0x194>
    2272:	00 00       	nop
			_delay_ms(5000);
			CLCD_voidSendCommand(1);
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
			 CLCD_voidGoTOxy(1,6);
    227a:	66 e0       	ldi	r22, 0x06	; 6
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			CLCD_voidPrintString("P2 WIN!!");
    2282:	8f ea       	ldi	r24, 0xAF	; 175
    2284:	91 e0       	ldi	r25, 0x01	; 1
    2286:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
			 BUZZ21();
    228a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <BUZZ21>
    228e:	2f e3       	ldi	r18, 0x3F	; 63
    2290:	82 e4       	ldi	r24, 0x42	; 66
    2292:	9f e0       	ldi	r25, 0x0F	; 15
    2294:	21 50       	subi	r18, 0x01	; 1
    2296:	80 40       	sbci	r24, 0x00	; 0
    2298:	90 40       	sbci	r25, 0x00	; 0
    229a:	e1 f7       	brne	.-8      	; 0x2294 <check_goal+0x1b6>
    229c:	00 c0       	rjmp	.+0      	; 0x229e <check_goal+0x1c0>
    229e:	00 00       	nop
			_delay_ms(5000);
			CLCD_voidSendCommand(1);
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
			 result2=result1=0;
    22a6:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <result1>
    22aa:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <result2>
			 game_End2=1;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <game_End2>
		}
		if (game_End2==0)
    22b4:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    22b8:	81 11       	cpse	r24, r1
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <check_goal+0x1e2>
		{
			ping_pong();
    22bc:	0e 94 42 10 	call	0x2084	; 0x2084 <ping_pong>
    22c0:	08 95       	ret

000022c2 <ball_move_player1>:
	}
	
	}
}
void ball_move_player1()
{
    22c2:	cf 93       	push	r28
    22c4:	df 93       	push	r29
	if (game_End2==0)
    22c6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    22ca:	81 11       	cpse	r24, r1
    22cc:	d2 c1       	rjmp	.+932    	; 0x2672 <ball_move_player1+0x3b0>
	{
	
	check_goal();
    22ce:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
	if(ball_posit[1]==y1+1&&ball_posit[0]==x1)
    22d2:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <ball_posit+0x1>
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <y1>
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	01 96       	adiw	r24, 0x01	; 1
    22e0:	28 17       	cp	r18, r24
    22e2:	39 07       	cpc	r19, r25
    22e4:	09 f0       	breq	.+2      	; 0x22e8 <ball_move_player1+0x26>
    22e6:	c5 c1       	rjmp	.+906    	; 0x2672 <ball_move_player1+0x3b0>
    22e8:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <ball_posit>
    22ec:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <x1>
    22f0:	98 13       	cpse	r25, r24
    22f2:	bf c1       	rjmp	.+894    	; 0x2672 <ball_move_player1+0x3b0>
	{
		BUZZ1();
    22f4:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <BUZZ1>
		switch(x1)
    22f8:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <x1>
    22fc:	81 30       	cpi	r24, 0x01	; 1
    22fe:	09 f4       	brne	.+2      	; 0x2302 <ball_move_player1+0x40>
    2300:	82 c0       	rjmp	.+260    	; 0x2406 <ball_move_player1+0x144>
    2302:	38 f0       	brcs	.+14     	; 0x2312 <ball_move_player1+0x50>
    2304:	82 30       	cpi	r24, 0x02	; 2
    2306:	09 f4       	brne	.+2      	; 0x230a <ball_move_player1+0x48>
    2308:	00 c1       	rjmp	.+512    	; 0x250a <ball_move_player1+0x248>
    230a:	83 30       	cpi	r24, 0x03	; 3
    230c:	09 f4       	brne	.+2      	; 0x2310 <ball_move_player1+0x4e>
    230e:	31 c1       	rjmp	.+610    	; 0x2572 <ball_move_player1+0x2b0>
    2310:	b0 c1       	rjmp	.+864    	; 0x2672 <ball_move_player1+0x3b0>
		{
			case 0:
			player2_movecc();
    2312:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
			while(ball_posit[1]!=y2-1&&game_End2==0)
    2316:	66 c0       	rjmp	.+204    	; 0x23e4 <ball_move_player1+0x122>
			{
				player2_movecc();
    2318:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
			while(ball_posit[0]<=2&&ball_posit[1]<=14)
    231c:	27 c0       	rjmp	.+78     	; 0x236c <ball_move_player1+0xaa>
			{
				player2_movecc();
    231e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
				check_goal();
    2322:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
				CLCD_voidSendSpecialChar(erase,3,ball_posit[0],ball_posit[1]);
    2326:	cd eb       	ldi	r28, 0xBD	; 189
    2328:	d0 e0       	ldi	r29, 0x00	; 0
    232a:	29 81       	ldd	r18, Y+1	; 0x01
    232c:	48 81       	ld	r20, Y
    232e:	63 e0       	ldi	r22, 0x03	; 3
    2330:	88 e1       	ldi	r24, 0x18	; 24
    2332:	92 e0       	ldi	r25, 0x02	; 2
    2334:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
				ball_posit[1]=ball_posit[1]+1;
    2338:	29 81       	ldd	r18, Y+1	; 0x01
    233a:	2f 5f       	subi	r18, 0xFF	; 255
    233c:	29 83       	std	Y+1, r18	; 0x01
				ball_posit[0]=ball_posit[0]+1;
    233e:	48 81       	ld	r20, Y
    2340:	4f 5f       	subi	r20, 0xFF	; 255
    2342:	48 83       	st	Y, r20
				CLCD_voidSendSpecialChar(Ball,4,ball_posit[0],ball_posit[1]);
    2344:	64 e0       	ldi	r22, 0x04	; 4
    2346:	8f eb       	ldi	r24, 0xBF	; 191
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    234e:	2f e3       	ldi	r18, 0x3F	; 63
    2350:	8d e0       	ldi	r24, 0x0D	; 13
    2352:	93 e0       	ldi	r25, 0x03	; 3
    2354:	21 50       	subi	r18, 0x01	; 1
    2356:	80 40       	sbci	r24, 0x00	; 0
    2358:	90 40       	sbci	r25, 0x00	; 0
    235a:	e1 f7       	brne	.-8      	; 0x2354 <ball_move_player1+0x92>
    235c:	00 c0       	rjmp	.+0      	; 0x235e <ball_move_player1+0x9c>
    235e:	00 00       	nop
				_delay_ms(1000);
				 player1_move();
    2360:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <player1_move>
				
				 ball_move_player2();
    2364:	0e 94 3c 13 	call	0x2678	; 0x2678 <ball_move_player2>
				check_goal();
    2368:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
			case 0:
			player2_movecc();
			while(ball_posit[1]!=y2-1&&game_End2==0)
			{
				player2_movecc();
			while(ball_posit[0]<=2&&ball_posit[1]<=14)
    236c:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <ball_posit>
    2370:	83 30       	cpi	r24, 0x03	; 3
    2372:	20 f4       	brcc	.+8      	; 0x237c <ball_move_player1+0xba>
    2374:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <ball_posit+0x1>
    2378:	9f 30       	cpi	r25, 0x0F	; 15
    237a:	88 f2       	brcs	.-94     	; 0x231e <ball_move_player1+0x5c>
				 ball_move_player2();
				check_goal();
				
			}
			
			if(ball_posit[0]>=3)
    237c:	83 30       	cpi	r24, 0x03	; 3
    237e:	90 f1       	brcs	.+100    	; 0x23e4 <ball_move_player1+0x122>
			{
				player2_movecc();
    2380:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
				while(ball_posit[0]>=1&&game_End2==0)
    2384:	27 c0       	rjmp	.+78     	; 0x23d4 <ball_move_player1+0x112>
				{
					player2_movecc();
    2386:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
					check_goal();
    238a:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
					CLCD_voidSendSpecialChar(erase,3,ball_posit[0],ball_posit[1]);
    238e:	cd eb       	ldi	r28, 0xBD	; 189
    2390:	d0 e0       	ldi	r29, 0x00	; 0
    2392:	29 81       	ldd	r18, Y+1	; 0x01
    2394:	48 81       	ld	r20, Y
    2396:	63 e0       	ldi	r22, 0x03	; 3
    2398:	88 e1       	ldi	r24, 0x18	; 24
    239a:	92 e0       	ldi	r25, 0x02	; 2
    239c:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
					ball_posit[0]=ball_posit[0]-1;
    23a0:	48 81       	ld	r20, Y
    23a2:	41 50       	subi	r20, 0x01	; 1
    23a4:	48 83       	st	Y, r20
					ball_posit[1]=ball_posit[1]+1;
    23a6:	29 81       	ldd	r18, Y+1	; 0x01
    23a8:	2f 5f       	subi	r18, 0xFF	; 255
    23aa:	29 83       	std	Y+1, r18	; 0x01
					CLCD_voidSendSpecialChar(Ball,4,ball_posit[0],ball_posit[1]);
    23ac:	64 e0       	ldi	r22, 0x04	; 4
    23ae:	8f eb       	ldi	r24, 0xBF	; 191
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    23b6:	2f e3       	ldi	r18, 0x3F	; 63
    23b8:	8d e0       	ldi	r24, 0x0D	; 13
    23ba:	93 e0       	ldi	r25, 0x03	; 3
    23bc:	21 50       	subi	r18, 0x01	; 1
    23be:	80 40       	sbci	r24, 0x00	; 0
    23c0:	90 40       	sbci	r25, 0x00	; 0
    23c2:	e1 f7       	brne	.-8      	; 0x23bc <ball_move_player1+0xfa>
    23c4:	00 c0       	rjmp	.+0      	; 0x23c6 <ball_move_player1+0x104>
    23c6:	00 00       	nop
					_delay_ms(1000);
					player1_move();
    23c8:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <player1_move>
					
					ball_move_player2();
    23cc:	0e 94 3c 13 	call	0x2678	; 0x2678 <ball_move_player2>
					check_goal();
    23d0:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
			}
			
			if(ball_posit[0]>=3)
			{
				player2_movecc();
				while(ball_posit[0]>=1&&game_End2==0)
    23d4:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <ball_posit>
    23d8:	88 23       	and	r24, r24
    23da:	21 f0       	breq	.+8      	; 0x23e4 <ball_move_player1+0x122>
    23dc:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    23e0:	88 23       	and	r24, r24
    23e2:	89 f2       	breq	.-94     	; 0x2386 <ball_move_player1+0xc4>
		BUZZ1();
		switch(x1)
		{
			case 0:
			player2_movecc();
			while(ball_posit[1]!=y2-1&&game_End2==0)
    23e4:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <ball_posit+0x1>
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <y2>
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	28 17       	cp	r18, r24
    23f4:	39 07       	cpc	r19, r25
    23f6:	09 f4       	brne	.+2      	; 0x23fa <ball_move_player1+0x138>
    23f8:	3c c1       	rjmp	.+632    	; 0x2672 <ball_move_player1+0x3b0>
    23fa:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    23fe:	88 23       	and	r24, r24
    2400:	09 f4       	brne	.+2      	; 0x2404 <ball_move_player1+0x142>
    2402:	8a cf       	rjmp	.-236    	; 0x2318 <ball_move_player1+0x56>
    2404:	36 c1       	rjmp	.+620    	; 0x2672 <ball_move_player1+0x3b0>
				
			}
			}	
			break;
			case 1:
			player2_movecc();
    2406:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
			check_goal();
    240a:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
			while(ball_posit[1]<=y2-1&&game_End2==0)
    240e:	6c c0       	rjmp	.+216    	; 0x24e8 <ball_move_player1+0x226>
			{
				player2_movecc();
    2410:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
				while(ball_posit[0]<=2&&ball_posit[1]<=y2-1)
    2414:	27 c0       	rjmp	.+78     	; 0x2464 <ball_move_player1+0x1a2>
				{
					player2_movecc();
    2416:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
					check_goal();
    241a:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
					CLCD_voidSendSpecialChar(erase,3,ball_posit[0],ball_posit[1]);
    241e:	cd eb       	ldi	r28, 0xBD	; 189
    2420:	d0 e0       	ldi	r29, 0x00	; 0
    2422:	29 81       	ldd	r18, Y+1	; 0x01
    2424:	48 81       	ld	r20, Y
    2426:	63 e0       	ldi	r22, 0x03	; 3
    2428:	88 e1       	ldi	r24, 0x18	; 24
    242a:	92 e0       	ldi	r25, 0x02	; 2
    242c:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
					ball_posit[1]=ball_posit[1]+1;
    2430:	29 81       	ldd	r18, Y+1	; 0x01
    2432:	2f 5f       	subi	r18, 0xFF	; 255
    2434:	29 83       	std	Y+1, r18	; 0x01
					ball_posit[0]=ball_posit[0]+1;
    2436:	48 81       	ld	r20, Y
    2438:	4f 5f       	subi	r20, 0xFF	; 255
    243a:	48 83       	st	Y, r20
					CLCD_voidSendSpecialChar(Ball,4,ball_posit[0],ball_posit[1]);
    243c:	64 e0       	ldi	r22, 0x04	; 4
    243e:	8f eb       	ldi	r24, 0xBF	; 191
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    2446:	2f e3       	ldi	r18, 0x3F	; 63
    2448:	8d e0       	ldi	r24, 0x0D	; 13
    244a:	93 e0       	ldi	r25, 0x03	; 3
    244c:	21 50       	subi	r18, 0x01	; 1
    244e:	80 40       	sbci	r24, 0x00	; 0
    2450:	90 40       	sbci	r25, 0x00	; 0
    2452:	e1 f7       	brne	.-8      	; 0x244c <ball_move_player1+0x18a>
    2454:	00 c0       	rjmp	.+0      	; 0x2456 <ball_move_player1+0x194>
    2456:	00 00       	nop
					_delay_ms(1000);
					player1_move();
    2458:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <player1_move>
					
					ball_move_player2();
    245c:	0e 94 3c 13 	call	0x2678	; 0x2678 <ball_move_player2>
					check_goal();
    2460:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
			player2_movecc();
			check_goal();
			while(ball_posit[1]<=y2-1&&game_End2==0)
			{
				player2_movecc();
				while(ball_posit[0]<=2&&ball_posit[1]<=y2-1)
    2464:	40 91 bd 00 	lds	r20, 0x00BD	; 0x8000bd <ball_posit>
    2468:	43 30       	cpi	r20, 0x03	; 3
    246a:	50 f4       	brcc	.+20     	; 0x2480 <ball_move_player1+0x1be>
    246c:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <ball_posit+0x1>
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <y2>
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	82 17       	cp	r24, r18
    247c:	93 07       	cpc	r25, r19
    247e:	5c f6       	brge	.-106    	; 0x2416 <ball_move_player1+0x154>
					ball_move_player2();
					check_goal();
					
				}
				
				if(ball_posit[0]>=3)
    2480:	43 30       	cpi	r20, 0x03	; 3
    2482:	90 f1       	brcs	.+100    	; 0x24e8 <ball_move_player1+0x226>
				{
					player2_movecc();
    2484:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
					while(ball_posit[0]>=1&&game_End2==0)
    2488:	27 c0       	rjmp	.+78     	; 0x24d8 <ball_move_player1+0x216>
					{
						player2_movecc();
    248a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
						check_goal();
    248e:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
						CLCD_voidSendSpecialChar(erase,3,ball_posit[0],ball_posit[1]);
    2492:	cd eb       	ldi	r28, 0xBD	; 189
    2494:	d0 e0       	ldi	r29, 0x00	; 0
    2496:	29 81       	ldd	r18, Y+1	; 0x01
    2498:	48 81       	ld	r20, Y
    249a:	63 e0       	ldi	r22, 0x03	; 3
    249c:	88 e1       	ldi	r24, 0x18	; 24
    249e:	92 e0       	ldi	r25, 0x02	; 2
    24a0:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
						ball_posit[0]=ball_posit[0]-1;
    24a4:	48 81       	ld	r20, Y
    24a6:	41 50       	subi	r20, 0x01	; 1
    24a8:	48 83       	st	Y, r20
						ball_posit[1]=ball_posit[1]+1;
    24aa:	29 81       	ldd	r18, Y+1	; 0x01
    24ac:	2f 5f       	subi	r18, 0xFF	; 255
    24ae:	29 83       	std	Y+1, r18	; 0x01
						CLCD_voidSendSpecialChar(Ball,4,ball_posit[0],ball_posit[1]);
    24b0:	64 e0       	ldi	r22, 0x04	; 4
    24b2:	8f eb       	ldi	r24, 0xBF	; 191
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    24ba:	2f e3       	ldi	r18, 0x3F	; 63
    24bc:	8d e0       	ldi	r24, 0x0D	; 13
    24be:	93 e0       	ldi	r25, 0x03	; 3
    24c0:	21 50       	subi	r18, 0x01	; 1
    24c2:	80 40       	sbci	r24, 0x00	; 0
    24c4:	90 40       	sbci	r25, 0x00	; 0
    24c6:	e1 f7       	brne	.-8      	; 0x24c0 <ball_move_player1+0x1fe>
    24c8:	00 c0       	rjmp	.+0      	; 0x24ca <ball_move_player1+0x208>
    24ca:	00 00       	nop
						_delay_ms(1000);	
					player1_move();
    24cc:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <player1_move>
				
					ball_move_player2();
    24d0:	0e 94 3c 13 	call	0x2678	; 0x2678 <ball_move_player2>
						check_goal();
    24d4:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
				}
				
				if(ball_posit[0]>=3)
				{
					player2_movecc();
					while(ball_posit[0]>=1&&game_End2==0)
    24d8:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <ball_posit>
    24dc:	88 23       	and	r24, r24
    24de:	21 f0       	breq	.+8      	; 0x24e8 <ball_move_player1+0x226>
    24e0:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    24e4:	88 23       	and	r24, r24
    24e6:	89 f2       	breq	.-94     	; 0x248a <ball_move_player1+0x1c8>
			}	
			break;
			case 1:
			player2_movecc();
			check_goal();
			while(ball_posit[1]<=y2-1&&game_End2==0)
    24e8:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <ball_posit+0x1>
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <y2>
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	82 17       	cp	r24, r18
    24f8:	93 07       	cpc	r25, r19
    24fa:	0c f4       	brge	.+2      	; 0x24fe <ball_move_player1+0x23c>
    24fc:	ba c0       	rjmp	.+372    	; 0x2672 <ball_move_player1+0x3b0>
    24fe:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    2502:	88 23       	and	r24, r24
    2504:	09 f4       	brne	.+2      	; 0x2508 <ball_move_player1+0x246>
    2506:	84 cf       	rjmp	.-248    	; 0x2410 <ball_move_player1+0x14e>
    2508:	b4 c0       	rjmp	.+360    	; 0x2672 <ball_move_player1+0x3b0>
				}
			}
			
			break;
			case 2:
			player2_movecc();
    250a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
			check_goal();
    250e:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
			while(ball_posit[1]<=15&&game_End2==0)
    2512:	25 c0       	rjmp	.+74     	; 0x255e <ball_move_player1+0x29c>
			{
				player2_movecc();
    2514:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
				check_goal();
    2518:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
			CLCD_voidSendSpecialChar(erase,3,ball_posit[0],ball_posit[1]);
    251c:	cd eb       	ldi	r28, 0xBD	; 189
    251e:	d0 e0       	ldi	r29, 0x00	; 0
    2520:	29 81       	ldd	r18, Y+1	; 0x01
    2522:	48 81       	ld	r20, Y
    2524:	63 e0       	ldi	r22, 0x03	; 3
    2526:	88 e1       	ldi	r24, 0x18	; 24
    2528:	92 e0       	ldi	r25, 0x02	; 2
    252a:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
			ball_posit[1]=ball_posit[1]+1;
    252e:	29 81       	ldd	r18, Y+1	; 0x01
    2530:	2f 5f       	subi	r18, 0xFF	; 255
    2532:	29 83       	std	Y+1, r18	; 0x01
			CLCD_voidSendSpecialChar(Ball,4,ball_posit[0],ball_posit[1]);
    2534:	48 81       	ld	r20, Y
    2536:	64 e0       	ldi	r22, 0x04	; 4
    2538:	8f eb       	ldi	r24, 0xBF	; 191
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    2540:	2f e3       	ldi	r18, 0x3F	; 63
    2542:	8d e0       	ldi	r24, 0x0D	; 13
    2544:	93 e0       	ldi	r25, 0x03	; 3
    2546:	21 50       	subi	r18, 0x01	; 1
    2548:	80 40       	sbci	r24, 0x00	; 0
    254a:	90 40       	sbci	r25, 0x00	; 0
    254c:	e1 f7       	brne	.-8      	; 0x2546 <ball_move_player1+0x284>
    254e:	00 c0       	rjmp	.+0      	; 0x2550 <ball_move_player1+0x28e>
    2550:	00 00       	nop
			_delay_ms(1000);
			ball_move_player2();
    2552:	0e 94 3c 13 	call	0x2678	; 0x2678 <ball_move_player2>
			player1_move();
    2556:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <player1_move>
			 check_goal();
    255a:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
			
			break;
			case 2:
			player2_movecc();
			check_goal();
			while(ball_posit[1]<=15&&game_End2==0)
    255e:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <ball_posit+0x1>
    2562:	80 31       	cpi	r24, 0x10	; 16
    2564:	08 f0       	brcs	.+2      	; 0x2568 <ball_move_player1+0x2a6>
    2566:	85 c0       	rjmp	.+266    	; 0x2672 <ball_move_player1+0x3b0>
    2568:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    256c:	88 23       	and	r24, r24
    256e:	91 f2       	breq	.-92     	; 0x2514 <ball_move_player1+0x252>
    2570:	80 c0       	rjmp	.+256    	; 0x2672 <ball_move_player1+0x3b0>
			player1_move();
			 check_goal();
			}
			break;
			case 3:
			player2_movecc();
    2572:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
			while(ball_posit[1]!=y2-1&&game_End2==0)
    2576:	6e c0       	rjmp	.+220    	; 0x2654 <ball_move_player1+0x392>
			{
				player2_movecc();
    2578:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
				while(ball_posit[0]<=2&&ball_posit[1]!=y2-1)
    257c:	27 c0       	rjmp	.+78     	; 0x25cc <ball_move_player1+0x30a>
				{
					player2_movecc();
    257e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
					check_goal();
    2582:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
					CLCD_voidSendSpecialChar(erase,3,ball_posit[0],ball_posit[1]);
    2586:	cd eb       	ldi	r28, 0xBD	; 189
    2588:	d0 e0       	ldi	r29, 0x00	; 0
    258a:	29 81       	ldd	r18, Y+1	; 0x01
    258c:	48 81       	ld	r20, Y
    258e:	63 e0       	ldi	r22, 0x03	; 3
    2590:	88 e1       	ldi	r24, 0x18	; 24
    2592:	92 e0       	ldi	r25, 0x02	; 2
    2594:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
					ball_posit[1]=ball_posit[1]+1;
    2598:	29 81       	ldd	r18, Y+1	; 0x01
    259a:	2f 5f       	subi	r18, 0xFF	; 255
    259c:	29 83       	std	Y+1, r18	; 0x01
					ball_posit[0]=ball_posit[0]+1;
    259e:	48 81       	ld	r20, Y
    25a0:	4f 5f       	subi	r20, 0xFF	; 255
    25a2:	48 83       	st	Y, r20
					CLCD_voidSendSpecialChar(Ball,4,ball_posit[0],ball_posit[1]);
    25a4:	64 e0       	ldi	r22, 0x04	; 4
    25a6:	8f eb       	ldi	r24, 0xBF	; 191
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    25ae:	2f e3       	ldi	r18, 0x3F	; 63
    25b0:	8d e0       	ldi	r24, 0x0D	; 13
    25b2:	93 e0       	ldi	r25, 0x03	; 3
    25b4:	21 50       	subi	r18, 0x01	; 1
    25b6:	80 40       	sbci	r24, 0x00	; 0
    25b8:	90 40       	sbci	r25, 0x00	; 0
    25ba:	e1 f7       	brne	.-8      	; 0x25b4 <ball_move_player1+0x2f2>
    25bc:	00 c0       	rjmp	.+0      	; 0x25be <ball_move_player1+0x2fc>
    25be:	00 00       	nop
					_delay_ms(1000);
					player1_move();
    25c0:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <player1_move>
					ball_move_player2();
    25c4:	0e 94 3c 13 	call	0x2678	; 0x2678 <ball_move_player2>
					check_goal();
    25c8:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
			case 3:
			player2_movecc();
			while(ball_posit[1]!=y2-1&&game_End2==0)
			{
				player2_movecc();
				while(ball_posit[0]<=2&&ball_posit[1]!=y2-1)
    25cc:	40 91 bd 00 	lds	r20, 0x00BD	; 0x8000bd <ball_posit>
    25d0:	43 30       	cpi	r20, 0x03	; 3
    25d2:	50 f4       	brcc	.+20     	; 0x25e8 <ball_move_player1+0x326>
    25d4:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <ball_posit+0x1>
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <y2>
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	28 17       	cp	r18, r24
    25e4:	39 07       	cpc	r19, r25
    25e6:	59 f6       	brne	.-106    	; 0x257e <ball_move_player1+0x2bc>
					ball_move_player2();
					check_goal();
					
				}
				
				if(ball_posit[0]>=3)
    25e8:	43 30       	cpi	r20, 0x03	; 3
    25ea:	a0 f1       	brcs	.+104    	; 0x2654 <ball_move_player1+0x392>
				{
				player2_movecc();
    25ec:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
					while(ball_posit[0]>=1&&game_End2==0)
    25f0:	29 c0       	rjmp	.+82     	; 0x2644 <ball_move_player1+0x382>
					{
						player2_movecc();
    25f2:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
						check_goal();
    25f6:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
						CLCD_voidSendSpecialChar(erase,3,ball_posit[0],ball_posit[1]);
    25fa:	cd eb       	ldi	r28, 0xBD	; 189
    25fc:	d0 e0       	ldi	r29, 0x00	; 0
    25fe:	29 81       	ldd	r18, Y+1	; 0x01
    2600:	48 81       	ld	r20, Y
    2602:	63 e0       	ldi	r22, 0x03	; 3
    2604:	88 e1       	ldi	r24, 0x18	; 24
    2606:	92 e0       	ldi	r25, 0x02	; 2
    2608:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
						ball_posit[0]=ball_posit[0]-1;
    260c:	48 81       	ld	r20, Y
    260e:	41 50       	subi	r20, 0x01	; 1
    2610:	48 83       	st	Y, r20
						ball_posit[1]=ball_posit[1]+1;
    2612:	29 81       	ldd	r18, Y+1	; 0x01
    2614:	2f 5f       	subi	r18, 0xFF	; 255
    2616:	29 83       	std	Y+1, r18	; 0x01
						CLCD_voidSendSpecialChar(Ball,4,ball_posit[0],ball_posit[1]);
    2618:	64 e0       	ldi	r22, 0x04	; 4
    261a:	8f eb       	ldi	r24, 0xBF	; 191
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    2622:	2f e3       	ldi	r18, 0x3F	; 63
    2624:	8d e0       	ldi	r24, 0x0D	; 13
    2626:	93 e0       	ldi	r25, 0x03	; 3
    2628:	21 50       	subi	r18, 0x01	; 1
    262a:	80 40       	sbci	r24, 0x00	; 0
    262c:	90 40       	sbci	r25, 0x00	; 0
    262e:	e1 f7       	brne	.-8      	; 0x2628 <ball_move_player1+0x366>
    2630:	00 c0       	rjmp	.+0      	; 0x2632 <ball_move_player1+0x370>
    2632:	00 00       	nop
						_delay_ms(1000);
						player1_move();
    2634:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <player1_move>
						ball_move_player2();
    2638:	0e 94 3c 13 	call	0x2678	; 0x2678 <ball_move_player2>
						check_goal();
    263c:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
						player2_movecc();
    2640:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
				}
				
				if(ball_posit[0]>=3)
				{
				player2_movecc();
					while(ball_posit[0]>=1&&game_End2==0)
    2644:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <ball_posit>
    2648:	88 23       	and	r24, r24
    264a:	21 f0       	breq	.+8      	; 0x2654 <ball_move_player1+0x392>
    264c:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    2650:	88 23       	and	r24, r24
    2652:	79 f2       	breq	.-98     	; 0x25f2 <ball_move_player1+0x330>
			 check_goal();
			}
			break;
			case 3:
			player2_movecc();
			while(ball_posit[1]!=y2-1&&game_End2==0)
    2654:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <ball_posit+0x1>
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <y2>
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	28 17       	cp	r18, r24
    2664:	39 07       	cpc	r19, r25
    2666:	29 f0       	breq	.+10     	; 0x2672 <ball_move_player1+0x3b0>
    2668:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    266c:	88 23       	and	r24, r24
    266e:	09 f4       	brne	.+2      	; 0x2672 <ball_move_player1+0x3b0>
    2670:	83 cf       	rjmp	.-250    	; 0x2578 <ball_move_player1+0x2b6>
			break;
		
	}
   }
}
}
    2672:	df 91       	pop	r29
    2674:	cf 91       	pop	r28
    2676:	08 95       	ret

00002678 <ball_move_player2>:
void ball_move_player2()
{
    2678:	cf 93       	push	r28
    267a:	df 93       	push	r29
	if (game_End2==0)
    267c:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    2680:	81 11       	cpse	r24, r1
    2682:	c8 c1       	rjmp	.+912    	; 0x2a14 <ball_move_player2+0x39c>
	{
	
	check_goal();
    2684:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
	if(ball_posit[1]==y2-1&&ball_posit[0]==x2)
    2688:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <ball_posit+0x1>
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <y2>
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	28 17       	cp	r18, r24
    2698:	39 07       	cpc	r19, r25
    269a:	09 f0       	breq	.+2      	; 0x269e <ball_move_player2+0x26>
    269c:	bb c1       	rjmp	.+886    	; 0x2a14 <ball_move_player2+0x39c>
    269e:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <ball_posit>
    26a2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <x2>
    26a6:	98 13       	cpse	r25, r24
    26a8:	b5 c1       	rjmp	.+874    	; 0x2a14 <ball_move_player2+0x39c>
	{
		BUZZ1();
    26aa:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <BUZZ1>
		switch(x2)
    26ae:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <x2>
    26b2:	81 30       	cpi	r24, 0x01	; 1
    26b4:	09 f4       	brne	.+2      	; 0x26b8 <ball_move_player2+0x40>
    26b6:	89 c0       	rjmp	.+274    	; 0x27ca <ball_move_player2+0x152>
    26b8:	38 f0       	brcs	.+14     	; 0x26c8 <ball_move_player2+0x50>
    26ba:	82 30       	cpi	r24, 0x02	; 2
    26bc:	09 f4       	brne	.+2      	; 0x26c0 <ball_move_player2+0x48>
    26be:	b9 c0       	rjmp	.+370    	; 0x2832 <ball_move_player2+0x1ba>
    26c0:	83 30       	cpi	r24, 0x03	; 3
    26c2:	09 f4       	brne	.+2      	; 0x26c6 <ball_move_player2+0x4e>
    26c4:	32 c1       	rjmp	.+612    	; 0x292a <ball_move_player2+0x2b2>
    26c6:	a6 c1       	rjmp	.+844    	; 0x2a14 <ball_move_player2+0x39c>
		{
		case 0:
		player2_movecc();
    26c8:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
			while(ball_posit[1]!=y1+1&&game_End2==0)
    26cc:	6d c0       	rjmp	.+218    	; 0x27a8 <ball_move_player2+0x130>
			{
				while(ball_posit[0]<=2&&ball_posit[1]!=y1+1)
				{
				    player1_move();
    26ce:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <player1_move>
					check_goal();
    26d2:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
				CLCD_voidSendSpecialChar(erase,3,ball_posit[0],ball_posit[1]);
    26d6:	cd eb       	ldi	r28, 0xBD	; 189
    26d8:	d0 e0       	ldi	r29, 0x00	; 0
    26da:	29 81       	ldd	r18, Y+1	; 0x01
    26dc:	48 81       	ld	r20, Y
    26de:	63 e0       	ldi	r22, 0x03	; 3
    26e0:	88 e1       	ldi	r24, 0x18	; 24
    26e2:	92 e0       	ldi	r25, 0x02	; 2
    26e4:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
				ball_posit[1]=ball_posit[1]-1;
    26e8:	29 81       	ldd	r18, Y+1	; 0x01
    26ea:	21 50       	subi	r18, 0x01	; 1
    26ec:	29 83       	std	Y+1, r18	; 0x01
				ball_posit[0]=ball_posit[0]+1;
    26ee:	48 81       	ld	r20, Y
    26f0:	4f 5f       	subi	r20, 0xFF	; 255
    26f2:	48 83       	st	Y, r20
				CLCD_voidSendSpecialChar(Ball,4,ball_posit[0],ball_posit[1]);
    26f4:	64 e0       	ldi	r22, 0x04	; 4
    26f6:	8f eb       	ldi	r24, 0xBF	; 191
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    26fe:	2f e3       	ldi	r18, 0x3F	; 63
    2700:	8d e0       	ldi	r24, 0x0D	; 13
    2702:	93 e0       	ldi	r25, 0x03	; 3
    2704:	21 50       	subi	r18, 0x01	; 1
    2706:	80 40       	sbci	r24, 0x00	; 0
    2708:	90 40       	sbci	r25, 0x00	; 0
    270a:	e1 f7       	brne	.-8      	; 0x2704 <ball_move_player2+0x8c>
    270c:	00 c0       	rjmp	.+0      	; 0x270e <ball_move_player2+0x96>
    270e:	00 00       	nop
				_delay_ms(1000);
				 ball_move_player1();
    2710:	0e 94 61 11 	call	0x22c2	; 0x22c2 <ball_move_player1>
				 check_goal();
    2714:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
		{
		case 0:
		player2_movecc();
			while(ball_posit[1]!=y1+1&&game_End2==0)
			{
				while(ball_posit[0]<=2&&ball_posit[1]!=y1+1)
    2718:	40 91 bd 00 	lds	r20, 0x00BD	; 0x8000bd <ball_posit>
    271c:	43 30       	cpi	r20, 0x03	; 3
    271e:	50 f4       	brcc	.+20     	; 0x2734 <ball_move_player2+0xbc>
    2720:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <ball_posit+0x1>
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <y1>
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	01 96       	adiw	r24, 0x01	; 1
    272e:	28 17       	cp	r18, r24
    2730:	39 07       	cpc	r19, r25
    2732:	69 f6       	brne	.-102    	; 0x26ce <ball_move_player2+0x56>
				_delay_ms(1000);
				 ball_move_player1();
				 check_goal();
			     }
				
			if(ball_posit[0]>=3&&ball_posit[1]<=y2-1)
    2734:	43 30       	cpi	r20, 0x03	; 3
    2736:	c0 f1       	brcs	.+112    	; 0x27a8 <ball_move_player2+0x130>
    2738:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <ball_posit+0x1>
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <y2>
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	82 17       	cp	r24, r18
    2748:	93 07       	cpc	r25, r19
    274a:	34 f5       	brge	.+76     	; 0x2798 <ball_move_player2+0x120>
    274c:	2d c0       	rjmp	.+90     	; 0x27a8 <ball_move_player2+0x130>
			{
				while(ball_posit[0]>=1&&game_End2==0)
				{
						player1_move();
    274e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <player1_move>
						check_goal();
    2752:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
					CLCD_voidSendSpecialChar(erase,3,ball_posit[0],ball_posit[1]);
    2756:	cd eb       	ldi	r28, 0xBD	; 189
    2758:	d0 e0       	ldi	r29, 0x00	; 0
    275a:	29 81       	ldd	r18, Y+1	; 0x01
    275c:	48 81       	ld	r20, Y
    275e:	63 e0       	ldi	r22, 0x03	; 3
    2760:	88 e1       	ldi	r24, 0x18	; 24
    2762:	92 e0       	ldi	r25, 0x02	; 2
    2764:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
					ball_posit[0]=ball_posit[0]-1;
    2768:	48 81       	ld	r20, Y
    276a:	41 50       	subi	r20, 0x01	; 1
    276c:	48 83       	st	Y, r20
					ball_posit[1]=ball_posit[1]-1;
    276e:	29 81       	ldd	r18, Y+1	; 0x01
    2770:	21 50       	subi	r18, 0x01	; 1
    2772:	29 83       	std	Y+1, r18	; 0x01
					CLCD_voidSendSpecialChar(Ball,4,ball_posit[0],ball_posit[1]);
    2774:	64 e0       	ldi	r22, 0x04	; 4
    2776:	8f eb       	ldi	r24, 0xBF	; 191
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    277e:	2f e3       	ldi	r18, 0x3F	; 63
    2780:	8d e0       	ldi	r24, 0x0D	; 13
    2782:	93 e0       	ldi	r25, 0x03	; 3
    2784:	21 50       	subi	r18, 0x01	; 1
    2786:	80 40       	sbci	r24, 0x00	; 0
    2788:	90 40       	sbci	r25, 0x00	; 0
    278a:	e1 f7       	brne	.-8      	; 0x2784 <ball_move_player2+0x10c>
    278c:	00 c0       	rjmp	.+0      	; 0x278e <ball_move_player2+0x116>
    278e:	00 00       	nop
					_delay_ms(1000);
					ball_move_player1();
    2790:	0e 94 61 11 	call	0x22c2	; 0x22c2 <ball_move_player1>
					check_goal();
    2794:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
				 check_goal();
			     }
				
			if(ball_posit[0]>=3&&ball_posit[1]<=y2-1)
			{
				while(ball_posit[0]>=1&&game_End2==0)
    2798:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <ball_posit>
    279c:	88 23       	and	r24, r24
    279e:	21 f0       	breq	.+8      	; 0x27a8 <ball_move_player2+0x130>
    27a0:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    27a4:	88 23       	and	r24, r24
    27a6:	99 f2       	breq	.-90     	; 0x274e <ball_move_player2+0xd6>
		BUZZ1();
		switch(x2)
		{
		case 0:
		player2_movecc();
			while(ball_posit[1]!=y1+1&&game_End2==0)
    27a8:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <ball_posit+0x1>
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <y1>
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	01 96       	adiw	r24, 0x01	; 1
    27b6:	28 17       	cp	r18, r24
    27b8:	39 07       	cpc	r19, r25
    27ba:	09 f4       	brne	.+2      	; 0x27be <ball_move_player2+0x146>
    27bc:	2b c1       	rjmp	.+598    	; 0x2a14 <ball_move_player2+0x39c>
    27be:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    27c2:	88 23       	and	r24, r24
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <ball_move_player2+0x150>
    27c6:	a8 cf       	rjmp	.-176    	; 0x2718 <ball_move_player2+0xa0>
    27c8:	25 c1       	rjmp	.+586    	; 0x2a14 <ball_move_player2+0x39c>
			}
		}
		
		break;
		case 1:
		player1_move();
    27ca:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <player1_move>
		while(ball_posit[1]>=1&&game_End2==0)
    27ce:	27 c0       	rjmp	.+78     	; 0x281e <ball_move_player2+0x1a6>
		{
			player1_move();
    27d0:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <player1_move>
			check_goal();
    27d4:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
			CLCD_voidSendSpecialChar(erase,3,ball_posit[0],ball_posit[1]);
    27d8:	cd eb       	ldi	r28, 0xBD	; 189
    27da:	d0 e0       	ldi	r29, 0x00	; 0
    27dc:	29 81       	ldd	r18, Y+1	; 0x01
    27de:	48 81       	ld	r20, Y
    27e0:	63 e0       	ldi	r22, 0x03	; 3
    27e2:	88 e1       	ldi	r24, 0x18	; 24
    27e4:	92 e0       	ldi	r25, 0x02	; 2
    27e6:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
			ball_posit[1]=ball_posit[1]-1;
    27ea:	29 81       	ldd	r18, Y+1	; 0x01
    27ec:	21 50       	subi	r18, 0x01	; 1
    27ee:	29 83       	std	Y+1, r18	; 0x01
			CLCD_voidSendSpecialChar(Ball,4,ball_posit[0],ball_posit[1]);
    27f0:	48 81       	ld	r20, Y
    27f2:	64 e0       	ldi	r22, 0x04	; 4
    27f4:	8f eb       	ldi	r24, 0xBF	; 191
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
			 player1_move();
    27fc:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <player1_move>
    2800:	2f e3       	ldi	r18, 0x3F	; 63
    2802:	8d e0       	ldi	r24, 0x0D	; 13
    2804:	93 e0       	ldi	r25, 0x03	; 3
    2806:	21 50       	subi	r18, 0x01	; 1
    2808:	80 40       	sbci	r24, 0x00	; 0
    280a:	90 40       	sbci	r25, 0x00	; 0
    280c:	e1 f7       	brne	.-8      	; 0x2806 <ball_move_player2+0x18e>
    280e:	00 c0       	rjmp	.+0      	; 0x2810 <ball_move_player2+0x198>
    2810:	00 00       	nop
			_delay_ms(1000);
			ball_move_player1();
    2812:	0e 94 61 11 	call	0x22c2	; 0x22c2 <ball_move_player1>
			check_goal();
    2816:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
			player1_move();
    281a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <player1_move>
		}
		
		break;
		case 1:
		player1_move();
		while(ball_posit[1]>=1&&game_End2==0)
    281e:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <ball_posit+0x1>
    2822:	88 23       	and	r24, r24
    2824:	09 f4       	brne	.+2      	; 0x2828 <ball_move_player2+0x1b0>
    2826:	f6 c0       	rjmp	.+492    	; 0x2a14 <ball_move_player2+0x39c>
    2828:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    282c:	88 23       	and	r24, r24
    282e:	81 f2       	breq	.-96     	; 0x27d0 <ball_move_player2+0x158>
    2830:	f1 c0       	rjmp	.+482    	; 0x2a14 <ball_move_player2+0x39c>
			player1_move();
		}
		
		break;
		case 2:
		player2_movecc();
    2832:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
		while(ball_posit[1]!=y1+1&&game_End2==0)
    2836:	68 c0       	rjmp	.+208    	; 0x2908 <ball_move_player2+0x290>
		{
			player1_move();
    2838:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <player1_move>
			check_goal();
    283c:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
			while(ball_posit[0]<=2&&ball_posit[1]!=y1+1)
    2840:	23 c0       	rjmp	.+70     	; 0x2888 <ball_move_player2+0x210>
			{
				player2_movecc();
    2842:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
			CLCD_voidSendSpecialChar(erase,3,ball_posit[0],ball_posit[1]);
    2846:	cd eb       	ldi	r28, 0xBD	; 189
    2848:	d0 e0       	ldi	r29, 0x00	; 0
    284a:	29 81       	ldd	r18, Y+1	; 0x01
    284c:	48 81       	ld	r20, Y
    284e:	63 e0       	ldi	r22, 0x03	; 3
    2850:	88 e1       	ldi	r24, 0x18	; 24
    2852:	92 e0       	ldi	r25, 0x02	; 2
    2854:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
			ball_posit[1]=ball_posit[1]-1;
    2858:	29 81       	ldd	r18, Y+1	; 0x01
    285a:	21 50       	subi	r18, 0x01	; 1
    285c:	29 83       	std	Y+1, r18	; 0x01
			ball_posit[0]=ball_posit[0]+1;
    285e:	48 81       	ld	r20, Y
    2860:	4f 5f       	subi	r20, 0xFF	; 255
    2862:	48 83       	st	Y, r20
			CLCD_voidSendSpecialChar(Ball,4,ball_posit[0],ball_posit[1]);
    2864:	64 e0       	ldi	r22, 0x04	; 4
    2866:	8f eb       	ldi	r24, 0xBF	; 191
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    286e:	2f e3       	ldi	r18, 0x3F	; 63
    2870:	8d e0       	ldi	r24, 0x0D	; 13
    2872:	93 e0       	ldi	r25, 0x03	; 3
    2874:	21 50       	subi	r18, 0x01	; 1
    2876:	80 40       	sbci	r24, 0x00	; 0
    2878:	90 40       	sbci	r25, 0x00	; 0
    287a:	e1 f7       	brne	.-8      	; 0x2874 <ball_move_player2+0x1fc>
    287c:	00 c0       	rjmp	.+0      	; 0x287e <ball_move_player2+0x206>
    287e:	00 00       	nop
			_delay_ms(1000);
			
			ball_move_player1();
    2880:	0e 94 61 11 	call	0x22c2	; 0x22c2 <ball_move_player1>
			check_goal();
    2884:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
		player2_movecc();
		while(ball_posit[1]!=y1+1&&game_End2==0)
		{
			player1_move();
			check_goal();
			while(ball_posit[0]<=2&&ball_posit[1]!=y1+1)
    2888:	40 91 bd 00 	lds	r20, 0x00BD	; 0x8000bd <ball_posit>
    288c:	43 30       	cpi	r20, 0x03	; 3
    288e:	50 f4       	brcc	.+20     	; 0x28a4 <ball_move_player2+0x22c>
    2890:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <ball_posit+0x1>
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <y1>
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	01 96       	adiw	r24, 0x01	; 1
    289e:	28 17       	cp	r18, r24
    28a0:	39 07       	cpc	r19, r25
    28a2:	79 f6       	brne	.-98     	; 0x2842 <ball_move_player2+0x1ca>
			ball_move_player1();
			check_goal();
			
		    }
			
		if(ball_posit[0]>=3)
    28a4:	43 30       	cpi	r20, 0x03	; 3
    28a6:	80 f1       	brcs	.+96     	; 0x2908 <ball_move_player2+0x290>
		{
			player2_movecc();
    28a8:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
				while(ball_posit[0]>=1&&game_End2==0)
    28ac:	25 c0       	rjmp	.+74     	; 0x28f8 <ball_move_player2+0x280>
			{
				player1_move();
    28ae:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <player1_move>
				check_goal();
    28b2:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
				CLCD_voidSendSpecialChar(erase,3,ball_posit[0],ball_posit[1]);
    28b6:	cd eb       	ldi	r28, 0xBD	; 189
    28b8:	d0 e0       	ldi	r29, 0x00	; 0
    28ba:	29 81       	ldd	r18, Y+1	; 0x01
    28bc:	48 81       	ld	r20, Y
    28be:	63 e0       	ldi	r22, 0x03	; 3
    28c0:	88 e1       	ldi	r24, 0x18	; 24
    28c2:	92 e0       	ldi	r25, 0x02	; 2
    28c4:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
				ball_posit[0]=ball_posit[0]-1;
    28c8:	48 81       	ld	r20, Y
    28ca:	41 50       	subi	r20, 0x01	; 1
    28cc:	48 83       	st	Y, r20
				ball_posit[1]=ball_posit[1]-1;
    28ce:	29 81       	ldd	r18, Y+1	; 0x01
    28d0:	21 50       	subi	r18, 0x01	; 1
    28d2:	29 83       	std	Y+1, r18	; 0x01
				CLCD_voidSendSpecialChar(Ball,4,ball_posit[0],ball_posit[1]);
    28d4:	64 e0       	ldi	r22, 0x04	; 4
    28d6:	8f eb       	ldi	r24, 0xBF	; 191
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    28de:	2f e3       	ldi	r18, 0x3F	; 63
    28e0:	8d e0       	ldi	r24, 0x0D	; 13
    28e2:	93 e0       	ldi	r25, 0x03	; 3
    28e4:	21 50       	subi	r18, 0x01	; 1
    28e6:	80 40       	sbci	r24, 0x00	; 0
    28e8:	90 40       	sbci	r25, 0x00	; 0
    28ea:	e1 f7       	brne	.-8      	; 0x28e4 <ball_move_player2+0x26c>
    28ec:	00 c0       	rjmp	.+0      	; 0x28ee <ball_move_player2+0x276>
    28ee:	00 00       	nop
				_delay_ms(1000);
				ball_move_player1();
    28f0:	0e 94 61 11 	call	0x22c2	; 0x22c2 <ball_move_player1>
				check_goal();
    28f4:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
		    }
			
		if(ball_posit[0]>=3)
		{
			player2_movecc();
				while(ball_posit[0]>=1&&game_End2==0)
    28f8:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <ball_posit>
    28fc:	88 23       	and	r24, r24
    28fe:	21 f0       	breq	.+8      	; 0x2908 <ball_move_player2+0x290>
    2900:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    2904:	88 23       	and	r24, r24
    2906:	99 f2       	breq	.-90     	; 0x28ae <ball_move_player2+0x236>
		}
		
		break;
		case 2:
		player2_movecc();
		while(ball_posit[1]!=y1+1&&game_End2==0)
    2908:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <ball_posit+0x1>
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <y1>
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	01 96       	adiw	r24, 0x01	; 1
    2916:	28 17       	cp	r18, r24
    2918:	39 07       	cpc	r19, r25
    291a:	09 f4       	brne	.+2      	; 0x291e <ball_move_player2+0x2a6>
    291c:	7b c0       	rjmp	.+246    	; 0x2a14 <ball_move_player2+0x39c>
    291e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    2922:	88 23       	and	r24, r24
    2924:	09 f4       	brne	.+2      	; 0x2928 <ball_move_player2+0x2b0>
    2926:	88 cf       	rjmp	.-240    	; 0x2838 <ball_move_player2+0x1c0>
    2928:	75 c0       	rjmp	.+234    	; 0x2a14 <ball_move_player2+0x39c>
		}
	}
	
		break;
		case 3:
		player2_movecc();
    292a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
		check_goal();
    292e:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
		while(ball_posit[1]!=y1+1&&game_End2==0)
    2932:	61 c0       	rjmp	.+194    	; 0x29f6 <ball_move_player2+0x37e>
		{
			while(ball_posit[0]<=3&&ball_posit[1]!=y1+1)
			{
				player1_move();
    2934:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <player1_move>
				check_goal();
    2938:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
				CLCD_voidSendSpecialChar(erase,3,ball_posit[0],ball_posit[1]);
    293c:	cd eb       	ldi	r28, 0xBD	; 189
    293e:	d0 e0       	ldi	r29, 0x00	; 0
    2940:	29 81       	ldd	r18, Y+1	; 0x01
    2942:	48 81       	ld	r20, Y
    2944:	63 e0       	ldi	r22, 0x03	; 3
    2946:	88 e1       	ldi	r24, 0x18	; 24
    2948:	92 e0       	ldi	r25, 0x02	; 2
    294a:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
				ball_posit[1]=ball_posit[1]-1;
    294e:	29 81       	ldd	r18, Y+1	; 0x01
    2950:	21 50       	subi	r18, 0x01	; 1
    2952:	29 83       	std	Y+1, r18	; 0x01
				ball_posit[0]=ball_posit[0]-1;
    2954:	48 81       	ld	r20, Y
    2956:	41 50       	subi	r20, 0x01	; 1
    2958:	48 83       	st	Y, r20
				CLCD_voidSendSpecialChar(Ball,4,ball_posit[0],ball_posit[1]);
    295a:	64 e0       	ldi	r22, 0x04	; 4
    295c:	8f eb       	ldi	r24, 0xBF	; 191
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    2964:	2f e3       	ldi	r18, 0x3F	; 63
    2966:	8d e0       	ldi	r24, 0x0D	; 13
    2968:	93 e0       	ldi	r25, 0x03	; 3
    296a:	21 50       	subi	r18, 0x01	; 1
    296c:	80 40       	sbci	r24, 0x00	; 0
    296e:	90 40       	sbci	r25, 0x00	; 0
    2970:	e1 f7       	brne	.-8      	; 0x296a <ball_move_player2+0x2f2>
    2972:	00 c0       	rjmp	.+0      	; 0x2974 <ball_move_player2+0x2fc>
    2974:	00 00       	nop
				_delay_ms(1000);
				ball_move_player1();
    2976:	0e 94 61 11 	call	0x22c2	; 0x22c2 <ball_move_player1>
				check_goal();
    297a:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
		case 3:
		player2_movecc();
		check_goal();
		while(ball_posit[1]!=y1+1&&game_End2==0)
		{
			while(ball_posit[0]<=3&&ball_posit[1]!=y1+1)
    297e:	40 91 bd 00 	lds	r20, 0x00BD	; 0x8000bd <ball_posit>
    2982:	44 30       	cpi	r20, 0x04	; 4
    2984:	50 f4       	brcc	.+20     	; 0x299a <ball_move_player2+0x322>
    2986:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <ball_posit+0x1>
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <y1>
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	01 96       	adiw	r24, 0x01	; 1
    2994:	28 17       	cp	r18, r24
    2996:	39 07       	cpc	r19, r25
    2998:	69 f6       	brne	.-102    	; 0x2934 <ball_move_player2+0x2bc>
				ball_move_player1();
				check_goal();
				
			}
			
			if(ball_posit[0]>=0&&ball_posit[0]<=2)
    299a:	43 30       	cpi	r20, 0x03	; 3
    299c:	60 f5       	brcc	.+88     	; 0x29f6 <ball_move_player2+0x37e>
			{
				player2_movecc();
    299e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <player2_movecc>
				while(ball_posit[0]>=0&&game_End2==0)
    29a2:	25 c0       	rjmp	.+74     	; 0x29ee <ball_move_player2+0x376>
				{
					player1_move();
    29a4:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <player1_move>
					check_goal();
    29a8:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
					CLCD_voidSendSpecialChar(erase,3,ball_posit[0],ball_posit[1]);
    29ac:	cd eb       	ldi	r28, 0xBD	; 189
    29ae:	d0 e0       	ldi	r29, 0x00	; 0
    29b0:	29 81       	ldd	r18, Y+1	; 0x01
    29b2:	48 81       	ld	r20, Y
    29b4:	63 e0       	ldi	r22, 0x03	; 3
    29b6:	88 e1       	ldi	r24, 0x18	; 24
    29b8:	92 e0       	ldi	r25, 0x02	; 2
    29ba:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
					ball_posit[0]=ball_posit[0]+1;
    29be:	48 81       	ld	r20, Y
    29c0:	4f 5f       	subi	r20, 0xFF	; 255
    29c2:	48 83       	st	Y, r20
					ball_posit[1]=ball_posit[1]-1;
    29c4:	29 81       	ldd	r18, Y+1	; 0x01
    29c6:	21 50       	subi	r18, 0x01	; 1
    29c8:	29 83       	std	Y+1, r18	; 0x01
					CLCD_voidSendSpecialChar(Ball,4,ball_posit[0],ball_posit[1]);
    29ca:	64 e0       	ldi	r22, 0x04	; 4
    29cc:	8f eb       	ldi	r24, 0xBF	; 191
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    29d4:	2f e3       	ldi	r18, 0x3F	; 63
    29d6:	8d e0       	ldi	r24, 0x0D	; 13
    29d8:	93 e0       	ldi	r25, 0x03	; 3
    29da:	21 50       	subi	r18, 0x01	; 1
    29dc:	80 40       	sbci	r24, 0x00	; 0
    29de:	90 40       	sbci	r25, 0x00	; 0
    29e0:	e1 f7       	brne	.-8      	; 0x29da <ball_move_player2+0x362>
    29e2:	00 c0       	rjmp	.+0      	; 0x29e4 <ball_move_player2+0x36c>
    29e4:	00 00       	nop
					_delay_ms(1000);
					ball_move_player1();
    29e6:	0e 94 61 11 	call	0x22c2	; 0x22c2 <ball_move_player1>
					check_goal();
    29ea:	0e 94 6f 10 	call	0x20de	; 0x20de <check_goal>
			}
			
			if(ball_posit[0]>=0&&ball_posit[0]<=2)
			{
				player2_movecc();
				while(ball_posit[0]>=0&&game_End2==0)
    29ee:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    29f2:	88 23       	and	r24, r24
    29f4:	b9 f2       	breq	.-82     	; 0x29a4 <ball_move_player2+0x32c>
	
		break;
		case 3:
		player2_movecc();
		check_goal();
		while(ball_posit[1]!=y1+1&&game_End2==0)
    29f6:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <ball_posit+0x1>
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <y1>
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	01 96       	adiw	r24, 0x01	; 1
    2a04:	28 17       	cp	r18, r24
    2a06:	39 07       	cpc	r19, r25
    2a08:	29 f0       	breq	.+10     	; 0x2a14 <ball_move_player2+0x39c>
    2a0a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <game_End2>
    2a0e:	88 23       	and	r24, r24
    2a10:	09 f4       	brne	.+2      	; 0x2a14 <ball_move_player2+0x39c>
    2a12:	b5 cf       	rjmp	.-150    	; 0x297e <ball_move_player2+0x306>
		
		break;	
       }
	}
}
}
    2a14:	df 91       	pop	r29
    2a16:	cf 91       	pop	r28
    2a18:	08 95       	ret

00002a1a <SevenSegments_Init>:
#include "DIO_INTERFACE.h"
#include "STD_TYPES.h"
#include <util/delay.h>
void SevenSegments_Init()
{
	DIO_u8SetPortDir(SS_PORT,0x7f);
    2a1a:	6f e7       	ldi	r22, 0x7F	; 127
    2a1c:	83 e0       	ldi	r24, 0x03	; 3
    2a1e:	0e 94 2f 0c 	call	0x185e	; 0x185e <DIO_u8SetPortDir>
	DIO_u8SetPortValue(SS_PORT,0x7f);
    2a22:	6f e7       	ldi	r22, 0x7F	; 127
    2a24:	83 e0       	ldi	r24, 0x03	; 3
    2a26:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_u8SetPortValue>
    2a2a:	08 95       	ret

00002a2c <SevenSegments_Enable>:
	
}

void SevenSegments_Enable(u8 num)
{
	switch(num)
    2a2c:	81 30       	cpi	r24, 0x01	; 1
    2a2e:	19 f0       	breq	.+6      	; 0x2a36 <SevenSegments_Enable+0xa>
    2a30:	82 30       	cpi	r24, 0x02	; 2
    2a32:	39 f0       	breq	.+14     	; 0x2a42 <SevenSegments_Enable+0x16>
    2a34:	08 95       	ret
	{
		case 1:DIO_u8SetPinValue(SS_PORT,E1,DIO_HIGH);break;
    2a36:	41 e0       	ldi	r20, 0x01	; 1
    2a38:	64 e0       	ldi	r22, 0x04	; 4
    2a3a:	83 e0       	ldi	r24, 0x03	; 3
    2a3c:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_u8SetPinValue>
    2a40:	08 95       	ret
		case 2:DIO_u8SetPinValue(SS_PORT,E2,DIO_HIGH);break;
    2a42:	41 e0       	ldi	r20, 0x01	; 1
    2a44:	65 e0       	ldi	r22, 0x05	; 5
    2a46:	83 e0       	ldi	r24, 0x03	; 3
    2a48:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_u8SetPinValue>
    2a4c:	08 95       	ret

00002a4e <SevenSegments_Disable>:
	}
}

void SevenSegments_Disable(u8 num)
{
	switch(num)
    2a4e:	81 30       	cpi	r24, 0x01	; 1
    2a50:	19 f0       	breq	.+6      	; 0x2a58 <SevenSegments_Disable+0xa>
    2a52:	82 30       	cpi	r24, 0x02	; 2
    2a54:	39 f0       	breq	.+14     	; 0x2a64 <SevenSegments_Disable+0x16>
    2a56:	08 95       	ret
	{
		case 1:DIO_u8SetPinValue(SS_PORT,E1,DIO_LOW);break;
    2a58:	40 e0       	ldi	r20, 0x00	; 0
    2a5a:	64 e0       	ldi	r22, 0x04	; 4
    2a5c:	83 e0       	ldi	r24, 0x03	; 3
    2a5e:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_u8SetPinValue>
    2a62:	08 95       	ret
		case 2:DIO_u8SetPinValue(SS_PORT,E2,DIO_LOW);break;
    2a64:	40 e0       	ldi	r20, 0x00	; 0
    2a66:	65 e0       	ldi	r22, 0x05	; 5
    2a68:	83 e0       	ldi	r24, 0x03	; 3
    2a6a:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_u8SetPinValue>
    2a6e:	08 95       	ret

00002a70 <SevenSegments_PowerON>:
	}
}

void SevenSegments_PowerON()
{
	SevenSegments_Init();
    2a70:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <SevenSegments_Init>
	SevenSegments_Disable(1);
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <SevenSegments_Disable>
	SevenSegments_Disable(2);
    2a7a:	82 e0       	ldi	r24, 0x02	; 2
    2a7c:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <SevenSegments_Disable>
    2a80:	08 95       	ret

00002a82 <SevenSegments_DisplayDigit>:
}

void SevenSegments_DisplayDigit(u8 Digit)
{
	DIO_u8SetPortValue(SS_PORT,Digit);
    2a82:	68 2f       	mov	r22, r24
    2a84:	83 e0       	ldi	r24, 0x03	; 3
    2a86:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_u8SetPortValue>
    2a8a:	08 95       	ret

00002a8c <SvenSegments_SendNumber>:
}

void SvenSegments_SendNumber(u8 num )
{	
    2a8c:	1f 93       	push	r17
    2a8e:	cf 93       	push	r28
    2a90:	df 93       	push	r29
	if (num>=0&&num<100)
    2a92:	84 36       	cpi	r24, 0x64	; 100
    2a94:	a8 f5       	brcc	.+106    	; 0x2b00 <SvenSegments_SendNumber+0x74>
	{
		u8 temp=num%10;
    2a96:	dd ec       	ldi	r29, 0xCD	; 205
    2a98:	8d 9f       	mul	r24, r29
    2a9a:	d1 2d       	mov	r29, r1
    2a9c:	11 24       	eor	r1, r1
    2a9e:	1d 2f       	mov	r17, r29
    2aa0:	16 95       	lsr	r17
    2aa2:	16 95       	lsr	r17
    2aa4:	16 95       	lsr	r17
    2aa6:	11 0f       	add	r17, r17
    2aa8:	91 2f       	mov	r25, r17
    2aaa:	99 0f       	add	r25, r25
    2aac:	99 0f       	add	r25, r25
    2aae:	19 0f       	add	r17, r25
    2ab0:	81 1b       	sub	r24, r17
    2ab2:	18 2f       	mov	r17, r24
		num/=10;
    2ab4:	d6 95       	lsr	r29
    2ab6:	d6 95       	lsr	r29
    2ab8:	d6 95       	lsr	r29
		for(u8 i=0;i<50;i++)
    2aba:	c0 e0       	ldi	r28, 0x00	; 0
    2abc:	1f c0       	rjmp	.+62     	; 0x2afc <SvenSegments_SendNumber+0x70>
		{
		  SevenSegments_Enable(1);
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <SevenSegments_Enable>
		  SevenSegments_DisplayDigit(temp);
    2ac4:	81 2f       	mov	r24, r17
    2ac6:	0e 94 41 15 	call	0x2a82	; 0x2a82 <SevenSegments_DisplayDigit>
    2aca:	8f e1       	ldi	r24, 0x1F	; 31
    2acc:	9e e4       	ldi	r25, 0x4E	; 78
    2ace:	01 97       	sbiw	r24, 0x01	; 1
    2ad0:	f1 f7       	brne	.-4      	; 0x2ace <SvenSegments_SendNumber+0x42>
    2ad2:	00 c0       	rjmp	.+0      	; 0x2ad4 <SvenSegments_SendNumber+0x48>
    2ad4:	00 00       	nop
		  _delay_ms(10);
		  SevenSegments_Disable(1);
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <SevenSegments_Disable>
		  
		SevenSegments_Enable(2);
    2adc:	82 e0       	ldi	r24, 0x02	; 2
    2ade:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <SevenSegments_Enable>
		SevenSegments_DisplayDigit(num);
    2ae2:	8d 2f       	mov	r24, r29
    2ae4:	0e 94 41 15 	call	0x2a82	; 0x2a82 <SevenSegments_DisplayDigit>
    2ae8:	8f e1       	ldi	r24, 0x1F	; 31
    2aea:	9e e4       	ldi	r25, 0x4E	; 78
    2aec:	01 97       	sbiw	r24, 0x01	; 1
    2aee:	f1 f7       	brne	.-4      	; 0x2aec <SvenSegments_SendNumber+0x60>
    2af0:	00 c0       	rjmp	.+0      	; 0x2af2 <SvenSegments_SendNumber+0x66>
    2af2:	00 00       	nop
		_delay_ms(10);
		SevenSegments_Disable(2);
    2af4:	82 e0       	ldi	r24, 0x02	; 2
    2af6:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <SevenSegments_Disable>
{	
	if (num>=0&&num<100)
	{
		u8 temp=num%10;
		num/=10;
		for(u8 i=0;i<50;i++)
    2afa:	cf 5f       	subi	r28, 0xFF	; 255
    2afc:	c2 33       	cpi	r28, 0x32	; 50
    2afe:	f8 f2       	brcs	.-66     	; 0x2abe <SvenSegments_SendNumber+0x32>
		SevenSegments_DisplayDigit(num);
		_delay_ms(10);
		SevenSegments_Disable(2);
		}
	}
}
    2b00:	df 91       	pop	r29
    2b02:	cf 91       	pop	r28
    2b04:	1f 91       	pop	r17
    2b06:	08 95       	ret

00002b08 <Level_Init>:
	Flashing_Led(YELLOW_LED);
	Flashing_Led(GREEN_LED);
	Flashing_Led(YELLOW_LED);
	Flashing_Led(BLUE_LED);
		Tick=30;
		Simon_Timer();	
    2b08:	cf 93       	push	r28
    2b0a:	df 93       	push	r29
    2b0c:	eb 01       	movw	r28, r22
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	fc 01       	movw	r30, r24
    2b12:	31 97       	sbiw	r30, 0x01	; 1
    2b14:	ea 30       	cpi	r30, 0x0A	; 10
    2b16:	f1 05       	cpc	r31, r1
    2b18:	08 f0       	brcs	.+2      	; 0x2b1c <Level_Init+0x14>
    2b1a:	7e c0       	rjmp	.+252    	; 0x2c18 <Level_Init+0x110>
    2b1c:	e6 5d       	subi	r30, 0xD6	; 214
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	0c 94 06 1c 	jmp	0x380c	; 0x380c <__tablejump2__>
    2b24:	84 e0       	ldi	r24, 0x04	; 4
    2b26:	88 83       	st	Y, r24
    2b28:	89 83       	std	Y+1, r24	; 0x01
    2b2a:	85 e0       	ldi	r24, 0x05	; 5
    2b2c:	8a 83       	std	Y+2, r24	; 0x02
    2b2e:	87 e0       	ldi	r24, 0x07	; 7
    2b30:	8b 83       	std	Y+3, r24	; 0x03
    2b32:	8c 83       	std	Y+4, r24	; 0x04
    2b34:	8d 83       	std	Y+5, r24	; 0x05
    2b36:	86 e0       	ldi	r24, 0x06	; 6
    2b38:	fa 01       	movw	r30, r20
    2b3a:	80 83       	st	Z, r24
    2b3c:	6d c0       	rjmp	.+218    	; 0x2c18 <Level_Init+0x110>
    2b3e:	84 e0       	ldi	r24, 0x04	; 4
    2b40:	88 83       	st	Y, r24
    2b42:	85 e0       	ldi	r24, 0x05	; 5
    2b44:	89 83       	std	Y+1, r24	; 0x01
    2b46:	8a 83       	std	Y+2, r24	; 0x02
    2b48:	8b 83       	std	Y+3, r24	; 0x03
    2b4a:	86 e0       	ldi	r24, 0x06	; 6
    2b4c:	8c 83       	std	Y+4, r24	; 0x04
    2b4e:	8d 83       	std	Y+5, r24	; 0x05
    2b50:	fa 01       	movw	r30, r20
    2b52:	80 83       	st	Z, r24
    2b54:	61 c0       	rjmp	.+194    	; 0x2c18 <Level_Init+0x110>
    2b56:	84 e0       	ldi	r24, 0x04	; 4
    2b58:	88 83       	st	Y, r24
    2b5a:	89 83       	std	Y+1, r24	; 0x01
    2b5c:	8a 83       	std	Y+2, r24	; 0x02
    2b5e:	86 e0       	ldi	r24, 0x06	; 6
    2b60:	8b 83       	std	Y+3, r24	; 0x03
    2b62:	8c 83       	std	Y+4, r24	; 0x04
    2b64:	8d 83       	std	Y+5, r24	; 0x05
    2b66:	8e 83       	std	Y+6, r24	; 0x06
    2b68:	8f 83       	std	Y+7, r24	; 0x07
    2b6a:	88 e0       	ldi	r24, 0x08	; 8
    2b6c:	fa 01       	movw	r30, r20
    2b6e:	80 83       	st	Z, r24
    2b70:	53 c0       	rjmp	.+166    	; 0x2c18 <Level_Init+0x110>
    2b72:	85 e0       	ldi	r24, 0x05	; 5
    2b74:	88 83       	st	Y, r24
    2b76:	94 e0       	ldi	r25, 0x04	; 4
    2b78:	99 83       	std	Y+1, r25	; 0x01
    2b7a:	96 e0       	ldi	r25, 0x06	; 6
    2b7c:	9a 83       	std	Y+2, r25	; 0x02
    2b7e:	9b 83       	std	Y+3, r25	; 0x03
    2b80:	97 e0       	ldi	r25, 0x07	; 7
    2b82:	9c 83       	std	Y+4, r25	; 0x04
    2b84:	fa 01       	movw	r30, r20
    2b86:	80 83       	st	Z, r24
    2b88:	47 c0       	rjmp	.+142    	; 0x2c18 <Level_Init+0x110>
    2b8a:	96 e0       	ldi	r25, 0x06	; 6
    2b8c:	98 83       	st	Y, r25
    2b8e:	85 e0       	ldi	r24, 0x05	; 5
    2b90:	89 83       	std	Y+1, r24	; 0x01
    2b92:	9a 83       	std	Y+2, r25	; 0x02
    2b94:	8b 83       	std	Y+3, r24	; 0x03
    2b96:	97 e0       	ldi	r25, 0x07	; 7
    2b98:	9c 83       	std	Y+4, r25	; 0x04
    2b9a:	fa 01       	movw	r30, r20
    2b9c:	80 83       	st	Z, r24
    2b9e:	3c c0       	rjmp	.+120    	; 0x2c18 <Level_Init+0x110>
    2ba0:	84 e0       	ldi	r24, 0x04	; 4
    2ba2:	88 83       	st	Y, r24
    2ba4:	89 83       	std	Y+1, r24	; 0x01
    2ba6:	8a 83       	std	Y+2, r24	; 0x02
    2ba8:	87 e0       	ldi	r24, 0x07	; 7
    2baa:	8b 83       	std	Y+3, r24	; 0x03
    2bac:	86 e0       	ldi	r24, 0x06	; 6
    2bae:	8c 83       	std	Y+4, r24	; 0x04
    2bb0:	95 e0       	ldi	r25, 0x05	; 5
    2bb2:	9d 83       	std	Y+5, r25	; 0x05
    2bb4:	fa 01       	movw	r30, r20
    2bb6:	80 83       	st	Z, r24
    2bb8:	2f c0       	rjmp	.+94     	; 0x2c18 <Level_Init+0x110>
    2bba:	85 e0       	ldi	r24, 0x05	; 5
    2bbc:	88 83       	st	Y, r24
    2bbe:	89 83       	std	Y+1, r24	; 0x01
    2bc0:	96 e0       	ldi	r25, 0x06	; 6
    2bc2:	9a 83       	std	Y+2, r25	; 0x02
    2bc4:	97 e0       	ldi	r25, 0x07	; 7
    2bc6:	9b 83       	std	Y+3, r25	; 0x03
    2bc8:	94 e0       	ldi	r25, 0x04	; 4
    2bca:	9c 83       	std	Y+4, r25	; 0x04
    2bcc:	fa 01       	movw	r30, r20
    2bce:	80 83       	st	Z, r24
    2bd0:	23 c0       	rjmp	.+70     	; 0x2c18 <Level_Init+0x110>
    2bd2:	24 e0       	ldi	r18, 0x04	; 4
    2bd4:	28 83       	st	Y, r18
    2bd6:	86 e0       	ldi	r24, 0x06	; 6
    2bd8:	89 83       	std	Y+1, r24	; 0x01
    2bda:	97 e0       	ldi	r25, 0x07	; 7
    2bdc:	9a 83       	std	Y+2, r25	; 0x02
    2bde:	2b 83       	std	Y+3, r18	; 0x03
    2be0:	9c 83       	std	Y+4, r25	; 0x04
    2be2:	8d 83       	std	Y+5, r24	; 0x05
    2be4:	fa 01       	movw	r30, r20
    2be6:	80 83       	st	Z, r24
    2be8:	17 c0       	rjmp	.+46     	; 0x2c18 <Level_Init+0x110>
    2bea:	86 e0       	ldi	r24, 0x06	; 6
    2bec:	88 83       	st	Y, r24
    2bee:	87 e0       	ldi	r24, 0x07	; 7
    2bf0:	89 83       	std	Y+1, r24	; 0x01
    2bf2:	85 e0       	ldi	r24, 0x05	; 5
    2bf4:	8a 83       	std	Y+2, r24	; 0x02
    2bf6:	8b 83       	std	Y+3, r24	; 0x03
    2bf8:	8c 83       	std	Y+4, r24	; 0x04
    2bfa:	fa 01       	movw	r30, r20
    2bfc:	80 83       	st	Z, r24
    2bfe:	0c c0       	rjmp	.+24     	; 0x2c18 <Level_Init+0x110>
    2c00:	27 e0       	ldi	r18, 0x07	; 7
    2c02:	28 83       	st	Y, r18
    2c04:	95 e0       	ldi	r25, 0x05	; 5
    2c06:	99 83       	std	Y+1, r25	; 0x01
    2c08:	86 e0       	ldi	r24, 0x06	; 6
    2c0a:	8a 83       	std	Y+2, r24	; 0x02
    2c0c:	2b 83       	std	Y+3, r18	; 0x03
    2c0e:	24 e0       	ldi	r18, 0x04	; 4
    2c10:	2c 83       	std	Y+4, r18	; 0x04
    2c12:	9d 83       	std	Y+5, r25	; 0x05
    2c14:	fa 01       	movw	r30, r20
    2c16:	80 83       	st	Z, r24
    2c18:	df 91       	pop	r29
    2c1a:	cf 91       	pop	r28
    2c1c:	08 95       	ret

00002c1e <Time_Out>:
    2c1e:	0e 94 09 05 	call	0xa12	; 0xa12 <CLCD_ClearDisplay>
    2c22:	63 e0       	ldi	r22, 0x03	; 3
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
    2c2a:	88 eb       	ldi	r24, 0xB8	; 184
    2c2c:	91 e0       	ldi	r25, 0x01	; 1
    2c2e:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
    2c32:	2f ef       	ldi	r18, 0xFF	; 255
    2c34:	89 e6       	ldi	r24, 0x69	; 105
    2c36:	98 e1       	ldi	r25, 0x18	; 24
    2c38:	21 50       	subi	r18, 0x01	; 1
    2c3a:	80 40       	sbci	r24, 0x00	; 0
    2c3c:	90 40       	sbci	r25, 0x00	; 0
    2c3e:	e1 f7       	brne	.-8      	; 0x2c38 <Time_Out+0x1a>
    2c40:	00 c0       	rjmp	.+0      	; 0x2c42 <Time_Out+0x24>
    2c42:	00 00       	nop
    2c44:	08 95       	ret

00002c46 <Simon_Timer>:
    2c46:	0e 94 b5 1b 	call	0x376a	; 0x376a <Timer2_CTCMode_Init>
    2c4a:	6a ef       	ldi	r22, 0xFA	; 250
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	0e 94 94 1b 	call	0x3728	; 0x3728 <SET_ValueForTimer>
    2c54:	78 94       	sei
    2c56:	08 95       	ret

00002c58 <Level_2>:
    2c58:	cf 93       	push	r28
    2c5a:	c0 e0       	ldi	r28, 0x00	; 0
    2c5c:	04 c0       	rjmp	.+8      	; 0x2c66 <Level_2+0xe>
    2c5e:	84 e0       	ldi	r24, 0x04	; 4
    2c60:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
    2c64:	cf 5f       	subi	r28, 0xFF	; 255
    2c66:	cc 23       	and	r28, r28
    2c68:	d1 f3       	breq	.-12     	; 0x2c5e <Level_2+0x6>
    2c6a:	c0 e0       	ldi	r28, 0x00	; 0
    2c6c:	04 c0       	rjmp	.+8      	; 0x2c76 <Level_2+0x1e>
    2c6e:	85 e0       	ldi	r24, 0x05	; 5
    2c70:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
    2c74:	cf 5f       	subi	r28, 0xFF	; 255
    2c76:	c3 30       	cpi	r28, 0x03	; 3
    2c78:	d0 f3       	brcs	.-12     	; 0x2c6e <Level_2+0x16>
    2c7a:	c0 e0       	ldi	r28, 0x00	; 0
    2c7c:	04 c0       	rjmp	.+8      	; 0x2c86 <Level_2+0x2e>
    2c7e:	86 e0       	ldi	r24, 0x06	; 6
    2c80:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
    2c84:	cf 5f       	subi	r28, 0xFF	; 255
    2c86:	c2 30       	cpi	r28, 0x02	; 2
    2c88:	d0 f3       	brcs	.-12     	; 0x2c7e <Level_2+0x26>
    2c8a:	8e e1       	ldi	r24, 0x1E	; 30
    2c8c:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <Tick>
    2c90:	0e 94 23 16 	call	0x2c46	; 0x2c46 <Simon_Timer>
    2c94:	cf 91       	pop	r28
    2c96:	08 95       	ret

00002c98 <Level_3>:
    2c98:	cf 93       	push	r28
    2c9a:	c0 e0       	ldi	r28, 0x00	; 0
    2c9c:	04 c0       	rjmp	.+8      	; 0x2ca6 <Level_3+0xe>
    2c9e:	84 e0       	ldi	r24, 0x04	; 4
    2ca0:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
    2ca4:	cf 5f       	subi	r28, 0xFF	; 255
    2ca6:	c3 30       	cpi	r28, 0x03	; 3
    2ca8:	d0 f3       	brcs	.-12     	; 0x2c9e <Level_3+0x6>
    2caa:	c0 e0       	ldi	r28, 0x00	; 0
    2cac:	04 c0       	rjmp	.+8      	; 0x2cb6 <Level_3+0x1e>
    2cae:	86 e0       	ldi	r24, 0x06	; 6
    2cb0:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
    2cb4:	cf 5f       	subi	r28, 0xFF	; 255
    2cb6:	c5 30       	cpi	r28, 0x05	; 5
    2cb8:	d0 f3       	brcs	.-12     	; 0x2cae <Level_3+0x16>
    2cba:	8e e1       	ldi	r24, 0x1E	; 30
    2cbc:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <Tick>
    2cc0:	0e 94 23 16 	call	0x2c46	; 0x2c46 <Simon_Timer>
    2cc4:	cf 91       	pop	r28
    2cc6:	08 95       	ret

00002cc8 <Level_4>:
    2cc8:	cf 93       	push	r28
    2cca:	c0 e0       	ldi	r28, 0x00	; 0
    2ccc:	04 c0       	rjmp	.+8      	; 0x2cd6 <Level_4+0xe>
    2cce:	85 e0       	ldi	r24, 0x05	; 5
    2cd0:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
    2cd4:	cf 5f       	subi	r28, 0xFF	; 255
    2cd6:	cc 23       	and	r28, r28
    2cd8:	d1 f3       	breq	.-12     	; 0x2cce <Level_4+0x6>
    2cda:	c0 e0       	ldi	r28, 0x00	; 0
    2cdc:	04 c0       	rjmp	.+8      	; 0x2ce6 <Level_4+0x1e>
    2cde:	84 e0       	ldi	r24, 0x04	; 4
    2ce0:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
    2ce4:	cf 5f       	subi	r28, 0xFF	; 255
    2ce6:	cc 23       	and	r28, r28
    2ce8:	d1 f3       	breq	.-12     	; 0x2cde <Level_4+0x16>
    2cea:	c0 e0       	ldi	r28, 0x00	; 0
    2cec:	04 c0       	rjmp	.+8      	; 0x2cf6 <Level_4+0x2e>
    2cee:	86 e0       	ldi	r24, 0x06	; 6
    2cf0:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
    2cf4:	cf 5f       	subi	r28, 0xFF	; 255
    2cf6:	c2 30       	cpi	r28, 0x02	; 2
    2cf8:	d0 f3       	brcs	.-12     	; 0x2cee <Level_4+0x26>
    2cfa:	c0 e0       	ldi	r28, 0x00	; 0
    2cfc:	04 c0       	rjmp	.+8      	; 0x2d06 <Level_4+0x3e>
    2cfe:	87 e0       	ldi	r24, 0x07	; 7
    2d00:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
    2d04:	cf 5f       	subi	r28, 0xFF	; 255
    2d06:	cc 23       	and	r28, r28
    2d08:	d1 f3       	breq	.-12     	; 0x2cfe <Level_4+0x36>
    2d0a:	8e e1       	ldi	r24, 0x1E	; 30
    2d0c:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <Tick>
    2d10:	0e 94 23 16 	call	0x2c46	; 0x2c46 <Simon_Timer>
    2d14:	cf 91       	pop	r28
    2d16:	08 95       	ret

00002d18 <Level_6>:

}

void Level_6()
{
    2d18:	cf 93       	push	r28
	for (u8 i=0;i<3;i++)
    2d1a:	c0 e0       	ldi	r28, 0x00	; 0
    2d1c:	04 c0       	rjmp	.+8      	; 0x2d26 <Level_6+0xe>
	{
      Flashing_Led(RED_LED);
    2d1e:	84 e0       	ldi	r24, 0x04	; 4
    2d20:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>

}

void Level_6()
{
	for (u8 i=0;i<3;i++)
    2d24:	cf 5f       	subi	r28, 0xFF	; 255
    2d26:	c3 30       	cpi	r28, 0x03	; 3
    2d28:	d0 f3       	brcs	.-12     	; 0x2d1e <Level_6+0x6>
	{
      Flashing_Led(RED_LED);
	}
	
    Flashing_Led(BLUE_LED);
    2d2a:	87 e0       	ldi	r24, 0x07	; 7
    2d2c:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
	
    Flashing_Led(GREEN_LED);
    2d30:	86 e0       	ldi	r24, 0x06	; 6
    2d32:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
	
    Flashing_Led(YELLOW_LED);
    2d36:	85 e0       	ldi	r24, 0x05	; 5
    2d38:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
		Tick=30;
    2d3c:	8e e1       	ldi	r24, 0x1E	; 30
    2d3e:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <Tick>
		Simon_Timer();	
    2d42:	0e 94 23 16 	call	0x2c46	; 0x2c46 <Simon_Timer>

}
    2d46:	cf 91       	pop	r28
    2d48:	08 95       	ret

00002d4a <Level_7>:

void Level_7()
{	
    2d4a:	cf 93       	push	r28
	
	for (u8 i=0;i<2;i++)
    2d4c:	c0 e0       	ldi	r28, 0x00	; 0
    2d4e:	04 c0       	rjmp	.+8      	; 0x2d58 <Level_7+0xe>
	{
      Flashing_Led(YELLOW_LED);
    2d50:	85 e0       	ldi	r24, 0x05	; 5
    2d52:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
}

void Level_7()
{	
	
	for (u8 i=0;i<2;i++)
    2d56:	cf 5f       	subi	r28, 0xFF	; 255
    2d58:	c2 30       	cpi	r28, 0x02	; 2
    2d5a:	d0 f3       	brcs	.-12     	; 0x2d50 <Level_7+0x6>
	{
      Flashing_Led(YELLOW_LED);
	}
	
    Flashing_Led(GREEN_LED);
    2d5c:	86 e0       	ldi	r24, 0x06	; 6
    2d5e:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
	
    Flashing_Led(BLUE_LED);
    2d62:	87 e0       	ldi	r24, 0x07	; 7
    2d64:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
	
    Flashing_Led(RED_LED);
    2d68:	84 e0       	ldi	r24, 0x04	; 4
    2d6a:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
		Tick=30;
    2d6e:	8e e1       	ldi	r24, 0x1E	; 30
    2d70:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <Tick>
		Simon_Timer();	
    2d74:	0e 94 23 16 	call	0x2c46	; 0x2c46 <Simon_Timer>

}
    2d78:	cf 91       	pop	r28
    2d7a:	08 95       	ret

00002d7c <Level_8>:

void Level_8()
{
    Flashing_Led(RED_LED);
    2d7c:	84 e0       	ldi	r24, 0x04	; 4
    2d7e:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
	
    Flashing_Led(GREEN_LED);
    2d82:	86 e0       	ldi	r24, 0x06	; 6
    2d84:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
      
    Flashing_Led(BLUE_LED);
    2d88:	87 e0       	ldi	r24, 0x07	; 7
    2d8a:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
	  
    Flashing_Led(RED_LED);
    2d8e:	84 e0       	ldi	r24, 0x04	; 4
    2d90:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
	
    Flashing_Led(BLUE_LED);
    2d94:	87 e0       	ldi	r24, 0x07	; 7
    2d96:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
	
    Flashing_Led(GREEN_LED);
    2d9a:	86 e0       	ldi	r24, 0x06	; 6
    2d9c:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
		Tick=30;
    2da0:	8e e1       	ldi	r24, 0x1E	; 30
    2da2:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <Tick>
		Simon_Timer();	
    2da6:	0e 94 23 16 	call	0x2c46	; 0x2c46 <Simon_Timer>
    2daa:	08 95       	ret

00002dac <Level_9>:

}

void Level_9()
{
    2dac:	cf 93       	push	r28
	
	Flashing_Led(GREEN_LED);
    2dae:	86 e0       	ldi	r24, 0x06	; 6
    2db0:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
	
	for (u8 i=0;i<1;i++)
    2db4:	c0 e0       	ldi	r28, 0x00	; 0
    2db6:	04 c0       	rjmp	.+8      	; 0x2dc0 <Level_9+0x14>
	{
      Flashing_Led(BLUE_LED);
    2db8:	87 e0       	ldi	r24, 0x07	; 7
    2dba:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
void Level_9()
{
	
	Flashing_Led(GREEN_LED);
	
	for (u8 i=0;i<1;i++)
    2dbe:	cf 5f       	subi	r28, 0xFF	; 255
    2dc0:	cc 23       	and	r28, r28
    2dc2:	d1 f3       	breq	.-12     	; 0x2db8 <Level_9+0xc>
    2dc4:	c0 e0       	ldi	r28, 0x00	; 0
    2dc6:	04 c0       	rjmp	.+8      	; 0x2dd0 <Level_9+0x24>
      Flashing_Led(BLUE_LED);
	}
	
	for (u8 i=0;i<3;i++)
	{
		Flashing_Led(YELLOW_LED);
    2dc8:	85 e0       	ldi	r24, 0x05	; 5
    2dca:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
	for (u8 i=0;i<1;i++)
	{
      Flashing_Led(BLUE_LED);
	}
	
	for (u8 i=0;i<3;i++)
    2dce:	cf 5f       	subi	r28, 0xFF	; 255
    2dd0:	c3 30       	cpi	r28, 0x03	; 3
    2dd2:	d0 f3       	brcs	.-12     	; 0x2dc8 <Level_9+0x1c>
	{
		Flashing_Led(YELLOW_LED);
	}
		Tick=30;
    2dd4:	8e e1       	ldi	r24, 0x1E	; 30
    2dd6:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <Tick>
		Simon_Timer();	
    2dda:	0e 94 23 16 	call	0x2c46	; 0x2c46 <Simon_Timer>


}
    2dde:	cf 91       	pop	r28
    2de0:	08 95       	ret

00002de2 <Level_10>:

void Level_10()
{
    Flashing_Led(BLUE_LED);
    2de2:	87 e0       	ldi	r24, 0x07	; 7
    2de4:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>

    Flashing_Led(YELLOW_LED);
    2de8:	85 e0       	ldi	r24, 0x05	; 5
    2dea:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
		
    Flashing_Led(GREEN_LED);
    2dee:	86 e0       	ldi	r24, 0x06	; 6
    2df0:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>

    Flashing_Led(BLUE_LED);
    2df4:	87 e0       	ldi	r24, 0x07	; 7
    2df6:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
	
    Flashing_Led(RED_LED);
    2dfa:	84 e0       	ldi	r24, 0x04	; 4
    2dfc:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
	
    Flashing_Led(YELLOW_LED);
    2e00:	85 e0       	ldi	r24, 0x05	; 5
    2e02:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
	Tick=30;
    2e06:	8e e1       	ldi	r24, 0x1E	; 30
    2e08:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <Tick>
	Simon_Timer();	
    2e0c:	0e 94 23 16 	call	0x2c46	; 0x2c46 <Simon_Timer>
    2e10:	08 95       	ret

00002e12 <Get_UserResponse>:
		break;
	}
}

void Get_UserResponse(u8 *User_Ticks,u8 length)
{
    2e12:	0f 93       	push	r16
    2e14:	1f 93       	push	r17
    2e16:	cf 93       	push	r28
    2e18:	df 93       	push	r29
    2e1a:	8c 01       	movw	r16, r24
    2e1c:	d6 2f       	mov	r29, r22
	u8 counter=0;
	Simon_Timer();
    2e1e:	0e 94 23 16 	call	0x2c46	; 0x2c46 <Simon_Timer>
	}
}

void Get_UserResponse(u8 *User_Ticks,u8 length)
{
	u8 counter=0;
    2e22:	c0 e0       	ldi	r28, 0x00	; 0
	Simon_Timer();
	while(counter<length&&Tick!=-1)
    2e24:	31 c0       	rjmp	.+98     	; 0x2e88 <Get_UserResponse+0x76>
	{
		u8 x=key()+4;
    2e26:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <key>
    2e2a:	8c 5f       	subi	r24, 0xFC	; 252
		switch (x) {
    2e2c:	85 30       	cpi	r24, 0x05	; 5
    2e2e:	91 f0       	breq	.+36     	; 0x2e54 <Get_UserResponse+0x42>
    2e30:	18 f4       	brcc	.+6      	; 0x2e38 <Get_UserResponse+0x26>
    2e32:	84 30       	cpi	r24, 0x04	; 4
    2e34:	31 f0       	breq	.+12     	; 0x2e42 <Get_UserResponse+0x30>
    2e36:	28 c0       	rjmp	.+80     	; 0x2e88 <Get_UserResponse+0x76>
    2e38:	86 30       	cpi	r24, 0x06	; 6
    2e3a:	a9 f0       	breq	.+42     	; 0x2e66 <Get_UserResponse+0x54>
    2e3c:	87 30       	cpi	r24, 0x07	; 7
    2e3e:	e1 f0       	breq	.+56     	; 0x2e78 <Get_UserResponse+0x66>
    2e40:	23 c0       	rjmp	.+70     	; 0x2e88 <Get_UserResponse+0x76>
			case RED_LED:
			User_Ticks[counter] = RED_LED;
    2e42:	f8 01       	movw	r30, r16
    2e44:	ec 0f       	add	r30, r28
    2e46:	f1 1d       	adc	r31, r1
    2e48:	84 e0       	ldi	r24, 0x04	; 4
    2e4a:	80 83       	st	Z, r24
			Flashing_Led(RED_LED);
    2e4c:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
			counter++;
    2e50:	cf 5f       	subi	r28, 0xFF	; 255
			break;
    2e52:	1a c0       	rjmp	.+52     	; 0x2e88 <Get_UserResponse+0x76>
			case YELLOW_LED:
			User_Ticks[counter] = YELLOW_LED;
    2e54:	f8 01       	movw	r30, r16
    2e56:	ec 0f       	add	r30, r28
    2e58:	f1 1d       	adc	r31, r1
    2e5a:	85 e0       	ldi	r24, 0x05	; 5
    2e5c:	80 83       	st	Z, r24
			Flashing_Led(YELLOW_LED);
    2e5e:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
			counter++;
    2e62:	cf 5f       	subi	r28, 0xFF	; 255
			break;
    2e64:	11 c0       	rjmp	.+34     	; 0x2e88 <Get_UserResponse+0x76>
			case GREEN_LED:
			User_Ticks[counter] = GREEN_LED;
    2e66:	f8 01       	movw	r30, r16
    2e68:	ec 0f       	add	r30, r28
    2e6a:	f1 1d       	adc	r31, r1
    2e6c:	86 e0       	ldi	r24, 0x06	; 6
    2e6e:	80 83       	st	Z, r24
			Flashing_Led(GREEN_LED);
    2e70:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
			counter++;
    2e74:	cf 5f       	subi	r28, 0xFF	; 255
			break;
    2e76:	08 c0       	rjmp	.+16     	; 0x2e88 <Get_UserResponse+0x76>
			case BLUE_LED:
			User_Ticks[counter] = BLUE_LED;
    2e78:	f8 01       	movw	r30, r16
    2e7a:	ec 0f       	add	r30, r28
    2e7c:	f1 1d       	adc	r31, r1
    2e7e:	87 e0       	ldi	r24, 0x07	; 7
    2e80:	80 83       	st	Z, r24
			Flashing_Led(BLUE_LED);
    2e82:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
			counter++;
    2e86:	cf 5f       	subi	r28, 0xFF	; 255

void Get_UserResponse(u8 *User_Ticks,u8 length)
{
	u8 counter=0;
	Simon_Timer();
	while(counter<length&&Tick!=-1)
    2e88:	cd 17       	cp	r28, r29
    2e8a:	20 f4       	brcc	.+8      	; 0x2e94 <Get_UserResponse+0x82>
    2e8c:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <Tick>
    2e90:	8f 3f       	cpi	r24, 0xFF	; 255
    2e92:	49 f6       	brne	.-110    	; 0x2e26 <Get_UserResponse+0x14>
			default:
			// Handle the case where x is not one of the expected values.
			break;
		}
	}
}
    2e94:	df 91       	pop	r29
    2e96:	cf 91       	pop	r28
    2e98:	1f 91       	pop	r17
    2e9a:	0f 91       	pop	r16
    2e9c:	08 95       	ret

00002e9e <Stop_SimonTimer>:
	sei();
}

void Stop_SimonTimer()
{
	TCCR0 = 0; 
    2e9e:	13 be       	out	0x33, r1	; 51
	TIMSK &= ~(1 << OCIE0);
    2ea0:	89 b7       	in	r24, 0x39	; 57
    2ea2:	8d 7f       	andi	r24, 0xFD	; 253
    2ea4:	89 bf       	out	0x39, r24	; 57
    2ea6:	08 95       	ret

00002ea8 <Level_1>:
int num=0;

u8 right=0,left=0;
s8 Tick=0;
void Level_1()
{
    2ea8:	cf 93       	push	r28
	for (u8 i=0;i<2;i++)//0
    2eaa:	c0 e0       	ldi	r28, 0x00	; 0
    2eac:	04 c0       	rjmp	.+8      	; 0x2eb6 <Level_1+0xe>
	{
       Flashing_Led(RED_LED);
    2eae:	84 e0       	ldi	r24, 0x04	; 4
    2eb0:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>

u8 right=0,left=0;
s8 Tick=0;
void Level_1()
{
	for (u8 i=0;i<2;i++)//0
    2eb4:	cf 5f       	subi	r28, 0xFF	; 255
    2eb6:	c2 30       	cpi	r28, 0x02	; 2
    2eb8:	d0 f3       	brcs	.-12     	; 0x2eae <Level_1+0x6>
	{
       Flashing_Led(RED_LED);
	}
	
     Flashing_Led(YELLOW_LED);
    2eba:	85 e0       	ldi	r24, 0x05	; 5
    2ebc:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
	   
	
	for (u8 i=0;i<3;i++)//3
    2ec0:	c0 e0       	ldi	r28, 0x00	; 0
    2ec2:	04 c0       	rjmp	.+8      	; 0x2ecc <Level_1+0x24>
	{
      Flashing_Led(BLUE_LED);
    2ec4:	87 e0       	ldi	r24, 0x07	; 7
    2ec6:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Flashing_Led>
	}
	
     Flashing_Led(YELLOW_LED);
	   
	
	for (u8 i=0;i<3;i++)//3
    2eca:	cf 5f       	subi	r28, 0xFF	; 255
    2ecc:	c3 30       	cpi	r28, 0x03	; 3
    2ece:	d0 f3       	brcs	.-12     	; 0x2ec4 <Level_1+0x1c>
	{
      Flashing_Led(BLUE_LED);
	   
	}
	Tick=30;
    2ed0:	8e e1       	ldi	r24, 0x1E	; 30
    2ed2:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <Tick>
	Stop_SimonTimer();
    2ed6:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <Stop_SimonTimer>
	Simon_Timer();
    2eda:	0e 94 23 16 	call	0x2c46	; 0x2c46 <Simon_Timer>
} 
    2ede:	cf 91       	pop	r28
    2ee0:	08 95       	ret

00002ee2 <Simon_Say>:

}

void Simon_Say(u8 level_num)
{
	switch(level_num)
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	31 97       	sbiw	r30, 0x01	; 1
    2ee8:	ea 30       	cpi	r30, 0x0A	; 10
    2eea:	f1 05       	cpc	r31, r1
    2eec:	f0 f4       	brcc	.+60     	; 0x2f2a <Simon_Say+0x48>
    2eee:	ec 5c       	subi	r30, 0xCC	; 204
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	0c 94 06 1c 	jmp	0x380c	; 0x380c <__tablejump2__>
	{
		case 1:Level_1();break;
    2ef6:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <Level_1>
    2efa:	08 95       	ret
		case 2:Level_2();break;
    2efc:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <Level_2>
    2f00:	08 95       	ret
		case 3:Level_3();break;
    2f02:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <Level_3>
    2f06:	08 95       	ret
		case 4:Level_4();break;
    2f08:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <Level_4>
    2f0c:	08 95       	ret
		case 5:Level_6();break;
    2f0e:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <Level_6>
    2f12:	08 95       	ret
		case 7:Level_7();break;
    2f14:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <Level_7>
    2f18:	08 95       	ret
		case 8:Level_8();break;
    2f1a:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <Level_8>
    2f1e:	08 95       	ret
		case 9:Level_9();break;
    2f20:	0e 94 d6 16 	call	0x2dac	; 0x2dac <Level_9>
    2f24:	08 95       	ret
		case 10:Level_10();break;
    2f26:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <Level_10>
    2f2a:	08 95       	ret

00002f2c <Level_Validity>:
	CLCD_voidGoTOxy(1,3);
	CLCD_voidPrintString("Time Out!!");
	_delay_ms(1000);
}
u8 Level_Validity(u8 LED_List[],u8 User_Ticks[],u8 lenght)
{
    2f2c:	ff 92       	push	r15
    2f2e:	0f 93       	push	r16
    2f30:	1f 93       	push	r17
    2f32:	cf 93       	push	r28
    2f34:	df 93       	push	r29
    2f36:	ec 01       	movw	r28, r24
    2f38:	8b 01       	movw	r16, r22
    2f3a:	f4 2e       	mov	r15, r20
	u8 state=1;
	
	if (Tick<=0)
    2f3c:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <Tick>
    2f40:	18 16       	cp	r1, r24
    2f42:	34 f0       	brlt	.+12     	; 0x2f50 <Level_Validity+0x24>
	{
		state=0;
		Stop_SimonTimer();
    2f44:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <Stop_SimonTimer>
		Time_Out();
    2f48:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <Time_Out>
		return state;
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	16 c0       	rjmp	.+44     	; 0x2f7c <Level_Validity+0x50>
	}
	else
	{
		Stop_SimonTimer();
    2f50:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <Stop_SimonTimer>
	}
	
	for (u8 i=0;i<lenght;i++)
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	0d c0       	rjmp	.+26     	; 0x2f72 <Level_Validity+0x46>
	{
		if (LED_List[i]!=User_Ticks[i])
    2f58:	82 2f       	mov	r24, r18
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	e8 0f       	add	r30, r24
    2f60:	f9 1f       	adc	r31, r25
    2f62:	30 81       	ld	r19, Z
    2f64:	f8 01       	movw	r30, r16
    2f66:	e8 0f       	add	r30, r24
    2f68:	f9 1f       	adc	r31, r25
    2f6a:	80 81       	ld	r24, Z
    2f6c:	38 13       	cpse	r19, r24
    2f6e:	05 c0       	rjmp	.+10     	; 0x2f7a <Level_Validity+0x4e>
	else
	{
		Stop_SimonTimer();
	}
	
	for (u8 i=0;i<lenght;i++)
    2f70:	2f 5f       	subi	r18, 0xFF	; 255
    2f72:	2f 15       	cp	r18, r15
    2f74:	88 f3       	brcs	.-30     	; 0x2f58 <Level_Validity+0x2c>
		{
			state=0;
			return state;
		}
	}
	return state;
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	01 c0       	rjmp	.+2      	; 0x2f7c <Level_Validity+0x50>
	for (u8 i=0;i<lenght;i++)
	{
		if (LED_List[i]!=User_Ticks[i])
		{
			state=0;
			return state;
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return state;
}
    2f7c:	df 91       	pop	r29
    2f7e:	cf 91       	pop	r28
    2f80:	1f 91       	pop	r17
    2f82:	0f 91       	pop	r16
    2f84:	ff 90       	pop	r15
    2f86:	08 95       	ret

00002f88 <Simon_win>:
	TCCR0 = 0; 
	TIMSK &= ~(1 << OCIE0);
}

void Simon_win()
{
    2f88:	cf 93       	push	r28
    2f8a:	df 93       	push	r29
	u8 f=1;
	for (u8 i=0;i<5;i++)
    2f8c:	c0 e0       	ldi	r28, 0x00	; 0
	TIMSK &= ~(1 << OCIE0);
}

void Simon_win()
{
	u8 f=1;
    2f8e:	d1 e0       	ldi	r29, 0x01	; 1
	for (u8 i=0;i<5;i++)
    2f90:	10 c0       	rjmp	.+32     	; 0x2fb2 <Simon_win+0x2a>
	{
		if (f)
    2f92:	dd 23       	and	r29, r29
    2f94:	59 f0       	breq	.+22     	; 0x2fac <Simon_win+0x24>
		{
			CLCD_ClearDisplay();
    2f96:	0e 94 09 05 	call	0xa12	; 0xa12 <CLCD_ClearDisplay>
			CLCD_voidGoTOxy(0,4);
    2f9a:	64 e0       	ldi	r22, 0x04	; 4
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			CLCD_voidPrintString("You Win");
    2fa2:	83 ec       	ldi	r24, 0xC3	; 195
    2fa4:	91 e0       	ldi	r25, 0x01	; 1
    2fa6:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
			f=0;
    2faa:	d0 e0       	ldi	r29, 0x00	; 0
		}
		Flashing_LedGroup();
    2fac:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <Flashing_LedGroup>
}

void Simon_win()
{
	u8 f=1;
	for (u8 i=0;i<5;i++)
    2fb0:	cf 5f       	subi	r28, 0xFF	; 255
    2fb2:	c5 30       	cpi	r28, 0x05	; 5
    2fb4:	70 f3       	brcs	.-36     	; 0x2f92 <Simon_win+0xa>
			CLCD_voidPrintString("You Win");
			f=0;
		}
		Flashing_LedGroup();
	}
}
    2fb6:	df 91       	pop	r29
    2fb8:	cf 91       	pop	r28
    2fba:	08 95       	ret

00002fbc <Simon_Loss>:

void Simon_Loss()
{
	CLCD_ClearDisplay();
    2fbc:	0e 94 09 05 	call	0xa12	; 0xa12 <CLCD_ClearDisplay>
	CLCD_voidGoTOxy(0,4);
    2fc0:	64 e0       	ldi	r22, 0x04	; 4
    2fc2:	80 e0       	ldi	r24, 0x00	; 0
    2fc4:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidPrintString("Game Over");
    2fc8:	8b ec       	ldi	r24, 0xCB	; 203
    2fca:	91 e0       	ldi	r25, 0x01	; 1
    2fcc:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
	Buzzer_Enable(Loser);
    2fd0:	85 e0       	ldi	r24, 0x05	; 5
    2fd2:	0e 94 27 03 	call	0x64e	; 0x64e <Buzzer_Enable>
    2fd6:	08 95       	ret

00002fd8 <Restart_OR_Exit>:
}

u8 Restart_OR_Exit()
{
    2fd8:	cf 93       	push	r28
    2fda:	df 93       	push	r29
	u8 g=0,z=0;
	CLCD_ClearDisplay();
    2fdc:	0e 94 09 05 	call	0xa12	; 0xa12 <CLCD_ClearDisplay>
	Buzzer_Enable(Loser);
}

u8 Restart_OR_Exit()
{
	u8 g=0,z=0;
    2fe0:	d0 e0       	ldi	r29, 0x00	; 0
    2fe2:	c0 e0       	ldi	r28, 0x00	; 0
	CLCD_ClearDisplay();
	while(!g)
    2fe4:	16 c0       	rjmp	.+44     	; 0x3012 <Restart_OR_Exit+0x3a>
	{
		CLCD_voidGoTOxy(1,0);
    2fe6:	60 e0       	ldi	r22, 0x00	; 0
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
		CLCD_voidPrintString("1-Start");
    2fee:	85 ed       	ldi	r24, 0xD5	; 213
    2ff0:	91 e0       	ldi	r25, 0x01	; 1
    2ff2:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
		CLCD_voidGoTOxy(2,0);
    2ff6:	60 e0       	ldi	r22, 0x00	; 0
    2ff8:	82 e0       	ldi	r24, 0x02	; 2
    2ffa:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
		CLCD_voidPrintString("2-Exit");
    2ffe:	8d ed       	ldi	r24, 0xDD	; 221
    3000:	91 e0       	ldi	r25, 0x01	; 1
    3002:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
		z=key();
    3006:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <key>
    300a:	d8 2f       	mov	r29, r24
		(z!=0xff)?g++:g;
    300c:	8f 3f       	cpi	r24, 0xFF	; 255
    300e:	09 f0       	breq	.+2      	; 0x3012 <Restart_OR_Exit+0x3a>
    3010:	cf 5f       	subi	r28, 0xFF	; 255

u8 Restart_OR_Exit()
{
	u8 g=0,z=0;
	CLCD_ClearDisplay();
	while(!g)
    3012:	cc 23       	and	r28, r28
    3014:	41 f3       	breq	.-48     	; 0x2fe6 <Restart_OR_Exit+0xe>
		CLCD_voidGoTOxy(2,0);
		CLCD_voidPrintString("2-Exit");
		z=key();
		(z!=0xff)?g++:g;
	}
	if (z==1)
    3016:	d1 30       	cpi	r29, 0x01	; 1
    3018:	39 f4       	brne	.+14     	; 0x3028 <Restart_OR_Exit+0x50>
	{
		right=0;
    301a:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <right>
		left=0;
    301e:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <left>
		Tick=0;
    3022:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <Tick>
    3026:	02 c0       	rjmp	.+4      	; 0x302c <Restart_OR_Exit+0x54>
	}
	else
	{
		CLCD_ClearDisplay();
    3028:	0e 94 09 05 	call	0xa12	; 0xa12 <CLCD_ClearDisplay>
	}
	return z;
}
    302c:	8d 2f       	mov	r24, r29
    302e:	df 91       	pop	r29
    3030:	cf 91       	pop	r28
    3032:	08 95       	ret

00003034 <Show_LevelANDScore>:

void Show_LevelANDScore(u8 level,u8 score)
{
    3034:	cf 93       	push	r28
    3036:	df 93       	push	r29
    3038:	d8 2f       	mov	r29, r24
    303a:	c6 2f       	mov	r28, r22
	CLCD_ClearDisplay();
    303c:	0e 94 09 05 	call	0xa12	; 0xa12 <CLCD_ClearDisplay>
	CLCD_voidGoTOxy(2,0);
    3040:	60 e0       	ldi	r22, 0x00	; 0
    3042:	82 e0       	ldi	r24, 0x02	; 2
    3044:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidPrintString("Your Level: ");
    3048:	84 ee       	ldi	r24, 0xE4	; 228
    304a:	91 e0       	ldi	r25, 0x01	; 1
    304c:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
	CLCD_voidSendNumber(level);
    3050:	6d 2f       	mov	r22, r29
    3052:	70 e0       	ldi	r23, 0x00	; 0
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	0e 94 a9 04 	call	0x952	; 0x952 <CLCD_voidSendNumber>
	
	CLCD_voidGoTOxy(3,0);
    305c:	60 e0       	ldi	r22, 0x00	; 0
    305e:	83 e0       	ldi	r24, 0x03	; 3
    3060:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	CLCD_voidPrintString("Your Score: ");
    3064:	81 ef       	ldi	r24, 0xF1	; 241
    3066:	91 e0       	ldi	r25, 0x01	; 1
    3068:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
	CLCD_voidSendNumber(score);
    306c:	6c 2f       	mov	r22, r28
    306e:	70 e0       	ldi	r23, 0x00	; 0
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	0e 94 a9 04 	call	0x952	; 0x952 <CLCD_voidSendNumber>
}
    3078:	df 91       	pop	r29
    307a:	cf 91       	pop	r28
    307c:	08 95       	ret

0000307e <Simon_TimerInterfacing>:
void Simon_TimerInterfacing()
{
	static u8 b=1;//boolean value
	static u16 counter1=0;
	static u16 counter2=0;
	counter1++;
    307e:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <counter1.2020>
    3082:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <counter1.2020+0x1>
    3086:	01 96       	adiw	r24, 0x01	; 1
    3088:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <counter1.2020+0x1>
    308c:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <counter1.2020>
	counter2++;
    3090:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <counter2.2021>
    3094:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <counter2.2021+0x1>
    3098:	01 96       	adiw	r24, 0x01	; 1
    309a:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <counter2.2021+0x1>
    309e:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <counter2.2021>

	if (counter2==40)
    30a2:	88 97       	sbiw	r24, 0x28	; 40
    30a4:	31 f5       	brne	.+76     	; 0x30f2 <Simon_TimerInterfacing+0x74>
	{

		if (b)
    30a6:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <b.2019>
    30aa:	88 23       	and	r24, r24
    30ac:	89 f0       	breq	.+34     	; 0x30d0 <Simon_TimerInterfacing+0x52>
		{
			SevenSegments_Disable(2);
    30ae:	82 e0       	ldi	r24, 0x02	; 2
    30b0:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <SevenSegments_Disable>
			SevenSegments_Enable(1);
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <SevenSegments_Enable>
			SevenSegments_DisplayDigit(right);
    30ba:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <right>
    30be:	0e 94 41 15 	call	0x2a82	; 0x2a82 <SevenSegments_DisplayDigit>
			b=0;
    30c2:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <b.2019>
			counter2=0;
    30c6:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <counter2.2021+0x1>
    30ca:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <counter2.2021>
    30ce:	11 c0       	rjmp	.+34     	; 0x30f2 <Simon_TimerInterfacing+0x74>
		}
		else
		{
			SevenSegments_Disable(1);
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <SevenSegments_Disable>
			SevenSegments_Enable(2);
    30d6:	82 e0       	ldi	r24, 0x02	; 2
    30d8:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <SevenSegments_Enable>
			SevenSegments_DisplayDigit(left);
    30dc:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <left>
    30e0:	0e 94 41 15 	call	0x2a82	; 0x2a82 <SevenSegments_DisplayDigit>
			b=1;
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <b.2019>
			counter2=0;
    30ea:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <counter2.2021+0x1>
    30ee:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <counter2.2021>
		}
	}
	if (counter1==4000&&Tick>-1)
    30f2:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <counter1.2020>
    30f6:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <counter1.2020+0x1>
    30fa:	80 3a       	cpi	r24, 0xA0	; 160
    30fc:	9f 40       	sbci	r25, 0x0F	; 15
    30fe:	f9 f4       	brne	.+62     	; 0x313e <Simon_TimerInterfacing+0xc0>
    3100:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <Tick>
    3104:	99 23       	and	r25, r25
    3106:	dc f0       	brlt	.+54     	; 0x313e <Simon_TimerInterfacing+0xc0>
	{
		right=Tick%10;
    3108:	87 e6       	ldi	r24, 0x67	; 103
    310a:	98 02       	muls	r25, r24
    310c:	81 2d       	mov	r24, r1
    310e:	11 24       	eor	r1, r1
    3110:	85 95       	asr	r24
    3112:	85 95       	asr	r24
    3114:	97 fd       	sbrc	r25, 7
    3116:	83 95       	inc	r24
    3118:	38 2f       	mov	r19, r24
    311a:	33 0f       	add	r19, r19
    311c:	23 2f       	mov	r18, r19
    311e:	22 0f       	add	r18, r18
    3120:	22 0f       	add	r18, r18
    3122:	23 0f       	add	r18, r19
    3124:	39 2f       	mov	r19, r25
    3126:	32 1b       	sub	r19, r18
    3128:	30 93 2b 02 	sts	0x022B, r19	; 0x80022b <right>
		left=Tick/10;
    312c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <left>
		counter1=0;
    3130:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <counter1.2020+0x1>
    3134:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <counter1.2020>
		Tick--;
    3138:	91 50       	subi	r25, 0x01	; 1
    313a:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <Tick>
    313e:	08 95       	ret

00003140 <Game>:
	}
}

void Game()
{
    3140:	cf 92       	push	r12
    3142:	df 92       	push	r13
    3144:	ef 92       	push	r14
    3146:	ff 92       	push	r15
    3148:	0f 93       	push	r16
    314a:	1f 93       	push	r17
    314c:	cf 93       	push	r28
    314e:	df 93       	push	r29
    3150:	cd b7       	in	r28, 0x3d	; 61
    3152:	de b7       	in	r29, 0x3e	; 62
    3154:	a9 97       	sbiw	r28, 0x29	; 41
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	de bf       	out	0x3e, r29	; 62
    315c:	0f be       	out	0x3f, r0	; 63
    315e:	cd bf       	out	0x3d, r28	; 61
	u8 Counter_Level = 1;
	u8 Score= 0;
    3160:	00 e0       	ldi	r16, 0x00	; 0
	}
}

void Game()
{
	u8 Counter_Level = 1;
    3162:	11 e0       	ldi	r17, 0x01	; 1
	u8 Score= 0;
	u8 Level=Counter_Level;
	u8 LCD_Show=1;
  while (1)
  {
	  u8 LED_List[20]={0};
    3164:	84 e1       	ldi	r24, 0x14	; 20
    3166:	7e 01       	movw	r14, r28
    3168:	25 e1       	ldi	r18, 0x15	; 21
    316a:	e2 0e       	add	r14, r18
    316c:	f1 1c       	adc	r15, r1
    316e:	f7 01       	movw	r30, r14
    3170:	28 2f       	mov	r18, r24
    3172:	11 92       	st	Z+, r1
    3174:	2a 95       	dec	r18
    3176:	e9 f7       	brne	.-6      	; 0x3172 <Game+0x32>
	  u8 User_Ticks[20]={0};
    3178:	fe 01       	movw	r30, r28
    317a:	31 96       	adiw	r30, 0x01	; 1
    317c:	6f 01       	movw	r12, r30
    317e:	11 92       	st	Z+, r1
    3180:	8a 95       	dec	r24
    3182:	e9 f7       	brne	.-6      	; 0x317e <Game+0x3e>
	  u8 lenght=0;
    3184:	19 a6       	std	Y+41, r1	; 0x29
	  if (LCD_Show)
	  {
		  CLCD_ClearDisplay();
    3186:	0e 94 09 05 	call	0xa12	; 0xa12 <CLCD_ClearDisplay>
         Show_LevelANDScore(Level,Score);
    318a:	60 2f       	mov	r22, r16
    318c:	81 2f       	mov	r24, r17
    318e:	0e 94 1a 18 	call	0x3034	; 0x3034 <Show_LevelANDScore>
    3192:	ff ef       	ldi	r31, 0xFF	; 255
    3194:	23 ed       	ldi	r18, 0xD3	; 211
    3196:	30 e3       	ldi	r19, 0x30	; 48
    3198:	f1 50       	subi	r31, 0x01	; 1
    319a:	20 40       	sbci	r18, 0x00	; 0
    319c:	30 40       	sbci	r19, 0x00	; 0
    319e:	e1 f7       	brne	.-8      	; 0x3198 <Game+0x58>
    31a0:	00 c0       	rjmp	.+0      	; 0x31a2 <Game+0x62>
    31a2:	00 00       	nop
		 LCD_Show=0;
		 _delay_ms(2000);
	  }
	  Level_Init(Counter_Level,&LED_List,&lenght);
    31a4:	ae 01       	movw	r20, r28
    31a6:	47 5d       	subi	r20, 0xD7	; 215
    31a8:	5f 4f       	sbci	r21, 0xFF	; 255
    31aa:	b7 01       	movw	r22, r14
    31ac:	81 2f       	mov	r24, r17
    31ae:	0e 94 84 15 	call	0x2b08	; 0x2b08 <Level_Init>
	  Simon_Say(Counter_Level);
    31b2:	81 2f       	mov	r24, r17
    31b4:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <Simon_Say>
	  Get_UserResponse(&User_Ticks,lenght);
    31b8:	69 a5       	ldd	r22, Y+41	; 0x29
    31ba:	c6 01       	movw	r24, r12
    31bc:	0e 94 09 17 	call	0x2e12	; 0x2e12 <Get_UserResponse>
	  u8 result=Level_Validity(LED_List,User_Ticks,lenght);
    31c0:	49 a5       	ldd	r20, Y+41	; 0x29
    31c2:	b6 01       	movw	r22, r12
    31c4:	c7 01       	movw	r24, r14
    31c6:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <Level_Validity>
	  if (result)
    31ca:	88 23       	and	r24, r24
    31cc:	31 f0       	breq	.+12     	; 0x31da <Game+0x9a>
	  {
		  Counter_Level++;
    31ce:	1f 5f       	subi	r17, 0xFF	; 255
		  LCD_Show=1;
		  Level=Counter_Level;
		  Score+=lenght;
    31d0:	89 a5       	ldd	r24, Y+41	; 0x29
    31d2:	08 0f       	add	r16, r24
		  u8 f=1;
		  Simon_win();
    31d4:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <Simon_win>
    31d8:	c5 cf       	rjmp	.-118    	; 0x3164 <Game+0x24>
	  }
	  else 
	  {
	     Simon_Loss();
    31da:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <Simon_Loss>
		 Show_LevelANDScore(Level,Score);
    31de:	60 2f       	mov	r22, r16
    31e0:	81 2f       	mov	r24, r17
    31e2:	0e 94 1a 18 	call	0x3034	; 0x3034 <Show_LevelANDScore>
    31e6:	8f ef       	ldi	r24, 0xFF	; 255
    31e8:	9d e3       	ldi	r25, 0x3D	; 61
    31ea:	e9 e4       	ldi	r30, 0x49	; 73
    31ec:	81 50       	subi	r24, 0x01	; 1
    31ee:	90 40       	sbci	r25, 0x00	; 0
    31f0:	e0 40       	sbci	r30, 0x00	; 0
    31f2:	e1 f7       	brne	.-8      	; 0x31ec <Game+0xac>
    31f4:	00 c0       	rjmp	.+0      	; 0x31f6 <Game+0xb6>
    31f6:	00 00       	nop
		 _delay_ms(3000);
	     Counter_Level=1;
		 LCD_Show=1;
		 Level=Counter_Level;
		 Score=0;
		 if (Restart_OR_Exit())
    31f8:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <Restart_OR_Exit>
    31fc:	88 23       	and	r24, r24
    31fe:	19 f0       	breq	.+6      	; 0x3206 <Game+0xc6>
		 Show_LevelANDScore(Level,Score);
		 _delay_ms(3000);
	     Counter_Level=1;
		 LCD_Show=1;
		 Level=Counter_Level;
		 Score=0;
    3200:	00 e0       	ldi	r16, 0x00	; 0
	  else 
	  {
	     Simon_Loss();
		 Show_LevelANDScore(Level,Score);
		 _delay_ms(3000);
	     Counter_Level=1;
    3202:	11 e0       	ldi	r17, 0x01	; 1
    3204:	af cf       	rjmp	.-162    	; 0x3164 <Game+0x24>
		 }
		 else
		    break;
	  }
  }
}
    3206:	a9 96       	adiw	r28, 0x29	; 41
    3208:	0f b6       	in	r0, 0x3f	; 63
    320a:	f8 94       	cli
    320c:	de bf       	out	0x3e, r29	; 62
    320e:	0f be       	out	0x3f, r0	; 63
    3210:	cd bf       	out	0x3d, r28	; 61
    3212:	df 91       	pop	r29
    3214:	cf 91       	pop	r28
    3216:	1f 91       	pop	r17
    3218:	0f 91       	pop	r16
    321a:	ff 90       	pop	r15
    321c:	ef 90       	pop	r14
    321e:	df 90       	pop	r13
    3220:	cf 90       	pop	r12
    3222:	08 95       	ret

00003224 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    3224:	1f 92       	push	r1
    3226:	0f 92       	push	r0
    3228:	0f b6       	in	r0, 0x3f	; 63
    322a:	0f 92       	push	r0
    322c:	11 24       	eor	r1, r1
    322e:	2f 93       	push	r18
    3230:	3f 93       	push	r19
    3232:	4f 93       	push	r20
    3234:	5f 93       	push	r21
    3236:	6f 93       	push	r22
    3238:	7f 93       	push	r23
    323a:	8f 93       	push	r24
    323c:	9f 93       	push	r25
    323e:	af 93       	push	r26
    3240:	bf 93       	push	r27
    3242:	ef 93       	push	r30
    3244:	ff 93       	push	r31
  Simon_TimerInterfacing();
    3246:	0e 94 3f 18 	call	0x307e	; 0x307e <Simon_TimerInterfacing>
}
    324a:	ff 91       	pop	r31
    324c:	ef 91       	pop	r30
    324e:	bf 91       	pop	r27
    3250:	af 91       	pop	r26
    3252:	9f 91       	pop	r25
    3254:	8f 91       	pop	r24
    3256:	7f 91       	pop	r23
    3258:	6f 91       	pop	r22
    325a:	5f 91       	pop	r21
    325c:	4f 91       	pop	r20
    325e:	3f 91       	pop	r19
    3260:	2f 91       	pop	r18
    3262:	0f 90       	pop	r0
    3264:	0f be       	out	0x3f, r0	; 63
    3266:	0f 90       	pop	r0
    3268:	1f 90       	pop	r1
    326a:	18 95       	reti

0000326c <BUZZ11>:
	0x00,
	0x00
};
void BUZZ11(void)
{
	SET_BIT(DDRC, 6);
    326c:	84 b3       	in	r24, 0x14	; 20
    326e:	80 64       	ori	r24, 0x40	; 64
    3270:	84 bb       	out	0x14, r24	; 20
	SET_BIT(PORTC,6);
    3272:	85 b3       	in	r24, 0x15	; 21
    3274:	80 64       	ori	r24, 0x40	; 64
    3276:	85 bb       	out	0x15, r24	; 21
    3278:	2f e7       	ldi	r18, 0x7F	; 127
    327a:	88 e3       	ldi	r24, 0x38	; 56
    327c:	91 e0       	ldi	r25, 0x01	; 1
    327e:	21 50       	subi	r18, 0x01	; 1
    3280:	80 40       	sbci	r24, 0x00	; 0
    3282:	90 40       	sbci	r25, 0x00	; 0
    3284:	e1 f7       	brne	.-8      	; 0x327e <BUZZ11+0x12>
    3286:	00 c0       	rjmp	.+0      	; 0x3288 <BUZZ11+0x1c>
    3288:	00 00       	nop
	_delay_ms(50);
	CLEAR_BIT(PORTC, 6);
    328a:	85 b3       	in	r24, 0x15	; 21
    328c:	8f 7b       	andi	r24, 0xBF	; 191
    328e:	85 bb       	out	0x15, r24	; 21
    3290:	08 95       	ret

00003292 <random_pair>:
	0x00,
	0x00
};
void random_pair(u8 c, u8 *x, u8 *y) {
	// Calculate x and y based on the seed
	*x = (c * 15245 + 12345) % 4;
    3292:	e8 2f       	mov	r30, r24
    3294:	f0 e0       	ldi	r31, 0x00	; 0
    3296:	8d e8       	ldi	r24, 0x8D	; 141
    3298:	9b e3       	ldi	r25, 0x3B	; 59
    329a:	e8 9f       	mul	r30, r24
    329c:	90 01       	movw	r18, r0
    329e:	e9 9f       	mul	r30, r25
    32a0:	30 0d       	add	r19, r0
    32a2:	f8 9f       	mul	r31, r24
    32a4:	30 0d       	add	r19, r0
    32a6:	11 24       	eor	r1, r1
    32a8:	27 5c       	subi	r18, 0xC7	; 199
    32aa:	3f 4c       	sbci	r19, 0xCF	; 207
    32ac:	23 70       	andi	r18, 0x03	; 3
    32ae:	30 78       	andi	r19, 0x80	; 128
    32b0:	33 23       	and	r19, r19
    32b2:	34 f4       	brge	.+12     	; 0x32c0 <random_pair+0x2e>
    32b4:	21 50       	subi	r18, 0x01	; 1
    32b6:	31 09       	sbc	r19, r1
    32b8:	2c 6f       	ori	r18, 0xFC	; 252
    32ba:	3f 6f       	ori	r19, 0xFF	; 255
    32bc:	2f 5f       	subi	r18, 0xFF	; 255
    32be:	3f 4f       	sbci	r19, 0xFF	; 255
    32c0:	db 01       	movw	r26, r22
    32c2:	2c 93       	st	X, r18
	*y = (c * 5431+ 5432) % 16;
    32c4:	27 e3       	ldi	r18, 0x37	; 55
    32c6:	35 e1       	ldi	r19, 0x15	; 21
    32c8:	e2 9f       	mul	r30, r18
    32ca:	c0 01       	movw	r24, r0
    32cc:	e3 9f       	mul	r30, r19
    32ce:	90 0d       	add	r25, r0
    32d0:	f2 9f       	mul	r31, r18
    32d2:	90 0d       	add	r25, r0
    32d4:	11 24       	eor	r1, r1
    32d6:	88 5c       	subi	r24, 0xC8	; 200
    32d8:	9a 4e       	sbci	r25, 0xEA	; 234
    32da:	8f 70       	andi	r24, 0x0F	; 15
    32dc:	90 78       	andi	r25, 0x80	; 128
    32de:	99 23       	and	r25, r25
    32e0:	24 f4       	brge	.+8      	; 0x32ea <random_pair+0x58>
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	80 6f       	ori	r24, 0xF0	; 240
    32e6:	9f 6f       	ori	r25, 0xFF	; 255
    32e8:	01 96       	adiw	r24, 0x01	; 1
    32ea:	fa 01       	movw	r30, r20
    32ec:	80 83       	st	Z, r24
    32ee:	08 95       	ret

000032f0 <snake>:
	0x00,
	0x00,
	0x00,
	0x00
};
 void snake(){
    32f0:	bf 92       	push	r11
    32f2:	cf 92       	push	r12
    32f4:	df 92       	push	r13
    32f6:	ef 92       	push	r14
    32f8:	ff 92       	push	r15
    32fa:	0f 93       	push	r16
    32fc:	1f 93       	push	r17
    32fe:	cf 93       	push	r28
    3300:	df 93       	push	r29
    3302:	cd b7       	in	r28, 0x3d	; 61
    3304:	de b7       	in	r29, 0x3e	; 62
    3306:	c2 58       	subi	r28, 0x82	; 130
    3308:	d1 09       	sbc	r29, r1
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	cd bf       	out	0x3d, r28	; 61
	
 u8 tail_positions[4][16];
 for (u8 i = 0; i < 4; i++) {
    3314:	20 e0       	ldi	r18, 0x00	; 0
    3316:	13 c0       	rjmp	.+38     	; 0x333e <snake+0x4e>
	 for (u8 j = 0; j < 16; j++)
	 {tail_positions[i][j]=48;}}
    3318:	e1 e0       	ldi	r30, 0x01	; 1
    331a:	f0 e0       	ldi	r31, 0x00	; 0
    331c:	ec 0f       	add	r30, r28
    331e:	fd 1f       	adc	r31, r29
    3320:	60 e1       	ldi	r22, 0x10	; 16
    3322:	26 9f       	mul	r18, r22
    3324:	e0 0d       	add	r30, r0
    3326:	f1 1d       	adc	r31, r1
    3328:	11 24       	eor	r1, r1
    332a:	e8 0f       	add	r30, r24
    332c:	f1 1d       	adc	r31, r1
    332e:	90 e3       	ldi	r25, 0x30	; 48
    3330:	90 83       	st	Z, r25
};
 void snake(){
	
 u8 tail_positions[4][16];
 for (u8 i = 0; i < 4; i++) {
	 for (u8 j = 0; j < 16; j++)
    3332:	8f 5f       	subi	r24, 0xFF	; 255
    3334:	01 c0       	rjmp	.+2      	; 0x3338 <snake+0x48>
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	80 31       	cpi	r24, 0x10	; 16
    333a:	70 f3       	brcs	.-36     	; 0x3318 <snake+0x28>
	0x00
};
 void snake(){
	
 u8 tail_positions[4][16];
 for (u8 i = 0; i < 4; i++) {
    333c:	2f 5f       	subi	r18, 0xFF	; 255
    333e:	24 30       	cpi	r18, 0x04	; 4
    3340:	d0 f3       	brcs	.-12     	; 0x3336 <snake+0x46>
	 for (u8 j = 0; j < 16; j++)
	 {tail_positions[i][j]=48;}}
	 
	 tail_positions[0][0]=0;
    3342:	19 82       	std	Y+1, r1	; 0x01
	 tail_positions[0][1]=1;
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	8a 83       	std	Y+2, r24	; 0x02
	 u8 snake_positions[4][16];
	 for (u8 i = 0; i < 4; i++)
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	12 c0       	rjmp	.+36     	; 0x3370 <snake+0x80>
	 for (u8 j = 0; j < 16; j++)
	 snake_positions[i][j]=0;
    334c:	e1 e4       	ldi	r30, 0x41	; 65
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	ec 0f       	add	r30, r28
    3352:	fd 1f       	adc	r31, r29
    3354:	70 e1       	ldi	r23, 0x10	; 16
    3356:	97 9f       	mul	r25, r23
    3358:	e0 0d       	add	r30, r0
    335a:	f1 1d       	adc	r31, r1
    335c:	11 24       	eor	r1, r1
    335e:	e8 0f       	add	r30, r24
    3360:	f1 1d       	adc	r31, r1
    3362:	10 82       	st	Z, r1
	 
	 tail_positions[0][0]=0;
	 tail_positions[0][1]=1;
	 u8 snake_positions[4][16];
	 for (u8 i = 0; i < 4; i++)
	 for (u8 j = 0; j < 16; j++)
    3364:	8f 5f       	subi	r24, 0xFF	; 255
    3366:	01 c0       	rjmp	.+2      	; 0x336a <snake+0x7a>
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	80 31       	cpi	r24, 0x10	; 16
    336c:	78 f3       	brcs	.-34     	; 0x334c <snake+0x5c>
	 {tail_positions[i][j]=48;}}
	 
	 tail_positions[0][0]=0;
	 tail_positions[0][1]=1;
	 u8 snake_positions[4][16];
	 for (u8 i = 0; i < 4; i++)
    336e:	9f 5f       	subi	r25, 0xFF	; 255
    3370:	94 30       	cpi	r25, 0x04	; 4
    3372:	d0 f3       	brcs	.-12     	; 0x3368 <snake+0x78>
	 for (u8 j = 0; j < 16; j++)
	 snake_positions[i][j]=0;
	 
	 snake_positions[0][0]=2;
    3374:	82 e0       	ldi	r24, 0x02	; 2
    3376:	22 96       	adiw	r28, 0x02	; 2
    3378:	8f af       	std	Y+63, r24	; 0x3f
    337a:	22 97       	sbiw	r28, 0x02	; 2
	 snake_positions[0][1]=2;
    337c:	23 96       	adiw	r28, 0x03	; 3
    337e:	8f af       	std	Y+63, r24	; 0x3f
    3380:	23 97       	sbiw	r28, 0x03	; 3
	 CLCD_voidSendSpecialChar(customCharurr,2,0,0);
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	40 e0       	ldi	r20, 0x00	; 0
    3386:	62 e0       	ldi	r22, 0x02	; 2
    3388:	83 ed       	ldi	r24, 0xD3	; 211
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
	 CLCD_voidSendSpecialChar(customCharurr,2,0,1);
    3390:	21 e0       	ldi	r18, 0x01	; 1
    3392:	40 e0       	ldi	r20, 0x00	; 0
    3394:	62 e0       	ldi	r22, 0x02	; 2
    3396:	83 ed       	ldi	r24, 0xD3	; 211
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
	 CLCD_voidGoTOxy(0,5);
    339e:	65 e0       	ldi	r22, 0x05	; 5
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	 CLCD_voidSendData('*');
    33a6:	8a e2       	ldi	r24, 0x2A	; 42
    33a8:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
	 //CLCD_voidSendSpecialChar(customCharfood,7,0,5);
	 snake_positions[0][5]=9;
    33ac:	89 e0       	ldi	r24, 0x09	; 9
    33ae:	27 96       	adiw	r28, 0x07	; 7
    33b0:	8f af       	std	Y+63, r24	; 0x3f
    33b2:	27 97       	sbiw	r28, 0x07	; 7

	 u8 k=0,curr_k=right,nx=0,ny=1,pm='u',c=1,ty=7,tx=0,minValue=48,sf=0,rx=0,ry=5;
    33b4:	cf 57       	subi	r28, 0x7F	; 127
    33b6:	df 4f       	sbci	r29, 0xFF	; 255
    33b8:	18 82       	st	Y, r1
    33ba:	c1 58       	subi	r28, 0x81	; 129
    33bc:	d0 40       	sbci	r29, 0x00	; 0
    33be:	85 e0       	ldi	r24, 0x05	; 5
    33c0:	ce 57       	subi	r28, 0x7E	; 126
    33c2:	df 4f       	sbci	r29, 0xFF	; 255
    33c4:	88 83       	st	Y, r24
    33c6:	c2 58       	subi	r28, 0x82	; 130
    33c8:	d0 40       	sbci	r29, 0x00	; 0
    33ca:	8f ef       	ldi	r24, 0xFF	; 255
    33cc:	99 e6       	ldi	r25, 0x69	; 105
    33ce:	28 e1       	ldi	r18, 0x18	; 24
    33d0:	81 50       	subi	r24, 0x01	; 1
    33d2:	90 40       	sbci	r25, 0x00	; 0
    33d4:	20 40       	sbci	r18, 0x00	; 0
    33d6:	e1 f7       	brne	.-8      	; 0x33d0 <snake+0xe0>
    33d8:	00 c0       	rjmp	.+0      	; 0x33da <snake+0xea>
    33da:	00 00       	nop
    33dc:	f1 2c       	mov	r15, r1
    33de:	07 e0       	ldi	r16, 0x07	; 7
    33e0:	11 e0       	ldi	r17, 0x01	; 1
    33e2:	dd 24       	eor	r13, r13
    33e4:	d3 94       	inc	r13
    33e6:	e1 2c       	mov	r14, r1
    33e8:	0f 2e       	mov	r0, r31
    33ea:	f3 e0       	ldi	r31, 0x03	; 3
    33ec:	bf 2e       	mov	r11, r31
    33ee:	f0 2d       	mov	r31, r0
	 
	 _delay_ms(1000);
	 /* Replace with your application code */
	 while (1)
	 {
		 k=key();
    33f0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <key>
    33f4:	c8 2e       	mov	r12, r24
		 if (k!=0xff)
    33f6:	6f ef       	ldi	r22, 0xFF	; 255
    33f8:	86 13       	cpse	r24, r22
    33fa:	01 c0       	rjmp	.+2      	; 0x33fe <snake+0x10e>
    33fc:	cb 2c       	mov	r12, r11
		 curr_k=k;
		 
		 switch (curr_k)
    33fe:	71 e0       	ldi	r23, 0x01	; 1
    3400:	c7 16       	cp	r12, r23
    3402:	09 f4       	brne	.+2      	; 0x3406 <snake+0x116>
    3404:	47 c0       	rjmp	.+142    	; 0x3494 <snake+0x1a4>
    3406:	c7 16       	cp	r12, r23
    3408:	30 f1       	brcs	.+76     	; 0x3456 <snake+0x166>
    340a:	82 e0       	ldi	r24, 0x02	; 2
    340c:	c8 16       	cp	r12, r24
    340e:	09 f4       	brne	.+2      	; 0x3412 <snake+0x122>
    3410:	60 c0       	rjmp	.+192    	; 0x34d2 <snake+0x1e2>
    3412:	93 e0       	ldi	r25, 0x03	; 3
    3414:	c9 12       	cpse	r12, r25
    3416:	7b c0       	rjmp	.+246    	; 0x350e <snake+0x21e>
		 {
			 case right:
			 if (pm=='d')
			 ny++;//-1
			 else if (pm=='u')
			 ny++;
    3418:	d3 94       	inc	r13
			 else
			 ny++;
			 CLCD_voidSendSpecialChar(customCharurr,2,nx,ny);
    341a:	2d 2d       	mov	r18, r13
    341c:	4e 2d       	mov	r20, r14
    341e:	62 e0       	ldi	r22, 0x02	; 2
    3420:	83 ed       	ldi	r24, 0xD3	; 211
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    3428:	2f ef       	ldi	r18, 0xFF	; 255
    342a:	62 e5       	ldi	r22, 0x52	; 82
    342c:	77 e0       	ldi	r23, 0x07	; 7
    342e:	21 50       	subi	r18, 0x01	; 1
    3430:	60 40       	sbci	r22, 0x00	; 0
    3432:	70 40       	sbci	r23, 0x00	; 0
    3434:	e1 f7       	brne	.-8      	; 0x342e <snake+0x13e>
    3436:	00 c0       	rjmp	.+0      	; 0x3438 <snake+0x148>
    3438:	00 00       	nop
			  _delay_ms(300);
			 snake_positions[nx][ny]=2;
    343a:	e1 e4       	ldi	r30, 0x41	; 65
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	ec 0f       	add	r30, r28
    3440:	fd 1f       	adc	r31, r29
    3442:	80 e1       	ldi	r24, 0x10	; 16
    3444:	e8 9e       	mul	r14, r24
    3446:	e0 0d       	add	r30, r0
    3448:	f1 1d       	adc	r31, r1
    344a:	11 24       	eor	r1, r1
    344c:	ed 0d       	add	r30, r13
    344e:	f1 1d       	adc	r31, r1
    3450:	82 e0       	ldi	r24, 0x02	; 2
    3452:	80 83       	st	Z, r24
			 break;
    3454:	5c c0       	rjmp	.+184    	; 0x350e <snake+0x21e>
			 case left:
			 if (pm=='d')
			 ny--;//-1
			 else if (pm=='u')
			 ny--;
    3456:	da 94       	dec	r13
			 else
			 ny--;
			 CLCD_voidSendSpecialChar(customCharurr,2,nx,ny);
    3458:	2d 2d       	mov	r18, r13
    345a:	4e 2d       	mov	r20, r14
    345c:	62 e0       	ldi	r22, 0x02	; 2
    345e:	83 ed       	ldi	r24, 0xD3	; 211
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    3466:	9f ef       	ldi	r25, 0xFF	; 255
    3468:	22 e5       	ldi	r18, 0x52	; 82
    346a:	67 e0       	ldi	r22, 0x07	; 7
    346c:	91 50       	subi	r25, 0x01	; 1
    346e:	20 40       	sbci	r18, 0x00	; 0
    3470:	60 40       	sbci	r22, 0x00	; 0
    3472:	e1 f7       	brne	.-8      	; 0x346c <snake+0x17c>
    3474:	00 c0       	rjmp	.+0      	; 0x3476 <snake+0x186>
    3476:	00 00       	nop
			  _delay_ms(300);
			 snake_positions[nx][ny]=2;
    3478:	e1 e4       	ldi	r30, 0x41	; 65
    347a:	f0 e0       	ldi	r31, 0x00	; 0
    347c:	ec 0f       	add	r30, r28
    347e:	fd 1f       	adc	r31, r29
    3480:	70 e1       	ldi	r23, 0x10	; 16
    3482:	e7 9e       	mul	r14, r23
    3484:	e0 0d       	add	r30, r0
    3486:	f1 1d       	adc	r31, r1
    3488:	11 24       	eor	r1, r1
    348a:	ed 0d       	add	r30, r13
    348c:	f1 1d       	adc	r31, r1
    348e:	82 e0       	ldi	r24, 0x02	; 2
    3490:	80 83       	st	Z, r24
			 break;
    3492:	3d c0       	rjmp	.+122    	; 0x350e <snake+0x21e>
			 case up:
			 	
			 if (pm=='d')
			 nx--;//-1
			 else if (pm=='u')
			 nx--;
    3494:	ea 94       	dec	r14
			 else
			 nx--;
			 
			 CLCD_voidSendSpecialChar(customCharfll,1,nx,ny);
    3496:	2d 2d       	mov	r18, r13
    3498:	4e 2d       	mov	r20, r14
    349a:	61 e0       	ldi	r22, 0x01	; 1
    349c:	8b ec       	ldi	r24, 0xCB	; 203
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    34a4:	8f ef       	ldi	r24, 0xFF	; 255
    34a6:	97 e8       	ldi	r25, 0x87	; 135
    34a8:	23 e1       	ldi	r18, 0x13	; 19
    34aa:	81 50       	subi	r24, 0x01	; 1
    34ac:	90 40       	sbci	r25, 0x00	; 0
    34ae:	20 40       	sbci	r18, 0x00	; 0
    34b0:	e1 f7       	brne	.-8      	; 0x34aa <snake+0x1ba>
    34b2:	00 c0       	rjmp	.+0      	; 0x34b4 <snake+0x1c4>
    34b4:	00 00       	nop
			 _delay_ms(800);
			 snake_positions[nx][ny]=1;
    34b6:	e1 e4       	ldi	r30, 0x41	; 65
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	ec 0f       	add	r30, r28
    34bc:	fd 1f       	adc	r31, r29
    34be:	60 e1       	ldi	r22, 0x10	; 16
    34c0:	e6 9e       	mul	r14, r22
    34c2:	e0 0d       	add	r30, r0
    34c4:	f1 1d       	adc	r31, r1
    34c6:	11 24       	eor	r1, r1
    34c8:	ed 0d       	add	r30, r13
    34ca:	f1 1d       	adc	r31, r1
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	80 83       	st	Z, r24
			 break;
    34d0:	1e c0       	rjmp	.+60     	; 0x350e <snake+0x21e>
			 case down:
			 	
			 if (pm=='d')
			 nx++;
			 else if (pm=='u')
			 nx++;
    34d2:	e3 94       	inc	r14
			 else
			 nx++;
			 
			 CLCD_voidSendSpecialChar(customCharfll,1,nx,ny);
    34d4:	2d 2d       	mov	r18, r13
    34d6:	4e 2d       	mov	r20, r14
    34d8:	61 e0       	ldi	r22, 0x01	; 1
    34da:	8b ec       	ldi	r24, 0xCB	; 203
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
    34e2:	7f ef       	ldi	r23, 0xFF	; 255
    34e4:	87 e8       	ldi	r24, 0x87	; 135
    34e6:	93 e1       	ldi	r25, 0x13	; 19
    34e8:	71 50       	subi	r23, 0x01	; 1
    34ea:	80 40       	sbci	r24, 0x00	; 0
    34ec:	90 40       	sbci	r25, 0x00	; 0
    34ee:	e1 f7       	brne	.-8      	; 0x34e8 <snake+0x1f8>
    34f0:	00 c0       	rjmp	.+0      	; 0x34f2 <snake+0x202>
    34f2:	00 00       	nop
			 _delay_ms(800);
			 snake_positions[nx][ny]=1;
    34f4:	e1 e4       	ldi	r30, 0x41	; 65
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	ec 0f       	add	r30, r28
    34fa:	fd 1f       	adc	r31, r29
    34fc:	20 e1       	ldi	r18, 0x10	; 16
    34fe:	e2 9e       	mul	r14, r18
    3500:	e0 0d       	add	r30, r0
    3502:	f1 1d       	adc	r31, r1
    3504:	11 24       	eor	r1, r1
    3506:	ed 0d       	add	r30, r13
    3508:	f1 1d       	adc	r31, r1
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	80 83       	st	Z, r24
			 break;
		 }
		 u8 go=0;
		 go--;
		 if (nx==4|| ny==16||ny==go||nx==go)
    350e:	64 e0       	ldi	r22, 0x04	; 4
    3510:	e6 16       	cp	r14, r22
    3512:	09 f4       	brne	.+2      	; 0x3516 <snake+0x226>
    3514:	a4 c0       	rjmp	.+328    	; 0x365e <snake+0x36e>
    3516:	70 e1       	ldi	r23, 0x10	; 16
    3518:	d7 16       	cp	r13, r23
    351a:	09 f4       	brne	.+2      	; 0x351e <snake+0x22e>
    351c:	a0 c0       	rjmp	.+320    	; 0x365e <snake+0x36e>
    351e:	8f ef       	ldi	r24, 0xFF	; 255
    3520:	d8 16       	cp	r13, r24
    3522:	09 f4       	brne	.+2      	; 0x3526 <snake+0x236>
    3524:	9c c0       	rjmp	.+312    	; 0x365e <snake+0x36e>
    3526:	e8 16       	cp	r14, r24
    3528:	09 f4       	brne	.+2      	; 0x352c <snake+0x23c>
    352a:	99 c0       	rjmp	.+306    	; 0x365e <snake+0x36e>
		 break;
		 
		 
		 if(nx==rx & ny==ry)
    352c:	91 e0       	ldi	r25, 0x01	; 1
    352e:	cf 57       	subi	r28, 0x7F	; 127
    3530:	df 4f       	sbci	r29, 0xFF	; 255
    3532:	88 81       	ld	r24, Y
    3534:	c1 58       	subi	r28, 0x81	; 129
    3536:	d0 40       	sbci	r29, 0x00	; 0
    3538:	8e 11       	cpse	r24, r14
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	ce 57       	subi	r28, 0x7E	; 126
    3540:	df 4f       	sbci	r29, 0xFF	; 255
    3542:	28 81       	ld	r18, Y
    3544:	c2 58       	subi	r28, 0x82	; 130
    3546:	d0 40       	sbci	r29, 0x00	; 0
    3548:	2d 11       	cpse	r18, r13
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	89 23       	and	r24, r25
    354e:	71 f4       	brne	.+28     	; 0x356c <snake+0x27c>
    3550:	40 e0       	ldi	r20, 0x00	; 0
    3552:	50 e0       	ldi	r21, 0x00	; 0
    3554:	30 e3       	ldi	r19, 0x30	; 48
    3556:	5d c0       	rjmp	.+186    	; 0x3612 <snake+0x322>
		 {
			 while(snake_positions[rx][ry]!=0)
			 {random_pair(c, &rx, &ry);c++;}
    3558:	ae 01       	movw	r20, r28
    355a:	4e 57       	subi	r20, 0x7E	; 126
    355c:	5f 4f       	sbci	r21, 0xFF	; 255
    355e:	be 01       	movw	r22, r28
    3560:	6f 57       	subi	r22, 0x7F	; 127
    3562:	7f 4f       	sbci	r23, 0xFF	; 255
    3564:	81 2f       	mov	r24, r17
    3566:	0e 94 49 19 	call	0x3292	; 0x3292 <random_pair>
    356a:	1f 5f       	subi	r17, 0xFF	; 255
		 break;
		 
		 
		 if(nx==rx & ny==ry)
		 {
			 while(snake_positions[rx][ry]!=0)
    356c:	cf 57       	subi	r28, 0x7F	; 127
    356e:	df 4f       	sbci	r29, 0xFF	; 255
    3570:	88 81       	ld	r24, Y
    3572:	c1 58       	subi	r28, 0x81	; 129
    3574:	d0 40       	sbci	r29, 0x00	; 0
    3576:	ce 57       	subi	r28, 0x7E	; 126
    3578:	df 4f       	sbci	r29, 0xFF	; 255
    357a:	68 81       	ld	r22, Y
    357c:	c2 58       	subi	r28, 0x82	; 130
    357e:	d0 40       	sbci	r29, 0x00	; 0
    3580:	e1 e4       	ldi	r30, 0x41	; 65
    3582:	f0 e0       	ldi	r31, 0x00	; 0
    3584:	ec 0f       	add	r30, r28
    3586:	fd 1f       	adc	r31, r29
    3588:	90 e1       	ldi	r25, 0x10	; 16
    358a:	89 9f       	mul	r24, r25
    358c:	e0 0d       	add	r30, r0
    358e:	f1 1d       	adc	r31, r1
    3590:	11 24       	eor	r1, r1
    3592:	e6 0f       	add	r30, r22
    3594:	f1 1d       	adc	r31, r1
    3596:	90 81       	ld	r25, Z
    3598:	91 11       	cpse	r25, r1
    359a:	de cf       	rjmp	.-68     	; 0x3558 <snake+0x268>
			 {random_pair(c, &rx, &ry);c++;}
			 CLCD_voidGoTOxy(rx,ry);
    359c:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
			 CLCD_voidSendData('*');
    35a0:	8a e2       	ldi	r24, 0x2A	; 42
    35a2:	0e 94 53 04 	call	0x8a6	; 0x8a6 <CLCD_voidSendData>
			 //CLCD_voidSendSpecialChar(customCharfood,7,rx,ry);
			 snake_positions[rx][ry]=9;
    35a6:	cf 57       	subi	r28, 0x7F	; 127
    35a8:	df 4f       	sbci	r29, 0xFF	; 255
    35aa:	98 81       	ld	r25, Y
    35ac:	c1 58       	subi	r28, 0x81	; 129
    35ae:	d0 40       	sbci	r29, 0x00	; 0
    35b0:	ce 57       	subi	r28, 0x7E	; 126
    35b2:	df 4f       	sbci	r29, 0xFF	; 255
    35b4:	88 81       	ld	r24, Y
    35b6:	c2 58       	subi	r28, 0x82	; 130
    35b8:	d0 40       	sbci	r29, 0x00	; 0
    35ba:	e1 e4       	ldi	r30, 0x41	; 65
    35bc:	f0 e0       	ldi	r31, 0x00	; 0
    35be:	ec 0f       	add	r30, r28
    35c0:	fd 1f       	adc	r31, r29
    35c2:	20 e1       	ldi	r18, 0x10	; 16
    35c4:	92 9f       	mul	r25, r18
    35c6:	e0 0d       	add	r30, r0
    35c8:	f1 1d       	adc	r31, r1
    35ca:	11 24       	eor	r1, r1
    35cc:	e8 0f       	add	r30, r24
    35ce:	f1 1d       	adc	r31, r1
    35d0:	89 e0       	ldi	r24, 0x09	; 9
    35d2:	80 83       	st	Z, r24
    35d4:	36 c0       	rjmp	.+108    	; 0x3642 <snake+0x352>
			 
			 
			 minValue=48;
			 for (int i = 0; i <3 ; i++) {
				 for (int j = 0; j < 15; j++) {
					 if (tail_positions[i][j] < minValue)
    35d6:	fa 01       	movw	r30, r20
    35d8:	e2 95       	swap	r30
    35da:	f2 95       	swap	r31
    35dc:	f0 7f       	andi	r31, 0xF0	; 240
    35de:	fe 27       	eor	r31, r30
    35e0:	e0 7f       	andi	r30, 0xF0	; 240
    35e2:	fe 27       	eor	r31, r30
    35e4:	61 e0       	ldi	r22, 0x01	; 1
    35e6:	70 e0       	ldi	r23, 0x00	; 0
    35e8:	6c 0f       	add	r22, r28
    35ea:	7d 1f       	adc	r23, r29
    35ec:	e6 0f       	add	r30, r22
    35ee:	f7 1f       	adc	r31, r23
    35f0:	e8 0f       	add	r30, r24
    35f2:	f9 1f       	adc	r31, r25
    35f4:	20 81       	ld	r18, Z
    35f6:	23 17       	cp	r18, r19
    35f8:	18 f4       	brcc	.+6      	; 0x3600 <snake+0x310>
					 {
						 minValue = tail_positions[i][j];
						 tx = i;
    35fa:	f4 2e       	mov	r15, r20
						 ty = j;
    35fc:	08 2f       	mov	r16, r24
			 minValue=48;
			 for (int i = 0; i <3 ; i++) {
				 for (int j = 0; j < 15; j++) {
					 if (tail_positions[i][j] < minValue)
					 {
						 minValue = tail_positions[i][j];
    35fe:	32 2f       	mov	r19, r18
		 {
			 
			 
			 minValue=48;
			 for (int i = 0; i <3 ; i++) {
				 for (int j = 0; j < 15; j++) {
    3600:	01 96       	adiw	r24, 0x01	; 1
    3602:	02 c0       	rjmp	.+4      	; 0x3608 <snake+0x318>
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	8f 30       	cpi	r24, 0x0F	; 15
    360a:	91 05       	cpc	r25, r1
    360c:	24 f3       	brlt	.-56     	; 0x35d6 <snake+0x2e6>
		 else
		 {
			 
			 
			 minValue=48;
			 for (int i = 0; i <3 ; i++) {
    360e:	4f 5f       	subi	r20, 0xFF	; 255
    3610:	5f 4f       	sbci	r21, 0xFF	; 255
    3612:	43 30       	cpi	r20, 0x03	; 3
    3614:	51 05       	cpc	r21, r1
    3616:	b4 f3       	brlt	.-20     	; 0x3604 <snake+0x314>
						 ty = j;
					 }
				 }
			 }

			 tail_positions[tx][ty]=48;
    3618:	e1 e0       	ldi	r30, 0x01	; 1
    361a:	f0 e0       	ldi	r31, 0x00	; 0
    361c:	ec 0f       	add	r30, r28
    361e:	fd 1f       	adc	r31, r29
    3620:	70 e1       	ldi	r23, 0x10	; 16
    3622:	f7 9e       	mul	r15, r23
    3624:	e0 0d       	add	r30, r0
    3626:	f1 1d       	adc	r31, r1
    3628:	11 24       	eor	r1, r1
    362a:	e0 0f       	add	r30, r16
    362c:	f1 1d       	adc	r31, r1
    362e:	80 e3       	ldi	r24, 0x30	; 48
    3630:	80 83       	st	Z, r24
			 c++;
    3632:	1f 5f       	subi	r17, 0xFF	; 255
			 CLCD_voidSendSpecialChar(customCharspace,5,tx,ty);
    3634:	20 2f       	mov	r18, r16
    3636:	4f 2d       	mov	r20, r15
    3638:	65 e0       	ldi	r22, 0x05	; 5
    363a:	8c e2       	ldi	r24, 0x2C	; 44
    363c:	92 e0       	ldi	r25, 0x02	; 2
    363e:	0e 94 23 05 	call	0xa46	; 0xa46 <CLCD_voidSendSpecialChar>
		 }
		 
		 tail_positions[nx][ny]=c;
    3642:	e1 e0       	ldi	r30, 0x01	; 1
    3644:	f0 e0       	ldi	r31, 0x00	; 0
    3646:	ec 0f       	add	r30, r28
    3648:	fd 1f       	adc	r31, r29
    364a:	80 e1       	ldi	r24, 0x10	; 16
    364c:	e8 9e       	mul	r14, r24
    364e:	e0 0d       	add	r30, r0
    3650:	f1 1d       	adc	r31, r1
    3652:	11 24       	eor	r1, r1
    3654:	ed 0d       	add	r30, r13
    3656:	f1 1d       	adc	r31, r1
    3658:	10 83       	st	Z, r17
		 
		 
	 }
    365a:	bc 2c       	mov	r11, r12
    365c:	c9 ce       	rjmp	.-622    	; 0x33f0 <snake+0x100>
	
	 CLCD_voidSendCommand(1);
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	0e 94 31 04 	call	0x862	; 0x862 <CLCD_voidSendCommand>
	  CLCD_voidGoTOxy(1,5);
    3664:	65 e0       	ldi	r22, 0x05	; 5
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	0e 94 92 04 	call	0x924	; 0x924 <CLCD_voidGoTOxy>
	   BUZZ11();
    366c:	0e 94 36 19 	call	0x326c	; 0x326c <BUZZ11>
	 CLCD_voidPrintString("Game Over");
    3670:	8b ec       	ldi	r24, 0xCB	; 203
    3672:	91 e0       	ldi	r25, 0x01	; 1
    3674:	0e 94 85 04 	call	0x90a	; 0x90a <CLCD_voidPrintString>
    3678:	9f ef       	ldi	r25, 0xFF	; 255
    367a:	23 ed       	ldi	r18, 0xD3	; 211
    367c:	60 e3       	ldi	r22, 0x30	; 48
    367e:	91 50       	subi	r25, 0x01	; 1
    3680:	20 40       	sbci	r18, 0x00	; 0
    3682:	60 40       	sbci	r22, 0x00	; 0
    3684:	e1 f7       	brne	.-8      	; 0x367e <snake+0x38e>
    3686:	00 c0       	rjmp	.+0      	; 0x3688 <snake+0x398>
    3688:	00 00       	nop
	 _delay_ms(2000);
	 
	 
 }
    368a:	ce 57       	subi	r28, 0x7E	; 126
    368c:	df 4f       	sbci	r29, 0xFF	; 255
    368e:	0f b6       	in	r0, 0x3f	; 63
    3690:	f8 94       	cli
    3692:	de bf       	out	0x3e, r29	; 62
    3694:	0f be       	out	0x3f, r0	; 63
    3696:	cd bf       	out	0x3d, r28	; 61
    3698:	df 91       	pop	r29
    369a:	cf 91       	pop	r28
    369c:	1f 91       	pop	r17
    369e:	0f 91       	pop	r16
    36a0:	ff 90       	pop	r15
    36a2:	ef 90       	pop	r14
    36a4:	df 90       	pop	r13
    36a6:	cf 90       	pop	r12
    36a8:	bf 90       	pop	r11
    36aa:	08 95       	ret

000036ac <SET_PRESCALER>:
	CLEAR_BIT(TCCR0,WGM00);
	CLEAR_BIT(TCCR0,WGM01);
	/*SET PRESCALER AS DEFAULT*/
	SET_PRESCALER(TIMER0,LOW,HIGH,LOW);
	/*ENABLE INTRRUPT FLAG*/
	SET_BIT(TIMSK,TOIE0);
    36ac:	88 23       	and	r24, r24
    36ae:	11 f0       	breq	.+4      	; 0x36b4 <SET_PRESCALER+0x8>
    36b0:	82 30       	cpi	r24, 0x02	; 2
    36b2:	e1 f4       	brne	.+56     	; 0x36ec <SET_PRESCALER+0x40>
    36b4:	61 11       	cpse	r22, r1
    36b6:	04 c0       	rjmp	.+8      	; 0x36c0 <SET_PRESCALER+0x14>
    36b8:	83 b7       	in	r24, 0x33	; 51
    36ba:	8e 7f       	andi	r24, 0xFE	; 254
    36bc:	83 bf       	out	0x33, r24	; 51
    36be:	03 c0       	rjmp	.+6      	; 0x36c6 <SET_PRESCALER+0x1a>
    36c0:	83 b7       	in	r24, 0x33	; 51
    36c2:	81 60       	ori	r24, 0x01	; 1
    36c4:	83 bf       	out	0x33, r24	; 51
    36c6:	41 11       	cpse	r20, r1
    36c8:	04 c0       	rjmp	.+8      	; 0x36d2 <SET_PRESCALER+0x26>
    36ca:	83 b7       	in	r24, 0x33	; 51
    36cc:	8d 7f       	andi	r24, 0xFD	; 253
    36ce:	83 bf       	out	0x33, r24	; 51
    36d0:	03 c0       	rjmp	.+6      	; 0x36d8 <SET_PRESCALER+0x2c>
    36d2:	83 b7       	in	r24, 0x33	; 51
    36d4:	82 60       	ori	r24, 0x02	; 2
    36d6:	83 bf       	out	0x33, r24	; 51
    36d8:	21 11       	cpse	r18, r1
    36da:	04 c0       	rjmp	.+8      	; 0x36e4 <SET_PRESCALER+0x38>
    36dc:	83 b7       	in	r24, 0x33	; 51
    36de:	8b 7f       	andi	r24, 0xFB	; 251
    36e0:	83 bf       	out	0x33, r24	; 51
    36e2:	08 95       	ret
    36e4:	83 b7       	in	r24, 0x33	; 51
    36e6:	84 60       	ori	r24, 0x04	; 4
    36e8:	83 bf       	out	0x33, r24	; 51
    36ea:	08 95       	ret
    36ec:	81 30       	cpi	r24, 0x01	; 1
    36ee:	d9 f4       	brne	.+54     	; 0x3726 <SET_PRESCALER+0x7a>
    36f0:	61 11       	cpse	r22, r1
    36f2:	04 c0       	rjmp	.+8      	; 0x36fc <SET_PRESCALER+0x50>
    36f4:	8e b5       	in	r24, 0x2e	; 46
    36f6:	8e 7f       	andi	r24, 0xFE	; 254
    36f8:	8e bd       	out	0x2e, r24	; 46
    36fa:	03 c0       	rjmp	.+6      	; 0x3702 <SET_PRESCALER+0x56>
    36fc:	8e b5       	in	r24, 0x2e	; 46
    36fe:	81 60       	ori	r24, 0x01	; 1
    3700:	8e bd       	out	0x2e, r24	; 46
    3702:	41 11       	cpse	r20, r1
    3704:	04 c0       	rjmp	.+8      	; 0x370e <SET_PRESCALER+0x62>
    3706:	8e b5       	in	r24, 0x2e	; 46
    3708:	8d 7f       	andi	r24, 0xFD	; 253
    370a:	8e bd       	out	0x2e, r24	; 46
    370c:	03 c0       	rjmp	.+6      	; 0x3714 <SET_PRESCALER+0x68>
    370e:	8e b5       	in	r24, 0x2e	; 46
    3710:	82 60       	ori	r24, 0x02	; 2
    3712:	8e bd       	out	0x2e, r24	; 46
    3714:	21 11       	cpse	r18, r1
    3716:	04 c0       	rjmp	.+8      	; 0x3720 <SET_PRESCALER+0x74>
    3718:	8e b5       	in	r24, 0x2e	; 46
    371a:	8b 7f       	andi	r24, 0xFB	; 251
    371c:	8e bd       	out	0x2e, r24	; 46
    371e:	08 95       	ret
    3720:	8e b5       	in	r24, 0x2e	; 46
    3722:	84 60       	ori	r24, 0x04	; 4
    3724:	8e bd       	out	0x2e, r24	; 46
    3726:	08 95       	ret

00003728 <SET_ValueForTimer>:
    3728:	82 30       	cpi	r24, 0x02	; 2
    372a:	99 f0       	breq	.+38     	; 0x3752 <SET_ValueForTimer+0x2a>
    372c:	28 f4       	brcc	.+10     	; 0x3738 <SET_ValueForTimer+0x10>
    372e:	88 23       	and	r24, r24
    3730:	49 f0       	breq	.+18     	; 0x3744 <SET_ValueForTimer+0x1c>
    3732:	81 30       	cpi	r24, 0x01	; 1
    3734:	61 f0       	breq	.+24     	; 0x374e <SET_ValueForTimer+0x26>
    3736:	08 95       	ret
    3738:	84 30       	cpi	r24, 0x04	; 4
    373a:	89 f0       	breq	.+34     	; 0x375e <SET_ValueForTimer+0x36>
    373c:	68 f0       	brcs	.+26     	; 0x3758 <SET_ValueForTimer+0x30>
    373e:	85 30       	cpi	r24, 0x05	; 5
    3740:	89 f0       	breq	.+34     	; 0x3764 <SET_ValueForTimer+0x3c>
    3742:	08 95       	ret
    3744:	62 bf       	out	0x32, r22	; 50
    3746:	82 b7       	in	r24, 0x32	; 50
    3748:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <t>
    374c:	08 95       	ret
    374e:	6c bf       	out	0x3c, r22	; 60
    3750:	08 95       	ret
    3752:	77 bd       	out	0x27, r23	; 39
    3754:	66 bd       	out	0x26, r22	; 38
    3756:	08 95       	ret
    3758:	7b bd       	out	0x2b, r23	; 43
    375a:	6a bd       	out	0x2a, r22	; 42
    375c:	08 95       	ret
    375e:	79 bd       	out	0x29, r23	; 41
    3760:	68 bd       	out	0x28, r22	; 40
    3762:	08 95       	ret
    3764:	7d bd       	out	0x2d, r23	; 45
    3766:	6c bd       	out	0x2c, r22	; 44
    3768:	08 95       	ret

0000376a <Timer2_CTCMode_Init>:
}

void Timer2_CTCMode_Init(){
	
	/*SET TIMER IN NORMAL MODE*/
	CLEAR_BIT(TCCR0,WGM00);
    376a:	83 b7       	in	r24, 0x33	; 51
    376c:	8f 7b       	andi	r24, 0xBF	; 191
    376e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);
    3770:	83 b7       	in	r24, 0x33	; 51
    3772:	88 60       	ori	r24, 0x08	; 8
    3774:	83 bf       	out	0x33, r24	; 51
	/*SET PRESCALER AS DEFAULT*/
	SET_PRESCALER(TIMER0,LOW,HIGH,LOW);
    3776:	20 e0       	ldi	r18, 0x00	; 0
    3778:	41 e0       	ldi	r20, 0x01	; 1
    377a:	60 e0       	ldi	r22, 0x00	; 0
    377c:	80 e0       	ldi	r24, 0x00	; 0
    377e:	0e 94 56 1b 	call	0x36ac	; 0x36ac <SET_PRESCALER>
	/*ENABLE INTRRUPT FLAG*/
	SET_BIT(TIMSK,OCIE0);
    3782:	89 b7       	in	r24, 0x39	; 57
    3784:	82 60       	ori	r24, 0x02	; 2
    3786:	89 bf       	out	0x39, r24	; 57
    3788:	08 95       	ret

0000378a <__udivmodsi4>:
    378a:	a1 e2       	ldi	r26, 0x21	; 33
    378c:	1a 2e       	mov	r1, r26
    378e:	aa 1b       	sub	r26, r26
    3790:	bb 1b       	sub	r27, r27
    3792:	fd 01       	movw	r30, r26
    3794:	0d c0       	rjmp	.+26     	; 0x37b0 <__udivmodsi4_ep>

00003796 <__udivmodsi4_loop>:
    3796:	aa 1f       	adc	r26, r26
    3798:	bb 1f       	adc	r27, r27
    379a:	ee 1f       	adc	r30, r30
    379c:	ff 1f       	adc	r31, r31
    379e:	a2 17       	cp	r26, r18
    37a0:	b3 07       	cpc	r27, r19
    37a2:	e4 07       	cpc	r30, r20
    37a4:	f5 07       	cpc	r31, r21
    37a6:	20 f0       	brcs	.+8      	; 0x37b0 <__udivmodsi4_ep>
    37a8:	a2 1b       	sub	r26, r18
    37aa:	b3 0b       	sbc	r27, r19
    37ac:	e4 0b       	sbc	r30, r20
    37ae:	f5 0b       	sbc	r31, r21

000037b0 <__udivmodsi4_ep>:
    37b0:	66 1f       	adc	r22, r22
    37b2:	77 1f       	adc	r23, r23
    37b4:	88 1f       	adc	r24, r24
    37b6:	99 1f       	adc	r25, r25
    37b8:	1a 94       	dec	r1
    37ba:	69 f7       	brne	.-38     	; 0x3796 <__udivmodsi4_loop>
    37bc:	60 95       	com	r22
    37be:	70 95       	com	r23
    37c0:	80 95       	com	r24
    37c2:	90 95       	com	r25
    37c4:	9b 01       	movw	r18, r22
    37c6:	ac 01       	movw	r20, r24
    37c8:	bd 01       	movw	r22, r26
    37ca:	cf 01       	movw	r24, r30
    37cc:	08 95       	ret

000037ce <__divmodsi4>:
    37ce:	05 2e       	mov	r0, r21
    37d0:	97 fb       	bst	r25, 7
    37d2:	1e f4       	brtc	.+6      	; 0x37da <__divmodsi4+0xc>
    37d4:	00 94       	com	r0
    37d6:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__negsi2>
    37da:	57 fd       	sbrc	r21, 7
    37dc:	07 d0       	rcall	.+14     	; 0x37ec <__divmodsi4_neg2>
    37de:	0e 94 c5 1b 	call	0x378a	; 0x378a <__udivmodsi4>
    37e2:	07 fc       	sbrc	r0, 7
    37e4:	03 d0       	rcall	.+6      	; 0x37ec <__divmodsi4_neg2>
    37e6:	4e f4       	brtc	.+18     	; 0x37fa <__divmodsi4_exit>
    37e8:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__negsi2>

000037ec <__divmodsi4_neg2>:
    37ec:	50 95       	com	r21
    37ee:	40 95       	com	r20
    37f0:	30 95       	com	r19
    37f2:	21 95       	neg	r18
    37f4:	3f 4f       	sbci	r19, 0xFF	; 255
    37f6:	4f 4f       	sbci	r20, 0xFF	; 255
    37f8:	5f 4f       	sbci	r21, 0xFF	; 255

000037fa <__divmodsi4_exit>:
    37fa:	08 95       	ret

000037fc <__negsi2>:
    37fc:	90 95       	com	r25
    37fe:	80 95       	com	r24
    3800:	70 95       	com	r23
    3802:	61 95       	neg	r22
    3804:	7f 4f       	sbci	r23, 0xFF	; 255
    3806:	8f 4f       	sbci	r24, 0xFF	; 255
    3808:	9f 4f       	sbci	r25, 0xFF	; 255
    380a:	08 95       	ret

0000380c <__tablejump2__>:
    380c:	ee 0f       	add	r30, r30
    380e:	ff 1f       	adc	r31, r31
    3810:	05 90       	lpm	r0, Z+
    3812:	f4 91       	lpm	r31, Z
    3814:	e0 2d       	mov	r30, r0
    3816:	09 94       	ijmp

00003818 <_exit>:
    3818:	f8 94       	cli

0000381a <__stop_program>:
    381a:	ff cf       	rjmp	.-2      	; 0x381a <__stop_program>
