
garage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000760  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000082  00800060  00000760  000007f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000e2  008000e2  00000876  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000876  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001895  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a27  00000000  00000000  00002301  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eab  00000000  00000000  00002d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00003bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a9  00000000  00000000  00003ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ce6  00000000  00000000  00004675  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0000535b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3e       	cpi	r26, 0xE2	; 226
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 ee       	ldi	r26, 0xE2	; 226
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3e       	cpi	r26, 0xE6	; 230
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f7 02 	call	0x5ee	; 0x5ee <main>
  8a:	0c 94 ae 03 	jmp	0x75c	; 0x75c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CLCD_voidSendCommand>:
#include "BIT_MATH.h"
#include "CLCD_interface.h"
#include "DIO_INTERFACE.h"
#include <util/delay.h>
void CLCD_voidSendCommand(u8 copy_u8Command)
{
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
	/*Setting RS pin to low*/
DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_LOW);
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_u8SetPinValue>
/*Setting RW pin low for write*/
DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_LOW);
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_u8SetPinValue>

/*Set command data pins*/
DIO_u8SetPortValue(CLCD_DATA_PORT,copy_u8Command);
  aa:	6c 2f       	mov	r22, r28
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_u8SetPortValue>

/*Send Enable pulse*/
DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_HIGH);
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	62 e0       	ldi	r22, 0x02	; 2
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_u8SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	83 ef       	ldi	r24, 0xF3	; 243
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <CLCD_voidSendCommand+0x2e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <CLCD_voidSendCommand+0x34>
  c6:	00 00       	nop
_delay_ms(2);
DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_LOW);
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	62 e0       	ldi	r22, 0x02	; 2
  cc:	83 e0       	ldi	r24, 0x03	; 3
  ce:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_u8SetPinValue>
}
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <CLCD_voidInit>:
  d6:	8f e0       	ldi	r24, 0x0F	; 15
  d8:	97 e2       	ldi	r25, 0x27	; 39
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <CLCD_voidInit+0x4>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <CLCD_voidInit+0xa>
  e0:	00 00       	nop
{
	/*Wait more that 30 ms*/
	_delay_ms(40);

	/*Function set ,2 lines AND 5*8 size*/
	CLCD_voidSendCommand(0b00111000);
  e2:	88 e3       	ldi	r24, 0x38	; 56
  e4:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
	/*Display on/off control:diplay enable,disable cursor*/
	CLCD_voidSendCommand(0b00001100);
  e8:	8c e0       	ldi	r24, 0x0C	; 12
  ea:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
	/*display clear*/
	CLCD_voidSendCommand(1);
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
  f4:	08 95       	ret

000000f6 <CLCD_voidSendData>:

}


void CLCD_voidSendData(u8 copy_u8Data)
{
  f6:	cf 93       	push	r28
  f8:	c8 2f       	mov	r28, r24

	/*Setting RS pin to HIGH*/
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_HIGH);
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_u8SetPinValue>
	/*Setting RW pin low for write*/
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_LOW);
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	61 e0       	ldi	r22, 0x01	; 1
 108:	83 e0       	ldi	r24, 0x03	; 3
 10a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_u8SetPinValue>

	/*Set data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,copy_u8Data);
 10e:	6c 2f       	mov	r22, r28
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_u8SetPortValue>

	/*Send Enable pulse*/
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_HIGH);
 116:	41 e0       	ldi	r20, 0x01	; 1
 118:	62 e0       	ldi	r22, 0x02	; 2
 11a:	83 e0       	ldi	r24, 0x03	; 3
 11c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_u8SetPinValue>
 120:	83 ef       	ldi	r24, 0xF3	; 243
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <CLCD_voidSendData+0x2e>
 128:	00 c0       	rjmp	.+0      	; 0x12a <CLCD_voidSendData+0x34>
 12a:	00 00       	nop
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_LOW);
 12c:	40 e0       	ldi	r20, 0x00	; 0
 12e:	62 e0       	ldi	r22, 0x02	; 2
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_u8SetPinValue>


}
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <CLCD_voidSendString>:

void CLCD_voidSendString(const u8* Copy_u8String)
{
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	8c 01       	movw	r16, r24
u8 Local_u8Counter=0;
 142:	c0 e0       	ldi	r28, 0x00	; 0
while(Copy_u8String[Local_u8Counter]!='\0')
 144:	03 c0       	rjmp	.+6      	; 0x14c <CLCD_voidSendString+0x12>
{
    CLCD_voidSendData(Copy_u8String[Local_u8Counter]);
 146:	0e 94 7b 00 	call	0xf6	; 0xf6 <CLCD_voidSendData>
    Local_u8Counter++;
 14a:	cf 5f       	subi	r28, 0xFF	; 255
}

void CLCD_voidSendString(const u8* Copy_u8String)
{
u8 Local_u8Counter=0;
while(Copy_u8String[Local_u8Counter]!='\0')
 14c:	f8 01       	movw	r30, r16
 14e:	ec 0f       	add	r30, r28
 150:	f1 1d       	adc	r31, r1
 152:	80 81       	ld	r24, Z
 154:	81 11       	cpse	r24, r1
 156:	f7 cf       	rjmp	.-18     	; 0x146 <CLCD_voidSendString+0xc>
{
    CLCD_voidSendData(Copy_u8String[Local_u8Counter]);
    Local_u8Counter++;
}

}
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	08 95       	ret

00000160 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8Xposition,u8 Copy_u8Yposition)
{
  u8 Local_u8Address;

  if(Copy_u8Xposition==0)
 160:	88 23       	and	r24, r24
 162:	29 f0       	breq	.+10     	; 0x16e <CLCD_voidGoToXY+0xe>
  {
	  Local_u8Address=Copy_u8Yposition;
  }
  else if(Copy_u8Xposition==1)
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	21 f4       	brne	.+8      	; 0x170 <CLCD_voidGoToXY+0x10>

  {
	  Local_u8Address=Copy_u8Yposition+0x40;
 168:	90 e4       	ldi	r25, 0x40	; 64
 16a:	96 0f       	add	r25, r22
 16c:	01 c0       	rjmp	.+2      	; 0x170 <CLCD_voidGoToXY+0x10>
{
  u8 Local_u8Address;

  if(Copy_u8Xposition==0)
  {
	  Local_u8Address=Copy_u8Yposition;
 16e:	96 2f       	mov	r25, r22

  {
	  Local_u8Address=Copy_u8Yposition+0x40;
  }

  CLCD_voidSendCommand(Local_u8Address|(1<<7));
 170:	89 2f       	mov	r24, r25
 172:	80 68       	ori	r24, 0x80	; 128
 174:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
 178:	08 95       	ret

0000017a <DIO_u8SetPortValue>:

		}
	}
return Local_u8ErrorState;

}
 17a:	84 30       	cpi	r24, 0x04	; 4
 17c:	a0 f4       	brcc	.+40     	; 0x1a6 <DIO_u8SetPortValue+0x2c>
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	49 f0       	breq	.+18     	; 0x194 <DIO_u8SetPortValue+0x1a>
 182:	28 f0       	brcs	.+10     	; 0x18e <DIO_u8SetPortValue+0x14>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	49 f0       	breq	.+18     	; 0x19a <DIO_u8SetPortValue+0x20>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	51 f0       	breq	.+20     	; 0x1a0 <DIO_u8SetPortValue+0x26>
 18c:	0e c0       	rjmp	.+28     	; 0x1aa <DIO_u8SetPortValue+0x30>
 18e:	6b bb       	out	0x1b, r22	; 27
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	08 95       	ret
 194:	68 bb       	out	0x18, r22	; 24
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	08 95       	ret
 19a:	65 bb       	out	0x15, r22	; 21
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	08 95       	ret
 1a0:	62 bb       	out	0x12, r22	; 18
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	08 95       	ret
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	08 95       	ret
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret

000001ae <DIO_u8SetPinValue>:
 1ae:	84 30       	cpi	r24, 0x04	; 4
 1b0:	08 f0       	brcs	.+2      	; 0x1b4 <DIO_u8SetPinValue+0x6>
 1b2:	7b c0       	rjmp	.+246    	; 0x2aa <DIO_u8SetPinValue+0xfc>
 1b4:	68 30       	cpi	r22, 0x08	; 8
 1b6:	08 f0       	brcs	.+2      	; 0x1ba <DIO_u8SetPinValue+0xc>
 1b8:	7a c0       	rjmp	.+244    	; 0x2ae <DIO_u8SetPinValue+0x100>
 1ba:	41 30       	cpi	r20, 0x01	; 1
 1bc:	c1 f5       	brne	.+112    	; 0x22e <DIO_u8SetPinValue+0x80>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	91 f0       	breq	.+36     	; 0x1e6 <DIO_u8SetPinValue+0x38>
 1c2:	28 f0       	brcs	.+10     	; 0x1ce <DIO_u8SetPinValue+0x20>
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	d9 f0       	breq	.+54     	; 0x1fe <DIO_u8SetPinValue+0x50>
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	29 f1       	breq	.+74     	; 0x216 <DIO_u8SetPinValue+0x68>
 1cc:	72 c0       	rjmp	.+228    	; 0x2b2 <DIO_u8SetPinValue+0x104>
 1ce:	2b b3       	in	r18, 0x1b	; 27
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_u8SetPinValue+0x2c>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_u8SetPinValue+0x28>
 1de:	82 2b       	or	r24, r18
 1e0:	8b bb       	out	0x1b, r24	; 27
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	08 95       	ret
 1e6:	28 b3       	in	r18, 0x18	; 24
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_u8SetPinValue+0x44>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_u8SetPinValue+0x40>
 1f6:	82 2b       	or	r24, r18
 1f8:	88 bb       	out	0x18, r24	; 24
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	08 95       	ret
 1fe:	25 b3       	in	r18, 0x15	; 21
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_u8SetPinValue+0x5c>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_u8SetPinValue+0x58>
 20e:	82 2b       	or	r24, r18
 210:	85 bb       	out	0x15, r24	; 21
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	08 95       	ret
 216:	22 b3       	in	r18, 0x12	; 18
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_u8SetPinValue+0x74>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_u8SetPinValue+0x70>
 226:	82 2b       	or	r24, r18
 228:	82 bb       	out	0x12, r24	; 18
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	08 95       	ret
 22e:	41 11       	cpse	r20, r1
 230:	42 c0       	rjmp	.+132    	; 0x2b6 <DIO_u8SetPinValue+0x108>
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	99 f0       	breq	.+38     	; 0x25c <DIO_u8SetPinValue+0xae>
 236:	28 f0       	brcs	.+10     	; 0x242 <DIO_u8SetPinValue+0x94>
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	e9 f0       	breq	.+58     	; 0x276 <DIO_u8SetPinValue+0xc8>
 23c:	83 30       	cpi	r24, 0x03	; 3
 23e:	41 f1       	breq	.+80     	; 0x290 <DIO_u8SetPinValue+0xe2>
 240:	3c c0       	rjmp	.+120    	; 0x2ba <DIO_u8SetPinValue+0x10c>
 242:	2b b3       	in	r18, 0x1b	; 27
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_u8SetPinValue+0xa0>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_u8SetPinValue+0x9c>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	8b bb       	out	0x1b, r24	; 27
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	08 95       	ret
 25c:	28 b3       	in	r18, 0x18	; 24
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_u8SetPinValue+0xba>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_u8SetPinValue+0xb6>
 26c:	80 95       	com	r24
 26e:	82 23       	and	r24, r18
 270:	88 bb       	out	0x18, r24	; 24
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	08 95       	ret
 276:	25 b3       	in	r18, 0x15	; 21
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_u8SetPinValue+0xd4>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_u8SetPinValue+0xd0>
 286:	80 95       	com	r24
 288:	82 23       	and	r24, r18
 28a:	85 bb       	out	0x15, r24	; 21
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	08 95       	ret
 290:	22 b3       	in	r18, 0x12	; 18
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_u8SetPinValue+0xee>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_u8SetPinValue+0xea>
 2a0:	80 95       	com	r24
 2a2:	82 23       	and	r24, r18
 2a4:	82 bb       	out	0x12, r24	; 18
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	08 95       	ret
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	08 95       	ret
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	08 95       	ret
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	08 95       	ret
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	08 95       	ret
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	08 95       	ret

000002be <DIO_u8SetPortDir>:
 2be:	84 30       	cpi	r24, 0x04	; 4
 2c0:	a0 f4       	brcc	.+40     	; 0x2ea <DIO_u8SetPortDir+0x2c>
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	49 f0       	breq	.+18     	; 0x2d8 <DIO_u8SetPortDir+0x1a>
 2c6:	28 f0       	brcs	.+10     	; 0x2d2 <DIO_u8SetPortDir+0x14>
 2c8:	82 30       	cpi	r24, 0x02	; 2
 2ca:	49 f0       	breq	.+18     	; 0x2de <DIO_u8SetPortDir+0x20>
 2cc:	83 30       	cpi	r24, 0x03	; 3
 2ce:	51 f0       	breq	.+20     	; 0x2e4 <DIO_u8SetPortDir+0x26>
 2d0:	0e c0       	rjmp	.+28     	; 0x2ee <DIO_u8SetPortDir+0x30>
 2d2:	6a bb       	out	0x1a, r22	; 26
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	08 95       	ret
 2d8:	67 bb       	out	0x17, r22	; 23
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	08 95       	ret
 2de:	64 bb       	out	0x14, r22	; 20
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	08 95       	ret
 2e4:	61 bb       	out	0x11, r22	; 17
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	08 95       	ret
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	08 95       	ret
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	08 95       	ret

000002f2 <DIO_u8SetPinDir>:
 2f2:	84 30       	cpi	r24, 0x04	; 4
 2f4:	08 f0       	brcs	.+2      	; 0x2f8 <DIO_u8SetPinDir+0x6>
 2f6:	7b c0       	rjmp	.+246    	; 0x3ee <DIO_u8SetPinDir+0xfc>
 2f8:	68 30       	cpi	r22, 0x08	; 8
 2fa:	08 f0       	brcs	.+2      	; 0x2fe <DIO_u8SetPinDir+0xc>
 2fc:	7a c0       	rjmp	.+244    	; 0x3f2 <DIO_u8SetPinDir+0x100>
 2fe:	41 30       	cpi	r20, 0x01	; 1
 300:	c1 f5       	brne	.+112    	; 0x372 <DIO_u8SetPinDir+0x80>
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	91 f0       	breq	.+36     	; 0x32a <DIO_u8SetPinDir+0x38>
 306:	28 f0       	brcs	.+10     	; 0x312 <DIO_u8SetPinDir+0x20>
 308:	82 30       	cpi	r24, 0x02	; 2
 30a:	d9 f0       	breq	.+54     	; 0x342 <DIO_u8SetPinDir+0x50>
 30c:	83 30       	cpi	r24, 0x03	; 3
 30e:	29 f1       	breq	.+74     	; 0x35a <DIO_u8SetPinDir+0x68>
 310:	72 c0       	rjmp	.+228    	; 0x3f6 <DIO_u8SetPinDir+0x104>
 312:	2a b3       	in	r18, 0x1a	; 26
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_u8SetPinDir+0x2c>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_u8SetPinDir+0x28>
 322:	82 2b       	or	r24, r18
 324:	8a bb       	out	0x1a, r24	; 26
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	08 95       	ret
 32a:	27 b3       	in	r18, 0x17	; 23
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_u8SetPinDir+0x44>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_u8SetPinDir+0x40>
 33a:	82 2b       	or	r24, r18
 33c:	87 bb       	out	0x17, r24	; 23
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	08 95       	ret
 342:	24 b3       	in	r18, 0x14	; 20
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_u8SetPinDir+0x5c>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_u8SetPinDir+0x58>
 352:	82 2b       	or	r24, r18
 354:	84 bb       	out	0x14, r24	; 20
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	08 95       	ret
 35a:	21 b3       	in	r18, 0x11	; 17
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_u8SetPinDir+0x74>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_u8SetPinDir+0x70>
 36a:	82 2b       	or	r24, r18
 36c:	81 bb       	out	0x11, r24	; 17
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	08 95       	ret
 372:	41 11       	cpse	r20, r1
 374:	42 c0       	rjmp	.+132    	; 0x3fa <DIO_u8SetPinDir+0x108>
 376:	81 30       	cpi	r24, 0x01	; 1
 378:	99 f0       	breq	.+38     	; 0x3a0 <DIO_u8SetPinDir+0xae>
 37a:	28 f0       	brcs	.+10     	; 0x386 <DIO_u8SetPinDir+0x94>
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	e9 f0       	breq	.+58     	; 0x3ba <DIO_u8SetPinDir+0xc8>
 380:	83 30       	cpi	r24, 0x03	; 3
 382:	41 f1       	breq	.+80     	; 0x3d4 <DIO_u8SetPinDir+0xe2>
 384:	3c c0       	rjmp	.+120    	; 0x3fe <DIO_u8SetPinDir+0x10c>
 386:	2a b3       	in	r18, 0x1a	; 26
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_u8SetPinDir+0xa0>
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	6a 95       	dec	r22
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_u8SetPinDir+0x9c>
 396:	80 95       	com	r24
 398:	82 23       	and	r24, r18
 39a:	8a bb       	out	0x1a, r24	; 26
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	08 95       	ret
 3a0:	27 b3       	in	r18, 0x17	; 23
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DIO_u8SetPinDir+0xba>
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	6a 95       	dec	r22
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DIO_u8SetPinDir+0xb6>
 3b0:	80 95       	com	r24
 3b2:	82 23       	and	r24, r18
 3b4:	87 bb       	out	0x17, r24	; 23
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	08 95       	ret
 3ba:	24 b3       	in	r18, 0x14	; 20
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_u8SetPinDir+0xd4>
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	6a 95       	dec	r22
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_u8SetPinDir+0xd0>
 3ca:	80 95       	com	r24
 3cc:	82 23       	and	r24, r18
 3ce:	84 bb       	out	0x14, r24	; 20
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	08 95       	ret
 3d4:	21 b3       	in	r18, 0x11	; 17
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_u8SetPinDir+0xee>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	6a 95       	dec	r22
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_u8SetPinDir+0xea>
 3e4:	80 95       	com	r24
 3e6:	82 23       	and	r24, r18
 3e8:	81 bb       	out	0x11, r24	; 17
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	08 95       	ret
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	08 95       	ret
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	08 95       	ret
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	08 95       	ret
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	08 95       	ret
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	08 95       	ret

00000402 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *Copy_u8Value)
{
	u8 Local_u8ErrorState=0;

		 if((Copy_u8Port>DIO_PORTD)||(Copy_u8Port<DIO_PORTA))
 402:	84 30       	cpi	r24, 0x04	; 4
 404:	d0 f5       	brcc	.+116    	; 0x47a <DIO_u8GetPinValue+0x78>
		    {
		 	   Local_u8ErrorState=1;
		 	  return Local_u8ErrorState;
		    }
		 else if ((Copy_u8Pin>DIO_PIN7)||(Copy_u8Pin<DIO_PIN0))
 406:	68 30       	cpi	r22, 0x08	; 8
 408:	d0 f5       	brcc	.+116    	; 0x47e <DIO_u8GetPinValue+0x7c>
			   Local_u8ErrorState=1;
		       return Local_u8ErrorState;
		 }
		 else
		 {
			switch(Copy_u8Port)
 40a:	81 30       	cpi	r24, 0x01	; 1
 40c:	91 f0       	breq	.+36     	; 0x432 <DIO_u8GetPinValue+0x30>
 40e:	28 f0       	brcs	.+10     	; 0x41a <DIO_u8GetPinValue+0x18>
 410:	82 30       	cpi	r24, 0x02	; 2
 412:	d9 f0       	breq	.+54     	; 0x44a <DIO_u8GetPinValue+0x48>
 414:	83 30       	cpi	r24, 0x03	; 3
 416:	29 f1       	breq	.+74     	; 0x462 <DIO_u8GetPinValue+0x60>
 418:	34 c0       	rjmp	.+104    	; 0x482 <DIO_u8GetPinValue+0x80>
			{
			case DIO_PORTA:*Copy_u8Value=GET_BIT(PINA,Copy_u8Pin);break;
 41a:	89 b3       	in	r24, 0x19	; 25
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_u8GetPinValue+0x22>
 420:	95 95       	asr	r25
 422:	87 95       	ror	r24
 424:	6a 95       	dec	r22
 426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_u8GetPinValue+0x1e>
 428:	81 70       	andi	r24, 0x01	; 1
 42a:	fa 01       	movw	r30, r20
 42c:	80 83       	st	Z, r24
			case DIO_PORTB:*Copy_u8Value=GET_BIT(PINB,Copy_u8Pin);break;
			case DIO_PORTC:*Copy_u8Value=GET_BIT(PINC,Copy_u8Pin);break;
			case DIO_PORTD:*Copy_u8Value=GET_BIT(PIND,Copy_u8Pin);break;
			}
		 }
return Local_u8ErrorState;
 42e:	80 e0       	ldi	r24, 0x00	; 0
		 }
		 else
		 {
			switch(Copy_u8Port)
			{
			case DIO_PORTA:*Copy_u8Value=GET_BIT(PINA,Copy_u8Pin);break;
 430:	08 95       	ret
			case DIO_PORTB:*Copy_u8Value=GET_BIT(PINB,Copy_u8Pin);break;
 432:	86 b3       	in	r24, 0x16	; 22
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	02 c0       	rjmp	.+4      	; 0x43c <DIO_u8GetPinValue+0x3a>
 438:	95 95       	asr	r25
 43a:	87 95       	ror	r24
 43c:	6a 95       	dec	r22
 43e:	e2 f7       	brpl	.-8      	; 0x438 <DIO_u8GetPinValue+0x36>
 440:	81 70       	andi	r24, 0x01	; 1
 442:	fa 01       	movw	r30, r20
 444:	80 83       	st	Z, r24
			case DIO_PORTC:*Copy_u8Value=GET_BIT(PINC,Copy_u8Pin);break;
			case DIO_PORTD:*Copy_u8Value=GET_BIT(PIND,Copy_u8Pin);break;
			}
		 }
return Local_u8ErrorState;
 446:	80 e0       	ldi	r24, 0x00	; 0
		 else
		 {
			switch(Copy_u8Port)
			{
			case DIO_PORTA:*Copy_u8Value=GET_BIT(PINA,Copy_u8Pin);break;
			case DIO_PORTB:*Copy_u8Value=GET_BIT(PINB,Copy_u8Pin);break;
 448:	08 95       	ret
			case DIO_PORTC:*Copy_u8Value=GET_BIT(PINC,Copy_u8Pin);break;
 44a:	83 b3       	in	r24, 0x13	; 19
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_u8GetPinValue+0x52>
 450:	95 95       	asr	r25
 452:	87 95       	ror	r24
 454:	6a 95       	dec	r22
 456:	e2 f7       	brpl	.-8      	; 0x450 <DIO_u8GetPinValue+0x4e>
 458:	81 70       	andi	r24, 0x01	; 1
 45a:	fa 01       	movw	r30, r20
 45c:	80 83       	st	Z, r24
			case DIO_PORTD:*Copy_u8Value=GET_BIT(PIND,Copy_u8Pin);break;
			}
		 }
return Local_u8ErrorState;
 45e:	80 e0       	ldi	r24, 0x00	; 0
		 {
			switch(Copy_u8Port)
			{
			case DIO_PORTA:*Copy_u8Value=GET_BIT(PINA,Copy_u8Pin);break;
			case DIO_PORTB:*Copy_u8Value=GET_BIT(PINB,Copy_u8Pin);break;
			case DIO_PORTC:*Copy_u8Value=GET_BIT(PINC,Copy_u8Pin);break;
 460:	08 95       	ret
			case DIO_PORTD:*Copy_u8Value=GET_BIT(PIND,Copy_u8Pin);break;
 462:	80 b3       	in	r24, 0x10	; 16
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 c0       	rjmp	.+4      	; 0x46c <DIO_u8GetPinValue+0x6a>
 468:	95 95       	asr	r25
 46a:	87 95       	ror	r24
 46c:	6a 95       	dec	r22
 46e:	e2 f7       	brpl	.-8      	; 0x468 <DIO_u8GetPinValue+0x66>
 470:	81 70       	andi	r24, 0x01	; 1
 472:	fa 01       	movw	r30, r20
 474:	80 83       	st	Z, r24
			}
		 }
return Local_u8ErrorState;
 476:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
			case DIO_PORTA:*Copy_u8Value=GET_BIT(PINA,Copy_u8Pin);break;
			case DIO_PORTB:*Copy_u8Value=GET_BIT(PINB,Copy_u8Pin);break;
			case DIO_PORTC:*Copy_u8Value=GET_BIT(PINC,Copy_u8Pin);break;
			case DIO_PORTD:*Copy_u8Value=GET_BIT(PIND,Copy_u8Pin);break;
 478:	08 95       	ret
	u8 Local_u8ErrorState=0;

		 if((Copy_u8Port>DIO_PORTD)||(Copy_u8Port<DIO_PORTA))
		    {
		 	   Local_u8ErrorState=1;
		 	  return Local_u8ErrorState;
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	08 95       	ret
		    }
		 else if ((Copy_u8Pin>DIO_PIN7)||(Copy_u8Pin<DIO_PIN0))
		 {
			   Local_u8ErrorState=1;
		       return Local_u8ErrorState;
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	08 95       	ret
			case DIO_PORTB:*Copy_u8Value=GET_BIT(PINB,Copy_u8Pin);break;
			case DIO_PORTC:*Copy_u8Value=GET_BIT(PINC,Copy_u8Pin);break;
			case DIO_PORTD:*Copy_u8Value=GET_BIT(PIND,Copy_u8Pin);break;
			}
		 }
return Local_u8ErrorState;
 482:	80 e0       	ldi	r24, 0x00	; 0
}
 484:	08 95       	ret

00000486 <IR_INIT>:
#include "DIO_INTERFACE.h"
#include "IR_Sensor.h"
void IR_INIT()
{
	
DIO_u8SetPinDir(DIO_PORTA,DIO_PIN4,DIO_LOW);
 486:	40 e0       	ldi	r20, 0x00	; 0
 488:	64 e0       	ldi	r22, 0x04	; 4
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_u8SetPinDir>
DIO_u8SetPinDir(DIO_PORTA,DIO_PIN5,DIO_LOW);
 490:	40 e0       	ldi	r20, 0x00	; 0
 492:	65 e0       	ldi	r22, 0x05	; 5
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_u8SetPinDir>
DIO_u8SetPinDir(DIO_PORTA,DIO_PIN6,DIO_LOW);
 49a:	40 e0       	ldi	r20, 0x00	; 0
 49c:	66 e0       	ldi	r22, 0x06	; 6
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_u8SetPinDir>
DIO_u8SetPinDir(DIO_PORTA,DIO_PIN7,DIO_LOW);	
 4a4:	40 e0       	ldi	r20, 0x00	; 0
 4a6:	67 e0       	ldi	r22, 0x07	; 7
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_u8SetPinDir>
DIO_u8SetPinValue(DIO_PORTA,DIO_PIN4,DIO_HIGH);
 4ae:	41 e0       	ldi	r20, 0x01	; 1
 4b0:	64 e0       	ldi	r22, 0x04	; 4
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_u8SetPinValue>
DIO_u8SetPinValue(DIO_PORTA,DIO_PIN5,DIO_HIGH);
 4b8:	41 e0       	ldi	r20, 0x01	; 1
 4ba:	65 e0       	ldi	r22, 0x05	; 5
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_u8SetPinValue>
DIO_u8SetPinValue(DIO_PORTA,DIO_PIN6,DIO_HIGH);
 4c2:	41 e0       	ldi	r20, 0x01	; 1
 4c4:	66 e0       	ldi	r22, 0x06	; 6
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_u8SetPinValue>
DIO_u8SetPinValue(DIO_PORTA,DIO_PIN7,DIO_HIGH);
 4cc:	41 e0       	ldi	r20, 0x01	; 1
 4ce:	67 e0       	ldi	r22, 0x07	; 7
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_u8SetPinValue>
 4d6:	08 95       	ret

000004d8 <IR_READ>:
}
u8 IR_READ(){
 4d8:	ff 92       	push	r15
 4da:	0f 93       	push	r16
 4dc:	1f 93       	push	r17
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	1f 92       	push	r1
 4e4:	cd b7       	in	r28, 0x3d	; 61
 4e6:	de b7       	in	r29, 0x3e	; 62
	u8 value;
	for(int i=4;i<8;i++)
 4e8:	04 e0       	ldi	r16, 0x04	; 4
 4ea:	10 e0       	ldi	r17, 0x00	; 0
 4ec:	0f c0       	rjmp	.+30     	; 0x50c <IR_READ+0x34>
	{
		DIO_u8GetPinValue(DIO_PORTA,i,&value);
 4ee:	ae 01       	movw	r20, r28
 4f0:	4f 5f       	subi	r20, 0xFF	; 255
 4f2:	5f 4f       	sbci	r21, 0xFF	; 255
 4f4:	60 2f       	mov	r22, r16
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	0e 94 01 02 	call	0x402	; 0x402 <DIO_u8GetPinValue>
		if(value==1)
 4fc:	99 81       	ldd	r25, Y+1	; 0x01
 4fe:	91 30       	cpi	r25, 0x01	; 1
 500:	19 f4       	brne	.+6      	; 0x508 <IR_READ+0x30>
		{
			value=i-4;
 502:	8c ef       	ldi	r24, 0xFC	; 252
 504:	80 0f       	add	r24, r16
          return value;
 506:	06 c0       	rjmp	.+12     	; 0x514 <IR_READ+0x3c>
DIO_u8SetPinValue(DIO_PORTA,DIO_PIN6,DIO_HIGH);
DIO_u8SetPinValue(DIO_PORTA,DIO_PIN7,DIO_HIGH);
}
u8 IR_READ(){
	u8 value;
	for(int i=4;i<8;i++)
 508:	0f 5f       	subi	r16, 0xFF	; 255
 50a:	1f 4f       	sbci	r17, 0xFF	; 255
 50c:	08 30       	cpi	r16, 0x08	; 8
 50e:	11 05       	cpc	r17, r1
 510:	74 f3       	brlt	.-36     	; 0x4ee <IR_READ+0x16>
		{
			value=i-4;
          return value;
		}
	}
	return 0xff;
 512:	8f ef       	ldi	r24, 0xFF	; 255
 514:	0f 90       	pop	r0
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	1f 91       	pop	r17
 51c:	0f 91       	pop	r16
 51e:	ff 90       	pop	r15
 520:	08 95       	ret

00000522 <checkroams>:
#include "IR_Sensor.h"
#include "TIMER_TEST_interface.h"
#include <avr/io.h>
#include <util/delay.h>
void checkroams(u8 roams[])
{
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	ec 01       	movw	r28, r24
	CLCD_voidSendCommand(1);
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
	
	if(roams[0]==0)
 52e:	88 81       	ld	r24, Y
 530:	81 11       	cpse	r24, r1
 532:	08 c0       	rjmp	.+16     	; 0x544 <checkroams+0x22>
	{
		CLCD_voidGoToXY(0,0);
 534:	60 e0       	ldi	r22, 0x00	; 0
 536:	0e 94 b0 00 	call	0x160	; 0x160 <CLCD_voidGoToXY>
		CLCD_voidSendString("R1:EMP");
 53a:	80 e6       	ldi	r24, 0x60	; 96
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 9d 00 	call	0x13a	; 0x13a <CLCD_voidSendString>
 542:	0a c0       	rjmp	.+20     	; 0x558 <checkroams+0x36>
	}
	else if(roams[0]==1)
 544:	81 30       	cpi	r24, 0x01	; 1
 546:	41 f4       	brne	.+16     	; 0x558 <checkroams+0x36>
	{
		
		CLCD_voidGoToXY(0,0);
 548:	60 e0       	ldi	r22, 0x00	; 0
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	0e 94 b0 00 	call	0x160	; 0x160 <CLCD_voidGoToXY>
		CLCD_voidSendString("R1:Full");
 550:	87 e6       	ldi	r24, 0x67	; 103
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 9d 00 	call	0x13a	; 0x13a <CLCD_voidSendString>
	}
	//////////////////////////
	if(roams[1]==0)
 558:	89 81       	ldd	r24, Y+1	; 0x01
 55a:	81 11       	cpse	r24, r1
 55c:	08 c0       	rjmp	.+16     	; 0x56e <checkroams+0x4c>
	{
		CLCD_voidGoToXY(0,7);
 55e:	67 e0       	ldi	r22, 0x07	; 7
 560:	0e 94 b0 00 	call	0x160	; 0x160 <CLCD_voidGoToXY>
		CLCD_voidSendString("R2:EMP");
 564:	8f e6       	ldi	r24, 0x6F	; 111
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 9d 00 	call	0x13a	; 0x13a <CLCD_voidSendString>
 56c:	0a c0       	rjmp	.+20     	; 0x582 <checkroams+0x60>
	}
	else if(roams[1]==1)
 56e:	81 30       	cpi	r24, 0x01	; 1
 570:	41 f4       	brne	.+16     	; 0x582 <checkroams+0x60>
	{
		CLCD_voidGoToXY(0,7);
 572:	67 e0       	ldi	r22, 0x07	; 7
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	0e 94 b0 00 	call	0x160	; 0x160 <CLCD_voidGoToXY>
		CLCD_voidSendString("R2:Full");
 57a:	86 e7       	ldi	r24, 0x76	; 118
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 9d 00 	call	0x13a	; 0x13a <CLCD_voidSendString>
	}
	////////////////////////
	if(roams[2]==0)
 582:	8a 81       	ldd	r24, Y+2	; 0x02
 584:	81 11       	cpse	r24, r1
 586:	09 c0       	rjmp	.+18     	; 0x59a <checkroams+0x78>
	{
		CLCD_voidGoToXY(1,0);
 588:	60 e0       	ldi	r22, 0x00	; 0
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	0e 94 b0 00 	call	0x160	; 0x160 <CLCD_voidGoToXY>
		CLCD_voidSendString("R3:EMP");
 590:	8e e7       	ldi	r24, 0x7E	; 126
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 9d 00 	call	0x13a	; 0x13a <CLCD_voidSendString>
 598:	09 c0       	rjmp	.+18     	; 0x5ac <checkroams+0x8a>
	}
	else if(roams[2]==1)
 59a:	81 30       	cpi	r24, 0x01	; 1
 59c:	39 f4       	brne	.+14     	; 0x5ac <checkroams+0x8a>
	{
		CLCD_voidGoToXY(1,0);
 59e:	60 e0       	ldi	r22, 0x00	; 0
 5a0:	0e 94 b0 00 	call	0x160	; 0x160 <CLCD_voidGoToXY>
		CLCD_voidSendString("R3:Full");
 5a4:	85 e8       	ldi	r24, 0x85	; 133
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 9d 00 	call	0x13a	; 0x13a <CLCD_voidSendString>
	}
	////////////////////////
	if(roams[3]==0)
 5ac:	8b 81       	ldd	r24, Y+3	; 0x03
 5ae:	81 11       	cpse	r24, r1
 5b0:	09 c0       	rjmp	.+18     	; 0x5c4 <checkroams+0xa2>
	{
		CLCD_voidGoToXY(1,7);
 5b2:	67 e0       	ldi	r22, 0x07	; 7
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	0e 94 b0 00 	call	0x160	; 0x160 <CLCD_voidGoToXY>
		CLCD_voidSendString("R4:EMP");
 5ba:	8d e8       	ldi	r24, 0x8D	; 141
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 9d 00 	call	0x13a	; 0x13a <CLCD_voidSendString>
 5c2:	09 c0       	rjmp	.+18     	; 0x5d6 <checkroams+0xb4>
	}
	else if(roams[3]==1)
 5c4:	81 30       	cpi	r24, 0x01	; 1
 5c6:	39 f4       	brne	.+14     	; 0x5d6 <checkroams+0xb4>
	{
		CLCD_voidGoToXY(1,7);
 5c8:	67 e0       	ldi	r22, 0x07	; 7
 5ca:	0e 94 b0 00 	call	0x160	; 0x160 <CLCD_voidGoToXY>
		CLCD_voidSendString("R4:Full");
 5ce:	84 e9       	ldi	r24, 0x94	; 148
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 9d 00 	call	0x13a	; 0x13a <CLCD_voidSendString>
 5d6:	2f eb       	ldi	r18, 0xBF	; 191
 5d8:	87 e2       	ldi	r24, 0x27	; 39
 5da:	99 e0       	ldi	r25, 0x09	; 9
 5dc:	21 50       	subi	r18, 0x01	; 1
 5de:	80 40       	sbci	r24, 0x00	; 0
 5e0:	90 40       	sbci	r25, 0x00	; 0
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <checkroams+0xba>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <checkroams+0xc4>
 5e6:	00 00       	nop
	}
	_delay_ms(3000);
}
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	08 95       	ret

000005ee <main>:
int main(void)
{
	 u8 static roams[4]={0,0,0,0};
	u8 userchoose=0xff;
	u8 curroam;
		DIO_u8SetPinDir(PORTA,DIO_PIN0,DIO_HIGH);
 5ee:	8b b3       	in	r24, 0x1b	; 27
 5f0:	41 e0       	ldi	r20, 0x01	; 1
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_u8SetPinDir>
		DIO_u8SetPinDir(PORTA,DIO_PIN1,DIO_HIGH);
 5f8:	8b b3       	in	r24, 0x1b	; 27
 5fa:	41 e0       	ldi	r20, 0x01	; 1
 5fc:	61 e0       	ldi	r22, 0x01	; 1
 5fe:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_u8SetPinDir>
		DIO_u8SetPinDir(PORTA,DIO_PIN2,DIO_HIGH);
 602:	8b b3       	in	r24, 0x1b	; 27
 604:	41 e0       	ldi	r20, 0x01	; 1
 606:	62 e0       	ldi	r22, 0x02	; 2
 608:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_u8SetPinDir>
		DIO_u8SetPinDir(PORTA,DIO_PIN3,DIO_HIGH);
 60c:	8b b3       	in	r24, 0x1b	; 27
 60e:	41 e0       	ldi	r20, 0x01	; 1
 610:	63 e0       	ldi	r22, 0x03	; 3
 612:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_u8SetPinDir>
	DIO_u8SetPortDir(PORTC,0xff);
 616:	85 b3       	in	r24, 0x15	; 21
 618:	6f ef       	ldi	r22, 0xFF	; 255
 61a:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_u8SetPortDir>
	DIO_u8SetPinDir(PORTD,DIO_PIN0,DIO_HIGH);
 61e:	82 b3       	in	r24, 0x12	; 18
 620:	41 e0       	ldi	r20, 0x01	; 1
 622:	60 e0       	ldi	r22, 0x00	; 0
 624:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(PORTD,DIO_PIN1,DIO_HIGH);
 628:	82 b3       	in	r24, 0x12	; 18
 62a:	41 e0       	ldi	r20, 0x01	; 1
 62c:	61 e0       	ldi	r22, 0x01	; 1
 62e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(PORTD,DIO_PIN2,DIO_HIGH);
 632:	82 b3       	in	r24, 0x12	; 18
 634:	41 e0       	ldi	r20, 0x01	; 1
 636:	62 e0       	ldi	r22, 0x02	; 2
 638:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_u8SetPinDir>
      DIO_u8SetPortDir(DIO_PORTD,0xff);
 63c:	6f ef       	ldi	r22, 0xFF	; 255
 63e:	83 e0       	ldi	r24, 0x03	; 3
 640:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_u8SetPortDir>
      TIMER1_voidInit();
 644:	0e 94 8c 03 	call	0x718	; 0x718 <TIMER1_voidInit>
      TIMER1_voidSetICR(20000);
 648:	80 e2       	ldi	r24, 0x20	; 32
 64a:	9e e4       	ldi	r25, 0x4E	; 78
 64c:	0e 94 a8 03 	call	0x750	; 0x750 <TIMER1_voidSetICR>
	  CLCD_voidInit();
 650:	0e 94 6b 00 	call	0xd6	; 0xd6 <CLCD_voidInit>
	  IR_INIT();
 654:	0e 94 43 02 	call	0x486	; 0x486 <IR_INIT>
	  CLCD_voidSendString("WELCOME TO YOUR GARAGE");
 658:	8c e9       	ldi	r24, 0x9C	; 156
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	0e 94 9d 00 	call	0x13a	; 0x13a <CLCD_voidSendString>
 660:	2f eb       	ldi	r18, 0xBF	; 191
 662:	87 e2       	ldi	r24, 0x27	; 39
 664:	99 e0       	ldi	r25, 0x09	; 9
 666:	21 50       	subi	r18, 0x01	; 1
 668:	80 40       	sbci	r24, 0x00	; 0
 66a:	90 40       	sbci	r25, 0x00	; 0
 66c:	e1 f7       	brne	.-8      	; 0x666 <main+0x78>
 66e:	00 c0       	rjmp	.+0      	; 0x670 <main+0x82>
 670:	00 00       	nop
	  _delay_ms(3000);
    while (1) 
    {
		
		userchoose=IR_READ();
 672:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <IR_READ>
		if(userchoose!=0xff)
 676:	8f 3f       	cpi	r24, 0xFF	; 255
 678:	09 f4       	brne	.+2      	; 0x67c <main+0x8e>
 67a:	49 c0       	rjmp	.+146    	; 0x70e <main+0x120>
		{	
			 if(roams[userchoose]==1)
 67c:	c8 2f       	mov	r28, r24
 67e:	d0 e0       	ldi	r29, 0x00	; 0
 680:	fe 01       	movw	r30, r28
 682:	ee 51       	subi	r30, 0x1E	; 30
 684:	ff 4f       	sbci	r31, 0xFF	; 255
 686:	80 81       	ld	r24, Z
 688:	81 30       	cpi	r24, 0x01	; 1
 68a:	a1 f4       	brne	.+40     	; 0x6b4 <main+0xc6>
			 {
				 CLCD_voidSendCommand(1);
 68c:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
				 CLCD_voidSendString("Its FUll choose another");
 690:	83 eb       	ldi	r24, 0xB3	; 179
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 9d 00 	call	0x13a	; 0x13a <CLCD_voidSendString>
 698:	2f eb       	ldi	r18, 0xBF	; 191
 69a:	87 e2       	ldi	r24, 0x27	; 39
 69c:	99 e0       	ldi	r25, 0x09	; 9
 69e:	21 50       	subi	r18, 0x01	; 1
 6a0:	80 40       	sbci	r24, 0x00	; 0
 6a2:	90 40       	sbci	r25, 0x00	; 0
 6a4:	e1 f7       	brne	.-8      	; 0x69e <main+0xb0>
 6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <main+0xba>
 6a8:	00 00       	nop
				 _delay_ms(3000);
				 checkroams(roams);
 6aa:	82 ee       	ldi	r24, 0xE2	; 226
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	0e 94 91 02 	call	0x522	; 0x522 <checkroams>
 6b2:	2d c0       	rjmp	.+90     	; 0x70e <main+0x120>
				   userchoose=0xff;
			 }
			 else if(roams[userchoose]==0)
 6b4:	81 11       	cpse	r24, r1
 6b6:	2b c0       	rjmp	.+86     	; 0x70e <main+0x120>
			 {
				  
				 
				 CLCD_voidSendCommand(1);
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
				 CLCD_voidSendString("OPENING...");
 6be:	8b ec       	ldi	r24, 0xCB	; 203
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	0e 94 9d 00 	call	0x13a	; 0x13a <CLCD_voidSendString>
				 TIMER1_voidSetOCR(2000);
 6c6:	80 ed       	ldi	r24, 0xD0	; 208
 6c8:	97 e0       	ldi	r25, 0x07	; 7
 6ca:	0e 94 ab 03 	call	0x756	; 0x756 <TIMER1_voidSetOCR>
 6ce:	2f e7       	ldi	r18, 0x7F	; 127
 6d0:	84 e8       	ldi	r24, 0x84	; 132
 6d2:	9e e1       	ldi	r25, 0x1E	; 30
 6d4:	21 50       	subi	r18, 0x01	; 1
 6d6:	80 40       	sbci	r24, 0x00	; 0
 6d8:	90 40       	sbci	r25, 0x00	; 0
 6da:	e1 f7       	brne	.-8      	; 0x6d4 <main+0xe6>
 6dc:	00 c0       	rjmp	.+0      	; 0x6de <main+0xf0>
 6de:	00 00       	nop
				 _delay_ms(10000);
				   roams[userchoose]=1;
 6e0:	ce 51       	subi	r28, 0x1E	; 30
 6e2:	df 4f       	sbci	r29, 0xFF	; 255
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	88 83       	st	Y, r24
				    userchoose=0xff;
					 CLCD_voidSendCommand(1);
 6e8:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
					CLCD_voidSendString("CLOSING...");
 6ec:	86 ed       	ldi	r24, 0xD6	; 214
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	0e 94 9d 00 	call	0x13a	; 0x13a <CLCD_voidSendString>
					 TIMER1_voidSetOCR(1000);
 6f4:	88 ee       	ldi	r24, 0xE8	; 232
 6f6:	93 e0       	ldi	r25, 0x03	; 3
 6f8:	0e 94 ab 03 	call	0x756	; 0x756 <TIMER1_voidSetOCR>
 6fc:	2f ef       	ldi	r18, 0xFF	; 255
 6fe:	84 e3       	ldi	r24, 0x34	; 52
 700:	9c e0       	ldi	r25, 0x0C	; 12
 702:	21 50       	subi	r18, 0x01	; 1
 704:	80 40       	sbci	r24, 0x00	; 0
 706:	90 40       	sbci	r25, 0x00	; 0
 708:	e1 f7       	brne	.-8      	; 0x702 <main+0x114>
 70a:	00 c0       	rjmp	.+0      	; 0x70c <main+0x11e>
 70c:	00 00       	nop
					  _delay_ms(4000);
			 }
			  userchoose=0xff;
		}
			  
	checkroams(roams);
 70e:	82 ee       	ldi	r24, 0xE2	; 226
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	0e 94 91 02 	call	0x522	; 0x522 <checkroams>
	}
 716:	ad cf       	rjmp	.-166    	; 0x672 <main+0x84>

00000718 <TIMER1_voidInit>:

void TIMER1_voidInit(void)
{

/*non inverted*/
SET_BIT(TCCR1A,COM1A1);
 718:	8f b5       	in	r24, 0x2f	; 47
 71a:	80 68       	ori	r24, 0x80	; 128
 71c:	8f bd       	out	0x2f, r24	; 47
CLEAR_BIT(TCCR1A,COM1A0);
 71e:	8f b5       	in	r24, 0x2f	; 47
 720:	8f 7b       	andi	r24, 0xBF	; 191
 722:	8f bd       	out	0x2f, r24	; 47

/*PWM WITH ICR1*/
SET_BIT(TCCR1A,WGM11);
 724:	8f b5       	in	r24, 0x2f	; 47
 726:	82 60       	ori	r24, 0x02	; 2
 728:	8f bd       	out	0x2f, r24	; 47
SET_BIT(TCCR1B,WGM12);
 72a:	8e b5       	in	r24, 0x2e	; 46
 72c:	88 60       	ori	r24, 0x08	; 8
 72e:	8e bd       	out	0x2e, r24	; 46
SET_BIT(TCCR1B,WGM13);
 730:	8e b5       	in	r24, 0x2e	; 46
 732:	80 61       	ori	r24, 0x10	; 16
 734:	8e bd       	out	0x2e, r24	; 46
CLEAR_BIT(TCCR1A,WGM10);
 736:	8f b5       	in	r24, 0x2f	; 47
 738:	8e 7f       	andi	r24, 0xFE	; 254
 73a:	8f bd       	out	0x2f, r24	; 47
/*PRESCALLER BY 8*/
CLEAR_BIT(TCCR1B,CS10);
 73c:	8e b5       	in	r24, 0x2e	; 46
 73e:	8e 7f       	andi	r24, 0xFE	; 254
 740:	8e bd       	out	0x2e, r24	; 46
SET_BIT(TCCR1B,CS11);
 742:	8e b5       	in	r24, 0x2e	; 46
 744:	82 60       	ori	r24, 0x02	; 2
 746:	8e bd       	out	0x2e, r24	; 46
CLEAR_BIT(TCCR1B,CS12);
 748:	8e b5       	in	r24, 0x2e	; 46
 74a:	8b 7f       	andi	r24, 0xFB	; 251
 74c:	8e bd       	out	0x2e, r24	; 46
 74e:	08 95       	ret

00000750 <TIMER1_voidSetICR>:
}
void TIMER1_voidSetICR(u16 Copy_u16Value)
{
ICR1=Copy_u16Value;
 750:	97 bd       	out	0x27, r25	; 39
 752:	86 bd       	out	0x26, r24	; 38
 754:	08 95       	ret

00000756 <TIMER1_voidSetOCR>:
}
void TIMER1_voidSetOCR(u16 Copy_u16Value)
{
 OCR1A=Copy_u16Value;	
 756:	9b bd       	out	0x2b, r25	; 43
 758:	8a bd       	out	0x2a, r24	; 42
 75a:	08 95       	ret

0000075c <_exit>:
 75c:	f8 94       	cli

0000075e <__stop_program>:
 75e:	ff cf       	rjmp	.-2      	; 0x75e <__stop_program>
